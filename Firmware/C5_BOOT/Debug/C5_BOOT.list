
C5_BOOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d4  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080054a0  080054a0  000064a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080054b0  080054b0  000064b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080054b4  080054b4  000064b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000002c  24000000  080054b8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000080  2400002c  080054e4  0000702c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240000ac  080054e4  000070ac  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000702c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bce6  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001e82  00000000  00000000  00012d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000990  00000000  00000000  00014bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000071a  00000000  00000000  00015558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00032650  00000000  00000000  00015c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d069  00000000  00000000  000482c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00141633  00000000  00000000  0005532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0019695e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002528  00000000  00000000  001969a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000062  00000000  00000000  00198ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	2400002c 	.word	0x2400002c
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08005488 	.word	0x08005488

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000030 	.word	0x24000030
 8000308:	08005488 	.word	0x08005488

0800030c <BL_Handle>:
                                                         { BL_STATE_TEST_MEMORY, BL_STATE_END, BL_EVENT_TEST_OK },
                                                         { BL_STATE_INIT, BL_STATE_ERROR, BL_EVENT_ERROR },
                                                         { BL_STATE_TEST_MEMORY, BL_STATE_ERROR, BL_EVENT_ERROR } };
static BLVectorTable_TypeDef BLVectorTable[]         = { { BL_InitFunction }, { BL_TestMemoryFuction }, { BL_ErrorFunction }, { BL_EndFunction } };
void BL_Handle(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
   if(BLVectorTable[Bl.State].BLFunction != NULL)
 8000310:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <BL_Handle+0x3c>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	b2db      	uxtb	r3, r3
 8000316:	461a      	mov	r2, r3
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <BL_Handle+0x40>)
 800031a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d00d      	beq.n	800033e <BL_Handle+0x32>
   {
      if(BLVectorTable[Bl.State].BLFunction() != BL_STATUS_OK)
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <BL_Handle+0x3c>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	b2db      	uxtb	r3, r3
 8000328:	461a      	mov	r2, r3
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <BL_Handle+0x40>)
 800032c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000330:	4798      	blx	r3
 8000332:	4603      	mov	r3, r0
 8000334:	2b01      	cmp	r3, #1
 8000336:	d002      	beq.n	800033e <BL_Handle+0x32>
      {
         Bl.Event = BL_EVENT_ERROR;
 8000338:	4b03      	ldr	r3, [pc, #12]	@ (8000348 <BL_Handle+0x3c>)
 800033a:	2203      	movs	r2, #3
 800033c:	705a      	strb	r2, [r3, #1]
      }
   }
   BL_ChangeState();
 800033e:	f000 f8c9 	bl	80004d4 <BL_ChangeState>
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	24000048 	.word	0x24000048
 800034c:	2400000c 	.word	0x2400000c

08000350 <BL_InitFunction>:
static BLStatus_TypeDef BL_InitFunction(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
   BLStatus_TypeDef Status = BL_STATUS_OK;
 8000356:	2301      	movs	r3, #1
 8000358:	71fb      	strb	r3, [r7, #7]
   if(APSXX04L_Init() == APSXX04L_ERROR)
 800035a:	f000 fb2f 	bl	80009bc <APSXX04L_Init>
   {
      Status = BL_STATUS_ERROR;
   }
   Bl.Event = BL_EVENT_INIT_OK;
 800035e:	4b04      	ldr	r3, [pc, #16]	@ (8000370 <BL_InitFunction+0x20>)
 8000360:	2201      	movs	r2, #1
 8000362:	705a      	strb	r2, [r3, #1]
   return Status;
 8000364:	79fb      	ldrb	r3, [r7, #7]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	24000048 	.word	0x24000048

08000374 <BL_TestMemoryFuction>:
static BLStatus_TypeDef BL_TestMemoryFuction(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800037a:	af00      	add	r7, sp, #0
   BLStatus_TypeDef Status = BL_STATUS_OK;
 800037c:	2301      	movs	r3, #1
 800037e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
   uint8_t TempWrite[256]  = { 0 };
 8000382:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000386:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	3304      	adds	r3, #4
 8000390:	22fc      	movs	r2, #252	@ 0xfc
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f005 f84b 	bl	8005430 <memset>
   uint8_t TempRead[256]   = { 0 };
 800039a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800039e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	3304      	adds	r3, #4
 80003a8:	22fc      	movs	r2, #252	@ 0xfc
 80003aa:	2100      	movs	r1, #0
 80003ac:	4618      	mov	r0, r3
 80003ae:	f005 f83f 	bl	8005430 <memset>
   for(int i = 0; i < 256; i++)
 80003b2:	2300      	movs	r3, #0
 80003b4:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80003b8:	e010      	b.n	80003dc <BL_TestMemoryFuction+0x68>
   {
      TempWrite[i] = i;
 80003ba:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80003be:	b2d9      	uxtb	r1, r3
 80003c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80003c4:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80003c8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80003cc:	4413      	add	r3, r2
 80003ce:	460a      	mov	r2, r1
 80003d0:	701a      	strb	r2, [r3, #0]
   for(int i = 0; i < 256; i++)
 80003d2:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80003d6:	3301      	adds	r3, #1
 80003d8:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80003dc:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80003e0:	2bff      	cmp	r3, #255	@ 0xff
 80003e2:	ddea      	ble.n	80003ba <BL_TestMemoryFuction+0x46>
   }
   if(APSXX04L_Write(0x0, TempWrite, 256) != APSXX04L_OK)
 80003e4:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80003e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003ec:	4619      	mov	r1, r3
 80003ee:	2000      	movs	r0, #0
 80003f0:	f000 fa40 	bl	8000874 <APSXX04L_Write>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d003      	beq.n	8000402 <BL_TestMemoryFuction+0x8e>
   {
      Status = BL_STATUS_ERROR;
 80003fa:	2300      	movs	r3, #0
 80003fc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8000400:	e02f      	b.n	8000462 <BL_TestMemoryFuction+0xee>
   }
   else if(APSXX04L_Read(0x0, TempRead, 256) != APSXX04L_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000408:	4619      	mov	r1, r3
 800040a:	2000      	movs	r0, #0
 800040c:	f000 fa84 	bl	8000918 <APSXX04L_Read>
 8000410:	4603      	mov	r3, r0
 8000412:	2b01      	cmp	r3, #1
 8000414:	d003      	beq.n	800041e <BL_TestMemoryFuction+0xaa>
   {
      Status = BL_STATUS_ERROR;
 8000416:	2300      	movs	r3, #0
 8000418:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800041c:	e021      	b.n	8000462 <BL_TestMemoryFuction+0xee>
   }
   else
   {
      for(int i = 0; i < 256; i++)
 800041e:	2300      	movs	r3, #0
 8000420:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8000424:	e019      	b.n	800045a <BL_TestMemoryFuction+0xe6>
      {
         if(TempWrite[i] != TempRead[i])
 8000426:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800042a:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 800042e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000432:	4413      	add	r3, r2
 8000434:	781a      	ldrb	r2, [r3, #0]
 8000436:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800043a:	f5a3 7103 	sub.w	r1, r3, #524	@ 0x20c
 800043e:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000442:	440b      	add	r3, r1
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	429a      	cmp	r2, r3
 8000448:	d002      	beq.n	8000450 <BL_TestMemoryFuction+0xdc>
         {
            Status = BL_STATUS_ERROR;
 800044a:	2300      	movs	r3, #0
 800044c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      for(int i = 0; i < 256; i++)
 8000450:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8000454:	3301      	adds	r3, #1
 8000456:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800045a:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 800045e:	2bff      	cmp	r3, #255	@ 0xff
 8000460:	dde1      	ble.n	8000426 <BL_TestMemoryFuction+0xb2>
         }
      }
   }
   Bl.Event = BL_EVENT_TEST_OK;
 8000462:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <BL_TestMemoryFuction+0x104>)
 8000464:	2202      	movs	r2, #2
 8000466:	705a      	strb	r2, [r3, #1]
   return Status;
 8000468:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 800046c:	4618      	mov	r0, r3
 800046e:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	24000048 	.word	0x24000048

0800047c <BL_EndFunction>:
static BLStatus_TypeDef BL_EndFunction(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
   BLStatus_TypeDef Status = BL_STATUS_ERROR;
 8000482:	2300      	movs	r3, #0
 8000484:	73fb      	strb	r3, [r7, #15]
   if(APSXX04L_EnterMemoryMappedMode() == APSXX04L_OK)
 8000486:	f000 f911 	bl	80006ac <APSXX04L_EnterMemoryMappedMode>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d10f      	bne.n	80004b0 <BL_EndFunction+0x34>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000490:	b672      	cpsid	i
}
 8000492:	bf00      	nop
  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_fault_irq(void)
{
  __ASM volatile ("cpsid f" : : : "memory");
 8000494:	b671      	cpsid	f
}
 8000496:	bf00      	nop
   {
      __disable_irq();
      __disable_fault_irq();
      void (*app_reset_handler)(void) = (void *)(*((volatile uint32_t *)(0x08020000 + 4U)));
 8000498:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <BL_EndFunction+0x40>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	60bb      	str	r3, [r7, #8]
      __set_MSP(*(volatile uint32_t *)0x08020000);
 800049e:	4b08      	ldr	r3, [pc, #32]	@ (80004c0 <BL_EndFunction+0x44>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f383 8808 	msr	MSP, r3
}
 80004aa:	bf00      	nop
      app_reset_handler();
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	4798      	blx	r3
   }
   return Status;
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08020004 	.word	0x08020004
 80004c0:	08020000 	.word	0x08020000

080004c4 <BL_ErrorFunction>:
static BLStatus_TypeDef BL_ErrorFunction(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
   BLStatus_TypeDef Status = BL_STATUS_ERROR;
 80004ca:	2300      	movs	r3, #0
 80004cc:	71fb      	strb	r3, [r7, #7]
   while(1)
 80004ce:	bf00      	nop
 80004d0:	e7fd      	b.n	80004ce <BL_ErrorFunction+0xa>
	...

080004d4 <BL_ChangeState>:
      ;
   return Status;
}
static void BL_ChangeState(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
   for(int i = 0; i < BL_TRANSITION_TABLE_SIZE; i++)
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	e023      	b.n	8000528 <BL_ChangeState+0x54>
   {
      if(Bl.State == BLTransitionTable[i].Source && Bl.Event == BLTransitionTable[i].Event)
 80004e0:	4b17      	ldr	r3, [pc, #92]	@ (8000540 <BL_ChangeState+0x6c>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2d9      	uxtb	r1, r3
 80004e6:	4817      	ldr	r0, [pc, #92]	@ (8000544 <BL_ChangeState+0x70>)
 80004e8:	687a      	ldr	r2, [r7, #4]
 80004ea:	4613      	mov	r3, r2
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	4413      	add	r3, r2
 80004f0:	4403      	add	r3, r0
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d114      	bne.n	8000522 <BL_ChangeState+0x4e>
 80004f8:	4b11      	ldr	r3, [pc, #68]	@ (8000540 <BL_ChangeState+0x6c>)
 80004fa:	785b      	ldrb	r3, [r3, #1]
 80004fc:	b2d9      	uxtb	r1, r3
 80004fe:	4811      	ldr	r0, [pc, #68]	@ (8000544 <BL_ChangeState+0x70>)
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4613      	mov	r3, r2
 8000504:	005b      	lsls	r3, r3, #1
 8000506:	4413      	add	r3, r2
 8000508:	4403      	add	r3, r0
 800050a:	3302      	adds	r3, #2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4299      	cmp	r1, r3
 8000510:	d107      	bne.n	8000522 <BL_ChangeState+0x4e>
      {
         Bl.State = BLTransitionTable[1].Destination;
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <BL_ChangeState+0x70>)
 8000514:	791a      	ldrb	r2, [r3, #4]
 8000516:	4b0a      	ldr	r3, [pc, #40]	@ (8000540 <BL_ChangeState+0x6c>)
 8000518:	701a      	strb	r2, [r3, #0]
         Bl.Event = BL_EVENT_NOTHING;
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <BL_ChangeState+0x6c>)
 800051c:	2200      	movs	r2, #0
 800051e:	705a      	strb	r2, [r3, #1]
         return;
 8000520:	e009      	b.n	8000536 <BL_ChangeState+0x62>
   for(int i = 0; i < BL_TRANSITION_TABLE_SIZE; i++)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3301      	adds	r3, #1
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	d9d8      	bls.n	80004e0 <BL_ChangeState+0xc>
      }
   }
   Bl.Event = BL_EVENT_NOTHING;
 800052e:	4b04      	ldr	r3, [pc, #16]	@ (8000540 <BL_ChangeState+0x6c>)
 8000530:	2200      	movs	r2, #0
 8000532:	705a      	strb	r2, [r3, #1]
   return;
 8000534:	bf00      	nop
}
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	24000048 	.word	0x24000048
 8000544:	24000000 	.word	0x24000000

08000548 <APSXX04L_WriteCmdS>:
#include "APSXX04L.h"

#include "main.h"
#include "octospi.h"
static uint8_t APSXX04L_WriteCmdS(uint8_t Cmd)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	@ 0x58
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
   OSPI_RegularCmdTypeDef sCommand = { 0 };
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	2250      	movs	r2, #80	@ 0x50
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f004 ff68 	bl	8005430 <memset>
   // Konfiguracja komendy
   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
   sCommand.Instruction        = Cmd;
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	613b      	str	r3, [r7, #16]
   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800056c:	2301      	movs	r3, #1
 800056e:	617b      	str	r3, [r7, #20]
   sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8000570:	2300      	movs	r3, #0
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000574:	2300      	movs	r3, #0
 8000576:	637b      	str	r3, [r7, #52]	@ 0x34
   sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
   sCommand.DummyCycles        = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   if(HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <APSXX04L_WriteCmdS+0x5c>)
 800058c:	f001 fb8f 	bl	8001cae <HAL_OSPI_Command>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <APSXX04L_WriteCmdS+0x52>
   {
      return APSXX04L_ERROR;
 8000596:	23ff      	movs	r3, #255	@ 0xff
 8000598:	e000      	b.n	800059c <APSXX04L_WriteCmdS+0x54>
   }
   return APSXX04L_OK;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	3758      	adds	r7, #88	@ 0x58
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	2400004c 	.word	0x2400004c

080005a8 <APSXX04L_WriteCmdQ>:
static uint8_t APSXX04L_WriteCmdQ(uint8_t Cmd)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	@ 0x58
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
   OSPI_RegularCmdTypeDef sCommand = { 0 };
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	2250      	movs	r2, #80	@ 0x50
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 ff38 	bl	8005430 <memset>
   // Konfiguracja komendy
   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
   sCommand.Instruction        = Cmd;
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	613b      	str	r3, [r7, #16]
   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_4_LINES;
 80005cc:	2303      	movs	r3, #3
 80005ce:	617b      	str	r3, [r7, #20]
   sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	@ 0x24
   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
   sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80005d8:	2300      	movs	r3, #0
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
   sCommand.DummyCycles        = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   if(HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <APSXX04L_WriteCmdQ+0x5c>)
 80005ec:	f001 fb5f 	bl	8001cae <HAL_OSPI_Command>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <APSXX04L_WriteCmdQ+0x52>
   {
      return APSXX04L_ERROR;
 80005f6:	23ff      	movs	r3, #255	@ 0xff
 80005f8:	e000      	b.n	80005fc <APSXX04L_WriteCmdQ+0x54>
   }
   return APSXX04L_OK;
 80005fa:	2301      	movs	r3, #1
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3758      	adds	r7, #88	@ 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2400004c 	.word	0x2400004c

08000608 <APSXX04L_ReadDataRegS>:
static uint8_t APSXX04L_ReadDataRegS(uint8_t Reg, uint8_t *Data, uint8_t Size)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b096      	sub	sp, #88	@ 0x58
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	4613      	mov	r3, r2
 8000616:	71bb      	strb	r3, [r7, #6]
   OSPI_RegularCmdTypeDef sCommand = { 0 };
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	2250      	movs	r2, #80	@ 0x50
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 ff05 	bl	8005430 <memset>

   /* Initialize the read register command */
   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000626:	2300      	movs	r3, #0
 8000628:	60bb      	str	r3, [r7, #8]
   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800062a:	2301      	movs	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
   sCommand.Instruction        = Reg;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	613b      	str	r3, [r7, #16]
   sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800063a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
   sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8000640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000644:	62bb      	str	r3, [r7, #40]	@ 0x28
   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   sCommand.Address            = Reg;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	623b      	str	r3, [r7, #32]
   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800064e:	2300      	movs	r3, #0
 8000650:	637b      	str	r3, [r7, #52]	@ 0x34
   sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8000652:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8000658:	2300      	movs	r3, #0
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48
   sCommand.NbData             = Size;
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	647b      	str	r3, [r7, #68]	@ 0x44
   sCommand.DummyCycles        = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8000664:	2300      	movs	r3, #0
 8000666:	653b      	str	r3, [r7, #80]	@ 0x50
   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000668:	2300      	movs	r3, #0
 800066a:	657b      	str	r3, [r7, #84]	@ 0x54

   /* Configure the command */
   if(HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000674:	4619      	mov	r1, r3
 8000676:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <APSXX04L_ReadDataRegS+0xa0>)
 8000678:	f001 fb19 	bl	8001cae <HAL_OSPI_Command>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <APSXX04L_ReadDataRegS+0x7e>
   {
      return APSXX04L_ERROR;
 8000682:	23ff      	movs	r3, #255	@ 0xff
 8000684:	e00b      	b.n	800069e <APSXX04L_ReadDataRegS+0x96>
   }

   /* Reception of the data */
   if(HAL_OSPI_Receive(&hospi1, (uint8_t *)Data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800068a:	6839      	ldr	r1, [r7, #0]
 800068c:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <APSXX04L_ReadDataRegS+0xa0>)
 800068e:	f001 fc0e 	bl	8001eae <HAL_OSPI_Receive>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <APSXX04L_ReadDataRegS+0x94>
   {
      return APSXX04L_ERROR;
 8000698:	23ff      	movs	r3, #255	@ 0xff
 800069a:	e000      	b.n	800069e <APSXX04L_ReadDataRegS+0x96>
   }

   return APSXX04L_OK;
 800069c:	2301      	movs	r3, #1
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3758      	adds	r7, #88	@ 0x58
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2400004c 	.word	0x2400004c

080006ac <APSXX04L_EnterMemoryMappedMode>:
   }

   return APSXX04L_OK;
}
uint8_t APSXX04L_EnterMemoryMappedMode(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b096      	sub	sp, #88	@ 0x58
 80006b0:	af00      	add	r7, sp, #0
   OSPI_RegularCmdTypeDef sCommand        = { 0 };
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	2250      	movs	r2, #80	@ 0x50
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 feb8 	bl	8005430 <memset>
   OSPI_MemoryMappedTypeDef sMemMappedCfg = { 0 };
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]

   /* Initialize the write command */
   sCommand.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 80006c8:	2302      	movs	r3, #2
 80006ca:	60bb      	str	r3, [r7, #8]
   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_4_LINES;
 80006d0:	2303      	movs	r3, #3
 80006d2:	617b      	str	r3, [r7, #20]
   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
   sCommand.Instruction        = 0x02;
 80006dc:	2302      	movs	r3, #2
 80006de:	613b      	str	r3, [r7, #16]
   sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80006e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
   sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80006e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
   sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80006f4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80006f8:	643b      	str	r3, [r7, #64]	@ 0x40
   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   sCommand.DummyCycles        = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
   sCommand.DQSMode            = HAL_OSPI_DQS_ENABLE;
 8000702:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000706:	653b      	str	r3, [r7, #80]	@ 0x50
   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000708:	2300      	movs	r3, #0
 800070a:	657b      	str	r3, [r7, #84]	@ 0x54

   if(HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000714:	4619      	mov	r1, r3
 8000716:	4824      	ldr	r0, [pc, #144]	@ (80007a8 <APSXX04L_EnterMemoryMappedMode+0xfc>)
 8000718:	f001 fac9 	bl	8001cae <HAL_OSPI_Command>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <APSXX04L_EnterMemoryMappedMode+0x7a>
   {
      return APSXX04L_ERROR;
 8000722:	23ff      	movs	r3, #255	@ 0xff
 8000724:	e03c      	b.n	80007a0 <APSXX04L_EnterMemoryMappedMode+0xf4>
   }
   /* Initialize the read command */
   sCommand.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 8000726:	2301      	movs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_4_LINES;
 800072e:	2303      	movs	r3, #3
 8000730:	617b      	str	r3, [r7, #20]
   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8000732:	2300      	movs	r3, #0
 8000734:	61bb      	str	r3, [r7, #24]
   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
   sCommand.Instruction        = 0xEB;
 800073a:	23eb      	movs	r3, #235	@ 0xeb
 800073c:	613b      	str	r3, [r7, #16]
   sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800073e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
   sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8000744:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800074e:	2300      	movs	r3, #0
 8000750:	637b      	str	r3, [r7, #52]	@ 0x34
   sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8000752:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000756:	643b      	str	r3, [r7, #64]	@ 0x40
   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8000758:	2300      	movs	r3, #0
 800075a:	64bb      	str	r3, [r7, #72]	@ 0x48
   sCommand.DummyCycles        = 6;
 800075c:	2306      	movs	r3, #6
 800075e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	653b      	str	r3, [r7, #80]	@ 0x50
   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000764:	2300      	movs	r3, #0
 8000766:	657b      	str	r3, [r7, #84]	@ 0x54

   if(HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000770:	4619      	mov	r1, r3
 8000772:	480d      	ldr	r0, [pc, #52]	@ (80007a8 <APSXX04L_EnterMemoryMappedMode+0xfc>)
 8000774:	f001 fa9b 	bl	8001cae <HAL_OSPI_Command>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <APSXX04L_EnterMemoryMappedMode+0xd6>
   {
      return APSXX04L_ERROR;
 800077e:	23ff      	movs	r3, #255	@ 0xff
 8000780:	e00e      	b.n	80007a0 <APSXX04L_EnterMemoryMappedMode+0xf4>
   }

   /* OctoSPI activation of memory-mapped mode */
   sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
   sMemMappedCfg.TimeOutPeriod     = 0xFFU;
 8000786:	23ff      	movs	r3, #255	@ 0xff
 8000788:	607b      	str	r3, [r7, #4]

   if(HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	4619      	mov	r1, r3
 800078e:	4806      	ldr	r0, [pc, #24]	@ (80007a8 <APSXX04L_EnterMemoryMappedMode+0xfc>)
 8000790:	f001 fc30 	bl	8001ff4 <HAL_OSPI_MemoryMapped>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <APSXX04L_EnterMemoryMappedMode+0xf2>
   {
      return APSXX04L_ERROR;
 800079a:	23ff      	movs	r3, #255	@ 0xff
 800079c:	e000      	b.n	80007a0 <APSXX04L_EnterMemoryMappedMode+0xf4>
   }

   return APSXX04L_OK;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3758      	adds	r7, #88	@ 0x58
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2400004c 	.word	0x2400004c

080007ac <APSXX04L_HighClcConfig>:
static uint8_t APSXX04L_HighClcConfig(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
   HAL_OSPI_DeInit(&hospi1);
 80007b2:	482e      	ldr	r0, [pc, #184]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007b4:	f001 fa54 	bl	8001c60 <HAL_OSPI_DeInit>
   OSPIM_CfgTypeDef sOspiManagerCfg  = { 0 };
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
   hospi1.Instance                   = OCTOSPI1;
 80007c8:	4b28      	ldr	r3, [pc, #160]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007ca:	4a29      	ldr	r2, [pc, #164]	@ (8000870 <APSXX04L_HighClcConfig+0xc4>)
 80007cc:	601a      	str	r2, [r3, #0]
   hospi1.Init.FifoThreshold         = 1;
 80007ce:	4b27      	ldr	r3, [pc, #156]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	605a      	str	r2, [r3, #4]
   hospi1.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80007d4:	4b25      	ldr	r3, [pc, #148]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
   hospi1.Init.MemoryType            = HAL_OSPI_MEMTYPE_APMEMORY;
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80007e0:	60da      	str	r2, [r3, #12]
   hospi1.Init.DeviceSize            = 23;
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007e4:	2217      	movs	r2, #23
 80007e6:	611a      	str	r2, [r3, #16]
   hospi1.Init.ChipSelectHighTime    = 2;
 80007e8:	4b20      	ldr	r3, [pc, #128]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007ea:	2202      	movs	r2, #2
 80007ec:	615a      	str	r2, [r3, #20]
   hospi1.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
   hospi1.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
   hospi1.Init.WrapSize              = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
   hospi1.Init.ClockPrescaler        = 4;
 8000800:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 8000802:	2204      	movs	r2, #4
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
   hospi1.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 8000808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800080c:	629a      	str	r2, [r3, #40]	@ 0x28
   hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	62da      	str	r2, [r3, #44]	@ 0x2c
   hospi1.Init.ChipSelectBoundary    = 0;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	631a      	str	r2, [r3, #48]	@ 0x30
   hospi1.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 800081c:	2208      	movs	r2, #8
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
   hospi1.Init.MaxTran               = 255;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 8000822:	22ff      	movs	r2, #255	@ 0xff
 8000824:	639a      	str	r2, [r3, #56]	@ 0x38
   hospi1.Init.Refresh               = 0;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	63da      	str	r2, [r3, #60]	@ 0x3c
   if(HAL_OSPI_Init(&hospi1) != HAL_OK)
 800082c:	480f      	ldr	r0, [pc, #60]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 800082e:	f001 f95b 	bl	8001ae8 <HAL_OSPI_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <APSXX04L_HighClcConfig+0x90>
   {
      return APSXX04L_ERROR;
 8000838:	23ff      	movs	r3, #255	@ 0xff
 800083a:	e013      	b.n	8000864 <APSXX04L_HighClcConfig+0xb8>
   }
   sOspiManagerCfg.ClkPort   = 1;
 800083c:	2301      	movs	r3, #1
 800083e:	603b      	str	r3, [r7, #0]
   sOspiManagerCfg.NCSPort   = 1;
 8000840:	2301      	movs	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
   sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000844:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000848:	60fb      	str	r3, [r7, #12]
   if(HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <APSXX04L_HighClcConfig+0xc0>)
 8000854:	f001 fc2c 	bl	80020b0 <HAL_OSPIM_Config>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <APSXX04L_HighClcConfig+0xb6>
   {
      return APSXX04L_ERROR;
 800085e:	23ff      	movs	r3, #255	@ 0xff
 8000860:	e000      	b.n	8000864 <APSXX04L_HighClcConfig+0xb8>
   }
   return APSXX04L_OK;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2400004c 	.word	0x2400004c
 8000870:	52005000 	.word	0x52005000

08000874 <APSXX04L_Write>:
uint8_t APSXX04L_Write(uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b098      	sub	sp, #96	@ 0x60
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
   OSPI_RegularCmdTypeDef sCommand = { 0 };
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	2250      	movs	r2, #80	@ 0x50
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f004 fdd1 	bl	8005430 <memset>

   /* Initialize the write command */
   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
   sCommand.Instruction        = 0x2;
 8000896:	2302      	movs	r3, #2
 8000898:	61bb      	str	r3, [r7, #24]
   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_4_LINES;
 800089a:	2303      	movs	r3, #3
 800089c:	61fb      	str	r3, [r7, #28]
   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]
   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
   sCommand.Address            = Address;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80008aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	633b      	str	r3, [r7, #48]	@ 0x30
   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	@ 0x34
   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80008be:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   sCommand.NbData             = Size;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	653b      	str	r3, [r7, #80]	@ 0x50
   sCommand.DummyCycles        = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	657b      	str	r3, [r7, #84]	@ 0x54
   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	65bb      	str	r3, [r7, #88]	@ 0x58
   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80008d4:	2300      	movs	r3, #0
 80008d6:	65fb      	str	r3, [r7, #92]	@ 0x5c

   /* Configure the command */
   if(HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008e0:	4619      	mov	r1, r3
 80008e2:	480c      	ldr	r0, [pc, #48]	@ (8000914 <APSXX04L_Write+0xa0>)
 80008e4:	f001 f9e3 	bl	8001cae <HAL_OSPI_Command>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <APSXX04L_Write+0x7e>
   {
      return APSXX04L_ERROR;
 80008ee:	23ff      	movs	r3, #255	@ 0xff
 80008f0:	e00b      	b.n	800090a <APSXX04L_Write+0x96>
   }

   /* Transmission of the data */
   if(HAL_OSPI_Transmit(&hospi1, Data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80008f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80008f6:	68b9      	ldr	r1, [r7, #8]
 80008f8:	4806      	ldr	r0, [pc, #24]	@ (8000914 <APSXX04L_Write+0xa0>)
 80008fa:	f001 fa65 	bl	8001dc8 <HAL_OSPI_Transmit>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <APSXX04L_Write+0x94>
   {
      return APSXX04L_ERROR;
 8000904:	23ff      	movs	r3, #255	@ 0xff
 8000906:	e000      	b.n	800090a <APSXX04L_Write+0x96>
   }

   return APSXX04L_OK;
 8000908:	2301      	movs	r3, #1
}
 800090a:	4618      	mov	r0, r3
 800090c:	3760      	adds	r7, #96	@ 0x60
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2400004c 	.word	0x2400004c

08000918 <APSXX04L_Read>:
uint8_t APSXX04L_Read(uint32_t Address, uint8_t *Data, uint32_t Size)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b098      	sub	sp, #96	@ 0x60
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
   OSPI_RegularCmdTypeDef sCommand = { 0 };
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2250      	movs	r2, #80	@ 0x50
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f004 fd7f 	bl	8005430 <memset>

   /* Initialize the read command */
   sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
   sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
   sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_4_LINES;
 800093a:	2303      	movs	r3, #3
 800093c:	61fb      	str	r3, [r7, #28]
   sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
   sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
   sCommand.Instruction        = 0xEB;
 8000946:	23eb      	movs	r3, #235	@ 0xeb
 8000948:	61bb      	str	r3, [r7, #24]
   sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800094a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800094e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8000950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000954:	633b      	str	r3, [r7, #48]	@ 0x30
   sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	637b      	str	r3, [r7, #52]	@ 0x34
   sCommand.Address            = Address;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	62bb      	str	r3, [r7, #40]	@ 0x28
   sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800095e:	2300      	movs	r3, #0
 8000960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8000962:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000966:	64bb      	str	r3, [r7, #72]	@ 0x48
   sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	653b      	str	r3, [r7, #80]	@ 0x50
   sCommand.NbData             = Size;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   sCommand.DummyCycles        = 6;
 8000970:	2306      	movs	r3, #6
 8000972:	657b      	str	r3, [r7, #84]	@ 0x54
   sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	65bb      	str	r3, [r7, #88]	@ 0x58
   sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000978:	2300      	movs	r3, #0
 800097a:	65fb      	str	r3, [r7, #92]	@ 0x5c

   /* Configure the command */
   if(HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000984:	4619      	mov	r1, r3
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <APSXX04L_Read+0xa0>)
 8000988:	f001 f991 	bl	8001cae <HAL_OSPI_Command>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <APSXX04L_Read+0x7e>
   {
      return APSXX04L_ERROR;
 8000992:	23ff      	movs	r3, #255	@ 0xff
 8000994:	e00b      	b.n	80009ae <APSXX04L_Read+0x96>
   }

   /* Reception of the data */
   if(HAL_OSPI_Receive(&hospi1, Data, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <APSXX04L_Read+0xa0>)
 800099e:	f001 fa86 	bl	8001eae <HAL_OSPI_Receive>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <APSXX04L_Read+0x94>
   {
      return APSXX04L_ERROR;
 80009a8:	23ff      	movs	r3, #255	@ 0xff
 80009aa:	e000      	b.n	80009ae <APSXX04L_Read+0x96>
   }

   return APSXX04L_OK;
 80009ac:	2301      	movs	r3, #1
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3760      	adds	r7, #96	@ 0x60
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	2400004c 	.word	0x2400004c

080009bc <APSXX04L_Init>:
uint8_t APSXX04L_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
   uint8_t Temp[9];
   uint8_t Status;
   Status = APSXX04L_WriteCmdS(0x66);
 80009c2:	2066      	movs	r0, #102	@ 0x66
 80009c4:	f7ff fdc0 	bl	8000548 <APSXX04L_WriteCmdS>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]
   Status = APSXX04L_WriteCmdS(0x99);
 80009cc:	2099      	movs	r0, #153	@ 0x99
 80009ce:	f7ff fdbb 	bl	8000548 <APSXX04L_WriteCmdS>
 80009d2:	4603      	mov	r3, r0
 80009d4:	73fb      	strb	r3, [r7, #15]
   Status = APSXX04L_WriteCmdQ(0x66);
 80009d6:	2066      	movs	r0, #102	@ 0x66
 80009d8:	f7ff fde6 	bl	80005a8 <APSXX04L_WriteCmdQ>
 80009dc:	4603      	mov	r3, r0
 80009de:	73fb      	strb	r3, [r7, #15]
   Status = APSXX04L_WriteCmdQ(0x99);
 80009e0:	2099      	movs	r0, #153	@ 0x99
 80009e2:	f7ff fde1 	bl	80005a8 <APSXX04L_WriteCmdQ>
 80009e6:	4603      	mov	r3, r0
 80009e8:	73fb      	strb	r3, [r7, #15]
   HAL_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fc52 	bl	8001294 <HAL_Delay>
   if(Status == APSXX04L_OK)
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d119      	bne.n	8000a2a <APSXX04L_Init+0x6e>
   {
      Status = APSXX04L_ReadDataRegS(0x9F, Temp, 9);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2209      	movs	r2, #9
 80009fa:	4619      	mov	r1, r3
 80009fc:	209f      	movs	r0, #159	@ 0x9f
 80009fe:	f7ff fe03 	bl	8000608 <APSXX04L_ReadDataRegS>
 8000a02:	4603      	mov	r3, r0
 8000a04:	73fb      	strb	r3, [r7, #15]
      if(Temp[1] == 93)
 8000a06:	797b      	ldrb	r3, [r7, #5]
 8000a08:	2b5d      	cmp	r3, #93	@ 0x5d
 8000a0a:	d10e      	bne.n	8000a2a <APSXX04L_Init+0x6e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a0c:	f3bf 8f4f 	dsb	sy
}
 8000a10:	bf00      	nop
      {
         __DSB();

         Status = APSXX04L_WriteCmdS(0x35);
 8000a12:	2035      	movs	r0, #53	@ 0x35
 8000a14:	f7ff fd98 	bl	8000548 <APSXX04L_WriteCmdS>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	73fb      	strb	r3, [r7, #15]
         if(Status == APSXX04L_OK)
 8000a1c:	7bfb      	ldrb	r3, [r7, #15]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d103      	bne.n	8000a2a <APSXX04L_Init+0x6e>
         {
            Status = APSXX04L_HighClcConfig();
 8000a22:	f7ff fec3 	bl	80007ac <APSXX04L_HighClcConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	73fb      	strb	r3, [r7, #15]
         }
      }
   }
   return Status;
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a1f      	ldr	r2, [pc, #124]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b19      	ldr	r3, [pc, #100]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a7e:	f043 0302 	orr.w	r3, r3, #2
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a94:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a09      	ldr	r2, [pc, #36]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000a9c:	f043 0310 	orr.w	r3, r3, #16
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <MX_GPIO_Init+0x8c>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0310 	and.w	r3, r3, #16
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	58024400 	.word	0x58024400

08000ac4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN 1 */

   /* USER CODE END 1 */

   /* MPU Configuration--------------------------------------------------------*/
   MPU_Config();
 8000ac8:	f000 f87e 	bl	8000bc8 <MPU_Config>

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000acc:	f000 fb50 	bl	8001170 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 8000ad0:	f000 f80c 	bl	8000aec <SystemClock_Config>
  __ASM volatile ("cpsie f" : : : "memory");
 8000ad4:	b661      	cpsie	f
}
 8000ad6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8000ad8:	b662      	cpsie	i
}
 8000ada:	bf00      	nop
   __enable_fault_irq();
   __enable_irq();
   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000adc:	f7ff ffaa 	bl	8000a34 <MX_GPIO_Init>
   MX_OCTOSPI1_Init();
 8000ae0:	f000 f8b8 	bl	8000c54 <MX_OCTOSPI1_Init>

   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while(1)
   {
      BL_Handle();
 8000ae4:	f7ff fc12 	bl	800030c <BL_Handle>
 8000ae8:	e7fc      	b.n	8000ae4 <main+0x20>
	...

08000aec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09c      	sub	sp, #112	@ 0x70
 8000af0:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af6:	224c      	movs	r2, #76	@ 0x4c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fc98 	bl	8005430 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2220      	movs	r2, #32
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fc92 	bl	8005430 <memset>

   /** Supply configuration update enable
    */
   HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b0c:	2004      	movs	r0, #4
 8000b0e:	f002 fa27 	bl	8002f60 <HAL_PWREx_ConfigSupply>

   /** Configure the main internal regulator output voltage
    */
   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <SystemClock_Config+0xd8>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bc4 <SystemClock_Config+0xd8>)
 8000b1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b28      	ldr	r3, [pc, #160]	@ (8000bc4 <SystemClock_Config+0xd8>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

   while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
 8000b2e:	bf00      	nop
 8000b30:	4b24      	ldr	r3, [pc, #144]	@ (8000bc4 <SystemClock_Config+0xd8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b3c:	d1f8      	bne.n	8000b30 <SystemClock_Config+0x44>
   }

   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	627b      	str	r3, [r7, #36]	@ 0x24
   RCC_OscInitStruct.HSEState       = RCC_HSE_ON;
 8000b42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   RCC_OscInitStruct.PLL.PLLM       = 2;
 8000b50:	2302      	movs	r3, #2
 8000b52:	653b      	str	r3, [r7, #80]	@ 0x50
   RCC_OscInitStruct.PLL.PLLN       = 20;
 8000b54:	2314      	movs	r3, #20
 8000b56:	657b      	str	r3, [r7, #84]	@ 0x54
   RCC_OscInitStruct.PLL.PLLP       = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
   RCC_OscInitStruct.PLL.PLLQ       = 2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   RCC_OscInitStruct.PLL.PLLR       = 2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	663b      	str	r3, [r7, #96]	@ 0x60
   RCC_OscInitStruct.PLL.PLLRGE     = RCC_PLL1VCIRANGE_3;
 8000b64:	230c      	movs	r3, #12
 8000b66:	667b      	str	r3, [r7, #100]	@ 0x64
   RCC_OscInitStruct.PLL.PLLVCOSEL  = RCC_PLL1VCOWIDE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   RCC_OscInitStruct.PLL.PLLFRACN   = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fa4d 	bl	8003014 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x98>
   {
      Error_Handler();
 8000b80:	f000 f861 	bl	8000c46 <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType
       = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000b84:	233f      	movs	r3, #63	@ 0x3f
 8000b86:	607b      	str	r3, [r7, #4]
   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	60bb      	str	r3, [r7, #8]
   RCC_ClkInitStruct.SYSCLKDivider  = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
   RCC_ClkInitStruct.AHBCLKDivider  = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
   RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	617b      	str	r3, [r7, #20]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b98:	2340      	movs	r3, #64	@ 0x40
 8000b9a:	61bb      	str	r3, [r7, #24]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba0:	61fb      	str	r3, [r7, #28]
   RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ba2:	2340      	movs	r3, #64	@ 0x40
 8000ba4:	623b      	str	r3, [r7, #32]

   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2103      	movs	r1, #3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fe0c 	bl	80037c8 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xce>
   {
      Error_Handler();
 8000bb6:	f000 f846 	bl	8000c46 <Error_Handler>
   }
}
 8000bba:	bf00      	nop
 8000bbc:	3770      	adds	r7, #112	@ 0x70
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	58024800 	.word	0x58024800

08000bc8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
   MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]

   /* Disables the MPU */
   HAL_MPU_Disable();
 8000bda:	f000 fc63 	bl	80014a4 <HAL_MPU_Disable>

   /** Initializes and configures the Region and the memory to be protected
    */
   MPU_InitStruct.Enable           = MPU_REGION_ENABLE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	703b      	strb	r3, [r7, #0]
   MPU_InitStruct.Number           = MPU_REGION_NUMBER0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	707b      	strb	r3, [r7, #1]
   MPU_InitStruct.BaseAddress      = 0x0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
   MPU_InitStruct.Size             = MPU_REGION_SIZE_4GB;
 8000bea:	231f      	movs	r3, #31
 8000bec:	723b      	strb	r3, [r7, #8]
   MPU_InitStruct.SubRegionDisable = 0x87;
 8000bee:	2387      	movs	r3, #135	@ 0x87
 8000bf0:	727b      	strb	r3, [r7, #9]
   MPU_InitStruct.TypeExtField     = MPU_TEX_LEVEL0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	72bb      	strb	r3, [r7, #10]
   MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	72fb      	strb	r3, [r7, #11]
   MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	733b      	strb	r3, [r7, #12]
   MPU_InitStruct.IsShareable      = MPU_ACCESS_SHAREABLE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	737b      	strb	r3, [r7, #13]
   MPU_InitStruct.IsCacheable      = MPU_ACCESS_NOT_CACHEABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73bb      	strb	r3, [r7, #14]
   MPU_InitStruct.IsBufferable     = MPU_ACCESS_NOT_BUFFERABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]

   HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fc81 	bl	8001514 <HAL_MPU_ConfigRegion>

   /** Initializes and configures the Region and the memory to be protected
    */
   MPU_InitStruct.Number           = MPU_REGION_NUMBER1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	707b      	strb	r3, [r7, #1]
   MPU_InitStruct.BaseAddress      = 0x90000000;
 8000c16:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8000c1a:	607b      	str	r3, [r7, #4]
   MPU_InitStruct.Size             = MPU_REGION_SIZE_8MB;
 8000c1c:	2316      	movs	r3, #22
 8000c1e:	723b      	strb	r3, [r7, #8]
   MPU_InitStruct.SubRegionDisable = 0x0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	727b      	strb	r3, [r7, #9]
   MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c24:	2303      	movs	r3, #3
 8000c26:	72fb      	strb	r3, [r7, #11]
   MPU_InitStruct.DisableExec      = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	733b      	strb	r3, [r7, #12]
   MPU_InitStruct.IsShareable      = MPU_ACCESS_NOT_SHAREABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	737b      	strb	r3, [r7, #13]

   HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c30:	463b      	mov	r3, r7
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fc6e 	bl	8001514 <HAL_MPU_ConfigRegion>
   /* Enables the MPU */
   HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f000 fc4b 	bl	80014d4 <HAL_MPU_Enable>
}
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4a:	b672      	cpsid	i
}
 8000c4c:	bf00      	nop
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8000c4e:	bf00      	nop
 8000c50:	e7fd      	b.n	8000c4e <Error_Handler+0x8>
	...

08000c54 <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c6c:	4a28      	ldr	r2, [pc, #160]	@ (8000d10 <MX_OCTOSPI1_Init+0xbc>)
 8000c6e:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c76:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000c7c:	4b23      	ldr	r3, [pc, #140]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c7e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000c82:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 8000c84:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c86:	2217      	movs	r2, #23
 8000c88:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000c8a:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 256;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8000cc2:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000cce:	480f      	ldr	r0, [pc, #60]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cd0:	f000 ff0a 	bl	8001ae8 <HAL_OSPI_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_OCTOSPI1_Init+0x8a>
  {
    Error_Handler();
 8000cda:	f7ff ffb4 	bl	8000c46 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.NCSPort = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000ce6:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8000cea:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_OCTOSPI1_Init+0xb8>)
 8000cf6:	f001 f9db 	bl	80020b0 <HAL_OSPIM_Config>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_OCTOSPI1_Init+0xb0>
  {
    Error_Handler();
 8000d00:	f7ff ffa1 	bl	8000c46 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	2400004c 	.word	0x2400004c
 8000d10:	52005000 	.word	0x52005000

08000d14 <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b0bc      	sub	sp, #240	@ 0xf0
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	22b8      	movs	r2, #184	@ 0xb8
 8000d32:	2100      	movs	r1, #0
 8000d34:	4618      	mov	r0, r3
 8000d36:	f004 fb7b 	bl	8005430 <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a67      	ldr	r2, [pc, #412]	@ (8000edc <HAL_OSPI_MspInit+0x1c8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	f040 80c7 	bne.w	8000ed4 <HAL_OSPI_MspInit+0x1c0>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 f864 	bl	8003e28 <HAL_RCCEx_PeriphCLKConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_OSPI_MspInit+0x56>
    {
      Error_Handler();
 8000d66:	f7ff ff6e 	bl	8000c46 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000d6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000d6c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d70:	4a5b      	ldr	r2, [pc, #364]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000d72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d76:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000d7a:	4b59      	ldr	r3, [pc, #356]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000d7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000d88:	4b55      	ldr	r3, [pc, #340]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000d8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d8e:	4a54      	ldr	r2, [pc, #336]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d94:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000d98:	4b51      	ldr	r3, [pc, #324]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000d9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	4a4c      	ldr	r2, [pc, #304]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b46      	ldr	r3, [pc, #280]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	4a45      	ldr	r2, [pc, #276]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd4:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	4a3d      	ldr	r2, [pc, #244]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee0 <HAL_OSPI_MspInit+0x1cc>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e00:	2340      	movs	r3, #64	@ 0x40
 8000e02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 8000e18:	2306      	movs	r3, #6
 8000e1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e22:	4619      	mov	r1, r3
 8000e24:	482f      	ldr	r0, [pc, #188]	@ (8000ee4 <HAL_OSPI_MspInit+0x1d0>)
 8000e26:	f000 fbb5 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e2a:	2380      	movs	r3, #128	@ 0x80
 8000e2c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000e42:	230a      	movs	r3, #10
 8000e44:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4825      	ldr	r0, [pc, #148]	@ (8000ee4 <HAL_OSPI_MspInit+0x1d0>)
 8000e50:	f000 fba0 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e54:	2303      	movs	r3, #3
 8000e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_OCTOSPIM_P1;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e72:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e76:	4619      	mov	r1, r3
 8000e78:	481b      	ldr	r0, [pc, #108]	@ (8000ee8 <HAL_OSPI_MspInit+0x1d4>)
 8000e7a:	f000 fb8b 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000e96:	2309      	movs	r3, #9
 8000e98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4811      	ldr	r0, [pc, #68]	@ (8000ee8 <HAL_OSPI_MspInit+0x1d4>)
 8000ea4:	f000 fb76 	bl	8001594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ea8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000eac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8000ec2:	230b      	movs	r3, #11
 8000ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	@ (8000eec <HAL_OSPI_MspInit+0x1d8>)
 8000ed0:	f000 fb60 	bl	8001594 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	37f0      	adds	r7, #240	@ 0xf0
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	52005000 	.word	0x52005000
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020000 	.word	0x58020000
 8000ee8:	58020400 	.word	0x58020400
 8000eec:	58021000 	.word	0x58021000

08000ef0 <HAL_OSPI_MspDeInit>:

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <HAL_OSPI_MspDeInit+0x54>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11c      	bne.n	8000f3c <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <HAL_OSPI_MspDeInit+0x58>)
 8000f04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f08:	4a0f      	ldr	r2, [pc, #60]	@ (8000f48 <HAL_OSPI_MspDeInit+0x58>)
 8000f0a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000f0e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8000f12:	4b0d      	ldr	r3, [pc, #52]	@ (8000f48 <HAL_OSPI_MspDeInit+0x58>)
 8000f14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f18:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <HAL_OSPI_MspDeInit+0x58>)
 8000f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f1e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8000f22:	21c0      	movs	r1, #192	@ 0xc0
 8000f24:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <HAL_OSPI_MspDeInit+0x5c>)
 8000f26:	f000 fcdd 	bl	80018e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2);
 8000f2a:	2107      	movs	r1, #7
 8000f2c:	4808      	ldr	r0, [pc, #32]	@ (8000f50 <HAL_OSPI_MspDeInit+0x60>)
 8000f2e:	f000 fcd9 	bl	80018e4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_11);
 8000f32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <HAL_OSPI_MspDeInit+0x64>)
 8000f38:	f000 fcd4 	bl	80018e4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	52005000 	.word	0x52005000
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020000 	.word	0x58020000
 8000f50:	58020400 	.word	0x58020400
 8000f54:	58021000 	.word	0x58021000

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_MspInit+0x30>)
 8000f60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f64:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_MspInit+0x30>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_MspInit+0x30>)
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	58024400 	.word	0x58024400

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <NMI_Handler+0x4>

08000f94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <MemManage_Handler+0x4>

08000fa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe2:	f000 f937 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ff0:	4b34      	ldr	r3, [pc, #208]	@ (80010c4 <SystemInit+0xd8>)
 8000ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff6:	4a33      	ldr	r2, [pc, #204]	@ (80010c4 <SystemInit+0xd8>)
 8000ff8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ffc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001000:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <SystemInit+0xdc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 030f 	and.w	r3, r3, #15
 8001008:	2b06      	cmp	r3, #6
 800100a:	d807      	bhi.n	800101c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800100c:	4b2e      	ldr	r3, [pc, #184]	@ (80010c8 <SystemInit+0xdc>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 030f 	bic.w	r3, r3, #15
 8001014:	4a2c      	ldr	r2, [pc, #176]	@ (80010c8 <SystemInit+0xdc>)
 8001016:	f043 0307 	orr.w	r3, r3, #7
 800101a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800101c:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <SystemInit+0xe0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a2a      	ldr	r2, [pc, #168]	@ (80010cc <SystemInit+0xe0>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <SystemInit+0xe0>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <SystemInit+0xe0>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4926      	ldr	r1, [pc, #152]	@ (80010cc <SystemInit+0xe0>)
 8001034:	4b26      	ldr	r3, [pc, #152]	@ (80010d0 <SystemInit+0xe4>)
 8001036:	4013      	ands	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800103a:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <SystemInit+0xdc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001046:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <SystemInit+0xdc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f023 030f 	bic.w	r3, r3, #15
 800104e:	4a1e      	ldr	r2, [pc, #120]	@ (80010c8 <SystemInit+0xdc>)
 8001050:	f043 0307 	orr.w	r3, r3, #7
 8001054:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001056:	4b1d      	ldr	r3, [pc, #116]	@ (80010cc <SystemInit+0xe0>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <SystemInit+0xe0>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <SystemInit+0xe0>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001068:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <SystemInit+0xe0>)
 800106a:	4a1a      	ldr	r2, [pc, #104]	@ (80010d4 <SystemInit+0xe8>)
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800106e:	4b17      	ldr	r3, [pc, #92]	@ (80010cc <SystemInit+0xe0>)
 8001070:	4a19      	ldr	r2, [pc, #100]	@ (80010d8 <SystemInit+0xec>)
 8001072:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <SystemInit+0xe0>)
 8001076:	4a19      	ldr	r2, [pc, #100]	@ (80010dc <SystemInit+0xf0>)
 8001078:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <SystemInit+0xe0>)
 800107c:	2200      	movs	r2, #0
 800107e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <SystemInit+0xe0>)
 8001082:	4a16      	ldr	r2, [pc, #88]	@ (80010dc <SystemInit+0xf0>)
 8001084:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <SystemInit+0xe0>)
 8001088:	2200      	movs	r2, #0
 800108a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800108c:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <SystemInit+0xe0>)
 800108e:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <SystemInit+0xf0>)
 8001090:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <SystemInit+0xe0>)
 8001094:	2200      	movs	r2, #0
 8001096:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <SystemInit+0xe0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0b      	ldr	r2, [pc, #44]	@ (80010cc <SystemInit+0xe0>)
 800109e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <SystemInit+0xe0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <SystemInit+0xf4>)
 80010ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80010b0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SystemInit+0xd8>)
 80010b4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80010b8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00
 80010c8:	52002000 	.word	0x52002000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010d4:	02020200 	.word	0x02020200
 80010d8:	01ff0000 	.word	0x01ff0000
 80010dc:	01010280 	.word	0x01010280
 80010e0:	52004000 	.word	0x52004000

080010e4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <ExitRun0Mode+0x30>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f023 0306 	bic.w	r3, r3, #6
 80010f0:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <ExitRun0Mode+0x30>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80010f8:	bf00      	nop
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <ExitRun0Mode+0x30>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f9      	beq.n	80010fa <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	58024800 	.word	0x58024800

08001118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001118:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001154 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800111c:	f7ff ffe2 	bl	80010e4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001120:	f7ff ff64 	bl	8000fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	@ (800115c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	@ (8001164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	@ (8001168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f004 f979 	bl	8005440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fcb9 	bl	8000ac4 <main>
  bx  lr
 8001152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001158:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800115c:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8001160:	080054b8 	.word	0x080054b8
  ldr r2, =_sbss
 8001164:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8001168:	240000ac 	.word	0x240000ac

0800116c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC3_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001176:	2003      	movs	r0, #3
 8001178:	f000 f962 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800117c:	f002 fcda 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8001180:	4602      	mov	r2, r0
 8001182:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_Init+0x68>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	4913      	ldr	r1, [pc, #76]	@ (80011dc <HAL_Init+0x6c>)
 800118e:	5ccb      	ldrb	r3, [r1, r3]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <HAL_Init+0x68>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <HAL_Init+0x6c>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	4a0b      	ldr	r2, [pc, #44]	@ (80011e0 <HAL_Init+0x70>)
 80011b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b4:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <HAL_Init+0x74>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	200f      	movs	r0, #15
 80011bc:	f000 f814 	bl	80011e8 <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e002      	b.n	80011d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ca:	f7ff fec5 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58024400 	.word	0x58024400
 80011dc:	080054a0 	.word	0x080054a0
 80011e0:	24000020 	.word	0x24000020
 80011e4:	2400001c 	.word	0x2400001c

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f0:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_InitTick+0x60>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e021      	b.n	8001240 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011fc:	4b13      	ldr	r3, [pc, #76]	@ (800124c <HAL_InitTick+0x64>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_InitTick+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f939 	bl	800148a <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f911 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x68>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	24000028 	.word	0x24000028
 800124c:	2400001c 	.word	0x2400001c
 8001250:	24000024 	.word	0x24000024

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	24000028 	.word	0x24000028
 8001278:	240000a8 	.word	0x240000a8

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	240000a8 	.word	0x240000a8

08001294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24000028 	.word	0x24000028

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001304:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <__NVIC_SetPriorityGrouping+0x40>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	05fa0000 	.word	0x05fa0000

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	@ (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	@ 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	@ (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff47 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001464:	f7ff ff5e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 8001468:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f7ff ff90 	bl	8001394 <NVIC_EncodePriority>
 8001474:	4602      	mov	r2, r0
 8001476:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff5f 	bl	8001340 <__NVIC_SetPriority>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffb2 	bl	80013fc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014a8:	f3bf 8f5f 	dmb	sy
}
 80014ac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <HAL_MPU_Disable+0x28>)
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_MPU_Disable+0x28>)
 80014b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014ba:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <HAL_MPU_Disable+0x2c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00
 80014d0:	e000ed90 	.word	0xe000ed90

080014d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_MPU_Enable+0x38>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_MPU_Enable+0x3c>)
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <HAL_MPU_Enable+0x3c>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014f2:	f3bf 8f4f 	dsb	sy
}
 80014f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f8:	f3bf 8f6f 	isb	sy
}
 80014fc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed90 	.word	0xe000ed90
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	785a      	ldrb	r2, [r3, #1]
 8001520:	4b1b      	ldr	r3, [pc, #108]	@ (8001590 <HAL_MPU_ConfigRegion+0x7c>)
 8001522:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_MPU_ConfigRegion+0x7c>)
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <HAL_MPU_ConfigRegion+0x7c>)
 800152a:	f023 0301 	bic.w	r3, r3, #1
 800152e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001530:	4a17      	ldr	r2, [pc, #92]	@ (8001590 <HAL_MPU_ConfigRegion+0x7c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7b1b      	ldrb	r3, [r3, #12]
 800153c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	7adb      	ldrb	r3, [r3, #11]
 8001542:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001544:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7a9b      	ldrb	r3, [r3, #10]
 800154a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800154c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7b5b      	ldrb	r3, [r3, #13]
 8001552:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001554:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7b9b      	ldrb	r3, [r3, #14]
 800155a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800155c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7bdb      	ldrb	r3, [r3, #15]
 8001562:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001564:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7a5b      	ldrb	r3, [r3, #9]
 800156a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800156c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7a1b      	ldrb	r3, [r3, #8]
 8001572:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001574:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800157e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001580:	6113      	str	r3, [r2, #16]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed90 	.word	0xe000ed90

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b089      	sub	sp, #36	@ 0x24
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015a2:	4b86      	ldr	r3, [pc, #536]	@ (80017bc <HAL_GPIO_Init+0x228>)
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015a6:	e18c      	b.n	80018c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa01 f303 	lsl.w	r3, r1, r3
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 817e 	beq.w	80018bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x44>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	f003 0201 	and.w	r2, r3, #1
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	69b9      	ldr	r1, [r7, #24]
 80016c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0203 	and.w	r2, r3, #3
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80d8 	beq.w	80018bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170c:	4b2c      	ldr	r3, [pc, #176]	@ (80017c0 <HAL_GPIO_Init+0x22c>)
 800170e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001712:	4a2b      	ldr	r2, [pc, #172]	@ (80017c0 <HAL_GPIO_Init+0x22c>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800171c:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <HAL_GPIO_Init+0x22c>)
 800171e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800172a:	4a26      	ldr	r2, [pc, #152]	@ (80017c4 <HAL_GPIO_Init+0x230>)
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	3302      	adds	r3, #2
 8001732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a1d      	ldr	r2, [pc, #116]	@ (80017c8 <HAL_GPIO_Init+0x234>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d04a      	beq.n	80017ec <HAL_GPIO_Init+0x258>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a1c      	ldr	r2, [pc, #112]	@ (80017cc <HAL_GPIO_Init+0x238>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d02b      	beq.n	80017b6 <HAL_GPIO_Init+0x222>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a1b      	ldr	r2, [pc, #108]	@ (80017d0 <HAL_GPIO_Init+0x23c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d025      	beq.n	80017b2 <HAL_GPIO_Init+0x21e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_GPIO_Init+0x240>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x21a>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a19      	ldr	r2, [pc, #100]	@ (80017d8 <HAL_GPIO_Init+0x244>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x216>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <HAL_GPIO_Init+0x248>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x212>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a17      	ldr	r2, [pc, #92]	@ (80017e0 <HAL_GPIO_Init+0x24c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x20e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a16      	ldr	r2, [pc, #88]	@ (80017e4 <HAL_GPIO_Init+0x250>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x20a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a15      	ldr	r2, [pc, #84]	@ (80017e8 <HAL_GPIO_Init+0x254>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x206>
 8001796:	2309      	movs	r3, #9
 8001798:	e029      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 800179a:	230a      	movs	r3, #10
 800179c:	e027      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 800179e:	2307      	movs	r3, #7
 80017a0:	e025      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e023      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e021      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e01f      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e01d      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e01b      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e019      	b.n	80017ee <HAL_GPIO_Init+0x25a>
 80017ba:	bf00      	nop
 80017bc:	58000080 	.word	0x58000080
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58000400 	.word	0x58000400
 80017c8:	58020000 	.word	0x58020000
 80017cc:	58020400 	.word	0x58020400
 80017d0:	58020800 	.word	0x58020800
 80017d4:	58020c00 	.word	0x58020c00
 80017d8:	58021000 	.word	0x58021000
 80017dc:	58021400 	.word	0x58021400
 80017e0:	58021800 	.word	0x58021800
 80017e4:	58021c00 	.word	0x58021c00
 80017e8:	58022400 	.word	0x58022400
 80017ec:	2300      	movs	r3, #0
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	f002 0203 	and.w	r2, r2, #3
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	4093      	lsls	r3, r2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017fe:	4938      	ldr	r1, [pc, #224]	@ (80018e0 <HAL_GPIO_Init+0x34c>)
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	089b      	lsrs	r3, r3, #2
 8001804:	3302      	adds	r3, #2
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800183a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	3301      	adds	r3, #1
 80018c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f47f ae6b 	bne.w	80015a8 <HAL_GPIO_Init+0x14>
  }
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	3724      	adds	r7, #36	@ 0x24
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	58000400 	.word	0x58000400

080018e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018f2:	4b72      	ldr	r3, [pc, #456]	@ (8001abc <HAL_GPIO_DeInit+0x1d8>)
 80018f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 80018f6:	e0d3      	b.n	8001aa0 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80018f8:	2201      	movs	r2, #1
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80c6 	beq.w	8001a9a <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800190e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ac0 <HAL_GPIO_DeInit+0x1dc>)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a64      	ldr	r2, [pc, #400]	@ (8001ac4 <HAL_GPIO_DeInit+0x1e0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d031      	beq.n	800199c <HAL_GPIO_DeInit+0xb8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a63      	ldr	r2, [pc, #396]	@ (8001ac8 <HAL_GPIO_DeInit+0x1e4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d02b      	beq.n	8001998 <HAL_GPIO_DeInit+0xb4>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a62      	ldr	r2, [pc, #392]	@ (8001acc <HAL_GPIO_DeInit+0x1e8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d025      	beq.n	8001994 <HAL_GPIO_DeInit+0xb0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a61      	ldr	r2, [pc, #388]	@ (8001ad0 <HAL_GPIO_DeInit+0x1ec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01f      	beq.n	8001990 <HAL_GPIO_DeInit+0xac>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a60      	ldr	r2, [pc, #384]	@ (8001ad4 <HAL_GPIO_DeInit+0x1f0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d019      	beq.n	800198c <HAL_GPIO_DeInit+0xa8>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ad8 <HAL_GPIO_DeInit+0x1f4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d013      	beq.n	8001988 <HAL_GPIO_DeInit+0xa4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a5e      	ldr	r2, [pc, #376]	@ (8001adc <HAL_GPIO_DeInit+0x1f8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <HAL_GPIO_DeInit+0xa0>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ae0 <HAL_GPIO_DeInit+0x1fc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d007      	beq.n	8001980 <HAL_GPIO_DeInit+0x9c>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a5c      	ldr	r2, [pc, #368]	@ (8001ae4 <HAL_GPIO_DeInit+0x200>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_GPIO_DeInit+0x98>
 8001978:	2309      	movs	r3, #9
 800197a:	e010      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 800197c:	230a      	movs	r3, #10
 800197e:	e00e      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 8001980:	2307      	movs	r3, #7
 8001982:	e00c      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 8001984:	2306      	movs	r3, #6
 8001986:	e00a      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 8001988:	2305      	movs	r3, #5
 800198a:	e008      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 800198c:	2304      	movs	r3, #4
 800198e:	e006      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 8001990:	2303      	movs	r3, #3
 8001992:	e004      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 8001994:	2302      	movs	r3, #2
 8001996:	e002      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_GPIO_DeInit+0xba>
 800199c:	2300      	movs	r3, #0
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	f002 0203 	and.w	r2, r2, #3
 80019a4:	0092      	lsls	r2, r2, #2
 80019a6:	4093      	lsls	r3, r2
 80019a8:	68ba      	ldr	r2, [r7, #8]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d136      	bne.n	8001a1c <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	685a      	ldr	r2, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	401a      	ands	r2, r3
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019d8:	4013      	ands	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019ea:	4013      	ands	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80019fe:	4a30      	ldr	r2, [pc, #192]	@ (8001ac0 <HAL_GPIO_DeInit+0x1dc>)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	482c      	ldr	r0, [pc, #176]	@ (8001ac0 <HAL_GPIO_DeInit+0x1dc>)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	400a      	ands	r2, r1
 8001a16:	3302      	adds	r3, #2
 8001a18:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2103      	movs	r1, #3
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	08d2      	lsrs	r2, r2, #3
 8001a50:	4019      	ands	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3208      	adds	r2, #8
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	2103      	movs	r1, #3
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	2101      	movs	r1, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2103      	movs	r1, #3
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	401a      	ands	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f af25 	bne.w	80018f8 <HAL_GPIO_DeInit+0x14>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	58000080 	.word	0x58000080
 8001ac0:	58000400 	.word	0x58000400
 8001ac4:	58020000 	.word	0x58020000
 8001ac8:	58020400 	.word	0x58020400
 8001acc:	58020800 	.word	0x58020800
 8001ad0:	58020c00 	.word	0x58020c00
 8001ad4:	58021000 	.word	0x58021000
 8001ad8:	58021400 	.word	0x58021400
 8001adc:	58021800 	.word	0x58021800
 8001ae0:	58021c00 	.word	0x58021c00
 8001ae4:	58022400 	.word	0x58022400

08001ae8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff fbc2 	bl	800127c <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	73fb      	strb	r3, [r7, #15]
 8001b04:	e0a5      	b.n	8001c52 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 809e 	bne.w	8001c52 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff f8fc 	bl	8000d14 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001b1c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 fab5 	bl	8002090 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <HAL_OSPI_Init+0x174>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68d1      	ldr	r1, [r2, #12]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6912      	ldr	r2, [r2, #16]
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	0412      	lsls	r2, r2, #16
 8001b3c:	4311      	orrs	r1, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6952      	ldr	r2, [r2, #20]
 8001b42:	3a01      	subs	r2, #1
 8001b44:	0212      	lsls	r2, r2, #8
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	69d2      	ldr	r2, [r2, #28]
 8001b52:	4311      	orrs	r1, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1a      	ldr	r2, [r3, #32]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b8c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	021a      	lsls	r2, r3, #8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 ff67 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d146      	bne.n	8001c52 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	1e5a      	subs	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001bfa:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d107      	bne.n	8001c3a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0202 	orr.w	r2, r2, #2
 8001c38:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c42:	d103      	bne.n	8001c4c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c4a:	e002      	b.n	8001c52 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f8e0f8f4 	.word	0xf8e0f8f4

08001c60 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e015      	b.n	8001ca4 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0201 	bic.w	r2, r2, #1
 8001c86:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0202 	bic.w	r2, r2, #2
 8001c96:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff f929 	bl	8000ef0 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b08a      	sub	sp, #40	@ 0x28
 8001cb2:	af02      	add	r7, sp, #8
 8001cb4:	60f8      	str	r0, [r7, #12]
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001cba:	f7ff fadf 	bl	800127c <HAL_GetTick>
 8001cbe:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc4:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cca:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d104      	bne.n	8001cdc <HAL_OSPI_Command+0x2e>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001cda:	d115      	bne.n	8001d08 <HAL_OSPI_Command+0x5a>
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2b14      	cmp	r3, #20
 8001ce0:	d107      	bne.n	8001cf2 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d00e      	beq.n	8001d08 <HAL_OSPI_Command+0x5a>
                                                   || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d00a      	beq.n	8001d08 <HAL_OSPI_Command+0x5a>
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	2b24      	cmp	r3, #36	@ 0x24
 8001cf6:	d15b      	bne.n	8001db0 <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d003      	beq.n	8001d08 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d153      	bne.n	8001db0 <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2120      	movs	r1, #32
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 feb8 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8001d1c:	7ffb      	ldrb	r3, [r7, #31]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d14c      	bne.n	8001dbc <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fee4 	bl	8002af8 <OSPI_ConfigCmd>
 8001d30:	4603      	mov	r3, r0
 8001d32:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8001d34:	7ffb      	ldrb	r3, [r7, #31]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d140      	bne.n	8001dbc <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10e      	bne.n	8001d60 <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fe9b 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 8001d52:	4603      	mov	r3, r0
 8001d54:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8001d5e:	e02d      	b.n	8001dbc <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d103      	bne.n	8001d70 <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001d6e:	e025      	b.n	8001dbc <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10b      	bne.n	8001d90 <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7c:	2b24      	cmp	r3, #36	@ 0x24
 8001d7e:	d103      	bne.n	8001d88 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2204      	movs	r2, #4
 8001d84:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001d86:	e019      	b.n	8001dbc <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2214      	movs	r2, #20
 8001d8c:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001d8e:	e015      	b.n	8001dbc <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d111      	bne.n	8001dbc <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d9c:	2b14      	cmp	r3, #20
 8001d9e:	d103      	bne.n	8001da8 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2204      	movs	r2, #4
 8001da4:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001da6:	e009      	b.n	8001dbc <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2224      	movs	r2, #36	@ 0x24
 8001dac:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8001dae:	e005      	b.n	8001dbc <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2210      	movs	r2, #16
 8001db8:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dba:	e000      	b.n	8001dbe <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 8001dbc:	bf00      	nop
  }

  /* Return function status */
  return status;
 8001dbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff fa52 	bl	800127c <HAL_GetTick>
 8001dd8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	3350      	adds	r3, #80	@ 0x50
 8001de0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2208      	movs	r2, #8
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54
 8001df2:	e057      	b.n	8001ea4 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d14e      	bne.n	8001e9a <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e24:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2104      	movs	r1, #4
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fe29 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d113      	bne.n	8001e68 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e58:	1e5a      	subs	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1df      	bne.n	8001e26 <HAL_OSPI_Transmit+0x5e>
 8001e66:	e000      	b.n	8001e6a <HAL_OSPI_Transmit+0xa2>
          break;
 8001e68:	bf00      	nop

      if (status == HAL_OK)
 8001e6a:	7ffb      	ldrb	r3, [r7, #31]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d119      	bne.n	8001ea4 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2201      	movs	r2, #1
 8001e78:	2102      	movs	r1, #2
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fe04 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001e84:	7ffb      	ldrb	r3, [r7, #31]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10c      	bne.n	8001ea4 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2202      	movs	r2, #2
 8001e96:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e98:	e004      	b.n	8001ea4 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b08c      	sub	sp, #48	@ 0x30
 8001eb2:	af02      	add	r7, sp, #8
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001eba:	f7ff f9df 	bl	800127c <HAL_GetTick>
 8001ebe:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	3350      	adds	r3, #80	@ 0x50
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ece:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8001ed8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d106      	bne.n	8001eee <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2208      	movs	r2, #8
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54
 8001eec:	e07c      	b.n	8001fe8 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d172      	bne.n	8001fdc <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	649a      	str	r2, [r3, #72]	@ 0x48
      hospi->XferSize  = hospi->XferCount;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	645a      	str	r2, [r3, #68]	@ 0x44
      hospi->pBuffPtr  = pData;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f22:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001f2c:	d104      	bne.n	8001f38 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f36:	e011      	b.n	8001f5c <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001f40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d004      	beq.n	8001f52 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001f50:	e004      	b.n	8001f5c <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	2201      	movs	r2, #1
 8001f64:	2106      	movs	r1, #6
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fd8e 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status != HAL_OK)
 8001f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d114      	bne.n	8001fa4 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	7812      	ldrb	r2, [r2, #0]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	641a      	str	r2, [r3, #64]	@ 0x40
        hospi->XferCount--;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	649a      	str	r2, [r3, #72]	@ 0x48
      }
      while (hospi->XferCount > 0U);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1dc      	bne.n	8001f5c <HAL_OSPI_Receive+0xae>
 8001fa2:	e000      	b.n	8001fa6 <HAL_OSPI_Receive+0xf8>
          break;
 8001fa4:	bf00      	nop

      if (status == HAL_OK)
 8001fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11c      	bne.n	8001fe8 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2102      	movs	r1, #2
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fd65 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (status == HAL_OK)
 8001fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fda:	e005      	b.n	8001fe8 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2210      	movs	r2, #16
 8001fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8001fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3728      	adds	r7, #40	@ 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af02      	add	r7, sp, #8
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ffe:	f7ff f93d 	bl	800127c <HAL_GetTick>
 8002002:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002008:	2b04      	cmp	r3, #4
 800200a:	d134      	bne.n	8002076 <HAL_OSPI_MemoryMapped+0x82>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2200      	movs	r2, #0
 8002016:	2120      	movs	r1, #32
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 fd35 	bl	8002a88 <OSPI_WaitFlagStateUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12b      	bne.n	8002080 <HAL_OSPI_MemoryMapped+0x8c>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2288      	movs	r2, #136	@ 0x88
 800202c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d111      	bne.n	800205a <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	6852      	ldr	r2, [r2, #4]
 800203e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2210      	movs	r2, #16
 8002048:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002058:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_OSPI_MemoryMapped+0x98>)
 8002062:	4013      	ands	r3, r2
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e004      	b.n	8002080 <HAL_OSPI_MemoryMapped+0x8c>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2210      	movs	r2, #16
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	cffffff7 	.word	0xcffffff7

08002090 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b094      	sub	sp, #80	@ 0x50
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
 80020be:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a9d      	ldr	r2, [pc, #628]	@ (8002344 <HAL_OSPIM_Config+0x294>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d105      	bne.n	80020de <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 80020d6:	2301      	movs	r3, #1
 80020d8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80020dc:	e004      	b.n	80020e8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80020de:	2301      	movs	r3, #1
 80020e0:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80020ee:	e01d      	b.n	800212c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80020f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2d8      	uxtb	r0, r3
 80020f8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80020fc:	f107 0114 	add.w	r1, r7, #20
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	440b      	add	r3, r1
 800210a:	4619      	mov	r1, r3
 800210c:	f000 fe6e 	bl	8002dec <OSPIM_GetConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2208      	movs	r2, #8
 8002120:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002122:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002126:	3301      	adds	r3, #1
 8002128:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800212c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002130:	2b01      	cmp	r3, #1
 8002132:	d9dd      	bls.n	80020f0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002134:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002138:	2b00      	cmp	r3, #0
 800213a:	f040 8499 	bne.w	8002a70 <HAL_OSPIM_Config+0x9c0>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800213e:	4b81      	ldr	r3, [pc, #516]	@ (8002344 <HAL_OSPIM_Config+0x294>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800214a:	4b7e      	ldr	r3, [pc, #504]	@ (8002344 <HAL_OSPIM_Config+0x294>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a7d      	ldr	r2, [pc, #500]	@ (8002344 <HAL_OSPIM_Config+0x294>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002156:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002162:	4b79      	ldr	r3, [pc, #484]	@ (8002348 <HAL_OSPIM_Config+0x298>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800216e:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <HAL_OSPIM_Config+0x298>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a75      	ldr	r2, [pc, #468]	@ (8002348 <HAL_OSPIM_Config+0x298>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800217a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800217e:	f043 0302 	orr.w	r3, r3, #2
 8002182:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002186:	4971      	ldr	r1, [pc, #452]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 8002188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800218a:	4613      	mov	r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4413      	add	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	3350      	adds	r3, #80	@ 0x50
 8002194:	443b      	add	r3, r7
 8002196:	3b34      	subs	r3, #52	@ 0x34
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3b01      	subs	r3, #1
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	6859      	ldr	r1, [r3, #4]
 80021a2:	486a      	ldr	r0, [pc, #424]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 80021a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	3350      	adds	r3, #80	@ 0x50
 80021b0:	443b      	add	r3, r7
 80021b2:	3b34      	subs	r3, #52	@ 0x34
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4403      	add	r3, r0
 80021c0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80021c2:	4b62      	ldr	r3, [pc, #392]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80c0 	beq.w	8002350 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80021d0:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80021dc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	f040 8162 	bne.w	80024aa <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80021e6:	4959      	ldr	r1, [pc, #356]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 80021e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	3350      	adds	r3, #80	@ 0x50
 80021f6:	443b      	add	r3, r7
 80021f8:	3b3c      	subs	r3, #60	@ 0x3c
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	4851      	ldr	r0, [pc, #324]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 8002206:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800220a:	4613      	mov	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	4413      	add	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	3350      	adds	r3, #80	@ 0x50
 8002214:	443b      	add	r3, r7
 8002216:	3b3c      	subs	r3, #60	@ 0x3c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3b01      	subs	r3, #1
 800221c:	f041 0202 	orr.w	r2, r1, #2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4403      	add	r3, r0
 8002224:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002226:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	3350      	adds	r3, #80	@ 0x50
 8002234:	443b      	add	r3, r7
 8002236:	3b38      	subs	r3, #56	@ 0x38
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01f      	beq.n	800227e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800223e:	4943      	ldr	r1, [pc, #268]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 8002240:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	3350      	adds	r3, #80	@ 0x50
 800224e:	443b      	add	r3, r7
 8002250:	3b38      	subs	r3, #56	@ 0x38
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	483b      	ldr	r0, [pc, #236]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 800225e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	3350      	adds	r3, #80	@ 0x50
 800226c:	443b      	add	r3, r7
 800226e:	3b38      	subs	r3, #56	@ 0x38
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3b01      	subs	r3, #1
 8002274:	f041 0220 	orr.w	r2, r1, #32
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4403      	add	r3, r0
 800227c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800227e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002282:	4613      	mov	r3, r2
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	3350      	adds	r3, #80	@ 0x50
 800228c:	443b      	add	r3, r7
 800228e:	3b30      	subs	r3, #48	@ 0x30
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d023      	beq.n	80022de <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8002296:	492d      	ldr	r1, [pc, #180]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 8002298:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	3350      	adds	r3, #80	@ 0x50
 80022a6:	443b      	add	r3, r7
 80022a8:	3b30      	subs	r3, #48	@ 0x30
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	4824      	ldr	r0, [pc, #144]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 80022ba:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	3350      	adds	r3, #80	@ 0x50
 80022c8:	443b      	add	r3, r7
 80022ca:	3b30      	subs	r3, #48	@ 0x30
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4403      	add	r3, r0
 80022dc:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80022de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	3350      	adds	r3, #80	@ 0x50
 80022ec:	443b      	add	r3, r7
 80022ee:	3b2c      	subs	r3, #44	@ 0x2c
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 80d9 	beq.w	80024aa <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 80022f8:	4914      	ldr	r1, [pc, #80]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 80022fa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	3350      	adds	r3, #80	@ 0x50
 8002308:	443b      	add	r3, r7
 800230a:	3b2c      	subs	r3, #44	@ 0x2c
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3b01      	subs	r3, #1
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	6859      	ldr	r1, [r3, #4]
 800231a:	480c      	ldr	r0, [pc, #48]	@ (800234c <HAL_OSPIM_Config+0x29c>)
 800231c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	3350      	adds	r3, #80	@ 0x50
 800232a:	443b      	add	r3, r7
 800232c:	3b2c      	subs	r3, #44	@ 0x2c
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3b01      	subs	r3, #1
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4403      	add	r3, r0
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	e0b3      	b.n	80024aa <HAL_OSPIM_Config+0x3fa>
 8002342:	bf00      	nop
 8002344:	52005000 	.word	0x52005000
 8002348:	5200a000 	.word	0x5200a000
 800234c:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8002350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	3350      	adds	r3, #80	@ 0x50
 800235c:	443b      	add	r3, r7
 800235e:	3b3c      	subs	r3, #60	@ 0x3c
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80a1 	beq.w	80024aa <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8002368:	4995      	ldr	r1, [pc, #596]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 800236a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	3350      	adds	r3, #80	@ 0x50
 8002376:	443b      	add	r3, r7
 8002378:	3b3c      	subs	r3, #60	@ 0x3c
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3b01      	subs	r3, #1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	488e      	ldr	r0, [pc, #568]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 8002386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	3350      	adds	r3, #80	@ 0x50
 8002392:	443b      	add	r3, r7
 8002394:	3b3c      	subs	r3, #60	@ 0x3c
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	3b01      	subs	r3, #1
 800239a:	f021 0201 	bic.w	r2, r1, #1
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4403      	add	r3, r0
 80023a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80023a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	3350      	adds	r3, #80	@ 0x50
 80023b0:	443b      	add	r3, r7
 80023b2:	3b38      	subs	r3, #56	@ 0x38
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01d      	beq.n	80023f6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80023ba:	4981      	ldr	r1, [pc, #516]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 80023bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	3350      	adds	r3, #80	@ 0x50
 80023c8:	443b      	add	r3, r7
 80023ca:	3b38      	subs	r3, #56	@ 0x38
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	487a      	ldr	r0, [pc, #488]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 80023d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	3350      	adds	r3, #80	@ 0x50
 80023e4:	443b      	add	r3, r7
 80023e6:	3b38      	subs	r3, #56	@ 0x38
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	f021 0210 	bic.w	r2, r1, #16
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4403      	add	r3, r0
 80023f4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80023f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	3350      	adds	r3, #80	@ 0x50
 8002402:	443b      	add	r3, r7
 8002404:	3b30      	subs	r3, #48	@ 0x30
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d021      	beq.n	8002450 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800240c:	496c      	ldr	r1, [pc, #432]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 800240e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	3350      	adds	r3, #80	@ 0x50
 800241a:	443b      	add	r3, r7
 800241c:	3b30      	subs	r3, #48	@ 0x30
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	3b01      	subs	r3, #1
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	6859      	ldr	r1, [r3, #4]
 800242c:	4864      	ldr	r0, [pc, #400]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 800242e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002430:	4613      	mov	r3, r2
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	4413      	add	r3, r2
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	3350      	adds	r3, #80	@ 0x50
 800243a:	443b      	add	r3, r7
 800243c:	3b30      	subs	r3, #48	@ 0x30
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3b01      	subs	r3, #1
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4403      	add	r3, r0
 800244e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	3350      	adds	r3, #80	@ 0x50
 800245c:	443b      	add	r3, r7
 800245e:	3b2c      	subs	r3, #44	@ 0x2c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d021      	beq.n	80024aa <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002466:	4956      	ldr	r1, [pc, #344]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 8002468:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800246a:	4613      	mov	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4413      	add	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	3350      	adds	r3, #80	@ 0x50
 8002474:	443b      	add	r3, r7
 8002476:	3b2c      	subs	r3, #44	@ 0x2c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	3b01      	subs	r3, #1
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	6859      	ldr	r1, [r3, #4]
 8002486:	484e      	ldr	r0, [pc, #312]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 8002488:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	3350      	adds	r3, #80	@ 0x50
 8002494:	443b      	add	r3, r7
 8002496:	3b2c      	subs	r3, #44	@ 0x2c
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3b01      	subs	r3, #1
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4403      	add	r3, r0
 80024a8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6819      	ldr	r1, [r3, #0]
 80024ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	3350      	adds	r3, #80	@ 0x50
 80024bc:	443b      	add	r3, r7
 80024be:	3b3c      	subs	r3, #60	@ 0x3c
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4299      	cmp	r1, r3
 80024c4:	d03c      	beq.n	8002540 <HAL_OSPIM_Config+0x490>
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	3350      	adds	r3, #80	@ 0x50
 80024d8:	443b      	add	r3, r7
 80024da:	3b34      	subs	r3, #52	@ 0x34
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4299      	cmp	r1, r3
 80024e0:	d02e      	beq.n	8002540 <HAL_OSPIM_Config+0x490>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6859      	ldr	r1, [r3, #4]
 80024e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	3350      	adds	r3, #80	@ 0x50
 80024f4:	443b      	add	r3, r7
 80024f6:	3b38      	subs	r3, #56	@ 0x38
 80024f8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) ||
 80024fa:	4299      	cmp	r1, r3
 80024fc:	d103      	bne.n	8002506 <HAL_OSPIM_Config+0x456>
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11c      	bne.n	8002540 <HAL_OSPIM_Config+0x490>
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	68d9      	ldr	r1, [r3, #12]
 800250a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	3350      	adds	r3, #80	@ 0x50
 8002518:	443b      	add	r3, r7
 800251a:	3b30      	subs	r3, #48	@ 0x30
 800251c:	681b      	ldr	r3, [r3, #0]
        ((cfg->DQSPort == IOM_cfg[other_instance].DQSPort) && (cfg->DQSPort != 0U)) ||
 800251e:	4299      	cmp	r1, r3
 8002520:	d00e      	beq.n	8002540 <HAL_OSPIM_Config+0x490>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6919      	ldr	r1, [r3, #16]
 8002526:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	3350      	adds	r3, #80	@ 0x50
 8002534:	443b      	add	r3, r7
 8002536:	3b2c      	subs	r3, #44	@ 0x2c
 8002538:	681b      	ldr	r3, [r3, #0]
        (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800253a:	4299      	cmp	r1, r3
 800253c:	f040 810e 	bne.w	800275c <HAL_OSPIM_Config+0x6ac>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	6819      	ldr	r1, [r3, #0]
 8002544:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002548:	4613      	mov	r3, r2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4413      	add	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	3350      	adds	r3, #80	@ 0x50
 8002552:	443b      	add	r3, r7
 8002554:	3b3c      	subs	r3, #60	@ 0x3c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4299      	cmp	r1, r3
 800255a:	d133      	bne.n	80025c4 <HAL_OSPIM_Config+0x514>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	3350      	adds	r3, #80	@ 0x50
 800256e:	443b      	add	r3, r7
 8002570:	3b38      	subs	r3, #56	@ 0x38
 8002572:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8002574:	4299      	cmp	r1, r3
 8002576:	d125      	bne.n	80025c4 <HAL_OSPIM_Config+0x514>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	68d9      	ldr	r1, [r3, #12]
 800257c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	3350      	adds	r3, #80	@ 0x50
 800258a:	443b      	add	r3, r7
 800258c:	3b30      	subs	r3, #48	@ 0x30
 800258e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002590:	4299      	cmp	r1, r3
 8002592:	d117      	bne.n	80025c4 <HAL_OSPIM_Config+0x514>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	6919      	ldr	r1, [r3, #16]
 8002598:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800259c:	4613      	mov	r3, r2
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4413      	add	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3350      	adds	r3, #80	@ 0x50
 80025a6:	443b      	add	r3, r7
 80025a8:	3b2c      	subs	r3, #44	@ 0x2c
 80025aa:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80025ac:	4299      	cmp	r1, r3
 80025ae:	d109      	bne.n	80025c4 <HAL_OSPIM_Config+0x514>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a02      	ldr	r2, [pc, #8]	@ (80025c0 <HAL_OSPIM_Config+0x510>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e0ce      	b.n	800275c <HAL_OSPIM_Config+0x6ac>
 80025be:	bf00      	nop
 80025c0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80025c4:	49bb      	ldr	r1, [pc, #748]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80025c6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	3350      	adds	r3, #80	@ 0x50
 80025d4:	443b      	add	r3, r7
 80025d6:	3b3c      	subs	r3, #60	@ 0x3c
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	3b01      	subs	r3, #1
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	48b4      	ldr	r0, [pc, #720]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80025e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	3350      	adds	r3, #80	@ 0x50
 80025f2:	443b      	add	r3, r7
 80025f4:	3b3c      	subs	r3, #60	@ 0x3c
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	f021 0201 	bic.w	r2, r1, #1
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4403      	add	r3, r0
 8002602:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002604:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002608:	4613      	mov	r3, r2
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	4413      	add	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	3350      	adds	r3, #80	@ 0x50
 8002612:	443b      	add	r3, r7
 8002614:	3b38      	subs	r3, #56	@ 0x38
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01f      	beq.n	800265c <HAL_OSPIM_Config+0x5ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800261c:	49a5      	ldr	r1, [pc, #660]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800261e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	3350      	adds	r3, #80	@ 0x50
 800262c:	443b      	add	r3, r7
 800262e:	3b38      	subs	r3, #56	@ 0x38
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	3b01      	subs	r3, #1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	6859      	ldr	r1, [r3, #4]
 800263a:	489e      	ldr	r0, [pc, #632]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800263c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	3350      	adds	r3, #80	@ 0x50
 800264a:	443b      	add	r3, r7
 800264c:	3b38      	subs	r3, #56	@ 0x38
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3b01      	subs	r3, #1
 8002652:	f021 0210 	bic.w	r2, r1, #16
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4403      	add	r3, r0
 800265a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800265c:	4995      	ldr	r1, [pc, #596]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800265e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	3350      	adds	r3, #80	@ 0x50
 800266c:	443b      	add	r3, r7
 800266e:	3b34      	subs	r3, #52	@ 0x34
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3b01      	subs	r3, #1
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	488e      	ldr	r0, [pc, #568]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800267c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002680:	4613      	mov	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	3350      	adds	r3, #80	@ 0x50
 800268a:	443b      	add	r3, r7
 800268c:	3b34      	subs	r3, #52	@ 0x34
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4403      	add	r3, r0
 800269a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800269c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	3350      	adds	r3, #80	@ 0x50
 80026aa:	443b      	add	r3, r7
 80026ac:	3b30      	subs	r3, #48	@ 0x30
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d023      	beq.n	80026fc <HAL_OSPIM_Config+0x64c>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80026b4:	497f      	ldr	r1, [pc, #508]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80026b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	3350      	adds	r3, #80	@ 0x50
 80026c4:	443b      	add	r3, r7
 80026c6:	3b30      	subs	r3, #48	@ 0x30
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	4877      	ldr	r0, [pc, #476]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80026d8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80026dc:	4613      	mov	r3, r2
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3350      	adds	r3, #80	@ 0x50
 80026e6:	443b      	add	r3, r7
 80026e8:	3b30      	subs	r3, #48	@ 0x30
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4403      	add	r3, r0
 80026fa:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80026fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	3350      	adds	r3, #80	@ 0x50
 800270a:	443b      	add	r3, r7
 800270c:	3b2c      	subs	r3, #44	@ 0x2c
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d023      	beq.n	800275c <HAL_OSPIM_Config+0x6ac>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002714:	4967      	ldr	r1, [pc, #412]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 8002716:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	3350      	adds	r3, #80	@ 0x50
 8002724:	443b      	add	r3, r7
 8002726:	3b2c      	subs	r3, #44	@ 0x2c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3b01      	subs	r3, #1
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	440b      	add	r3, r1
 8002734:	6859      	ldr	r1, [r3, #4]
 8002736:	485f      	ldr	r0, [pc, #380]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 8002738:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	3350      	adds	r3, #80	@ 0x50
 8002746:	443b      	add	r3, r7
 8002748:	3b2c      	subs	r3, #44	@ 0x2c
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3b01      	subs	r3, #1
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4403      	add	r3, r0
 800275a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800275c:	4a55      	ldr	r2, [pc, #340]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	3b01      	subs	r3, #1
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800276e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002770:	025b      	lsls	r3, r3, #9
 8002772:	431a      	orrs	r2, r3
 8002774:	494f      	ldr	r1, [pc, #316]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	3b01      	subs	r3, #1
 800277c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	1e5a      	subs	r2, r3, #1
 800278c:	4b49      	ldr	r3, [pc, #292]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0c1b      	lsrs	r3, r3, #16
 8002792:	b2db      	uxtb	r3, r3
 8002794:	429a      	cmp	r2, r3
 8002796:	d90a      	bls.n	80027ae <HAL_OSPIM_Config+0x6fe>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002798:	4b46      	ldr	r3, [pc, #280]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	4942      	ldr	r1, [pc, #264]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80027ae:	4b41      	ldr	r3, [pc, #260]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 809a 	beq.w	80028f0 <HAL_OSPIM_Config+0x840>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80027bc:	4a3d      	ldr	r2, [pc, #244]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	4939      	ldr	r1, [pc, #228]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d011      	beq.n	800280c <HAL_OSPIM_Config+0x75c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80027e8:	4a32      	ldr	r2, [pc, #200]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027fa:	492e      	ldr	r1, [pc, #184]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	f042 0210 	orr.w	r2, r2, #16
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d016      	beq.n	8002846 <HAL_OSPIM_Config+0x796>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002818:	4a26      	ldr	r2, [pc, #152]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	3b01      	subs	r3, #1
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800282e:	4921      	ldr	r1, [pc, #132]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	3b01      	subs	r3, #1
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	e019      	b.n	800287a <HAL_OSPIM_Config+0x7ca>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d015      	beq.n	800287a <HAL_OSPIM_Config+0x7ca>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800284e:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	3b01      	subs	r3, #1
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002864:	4913      	ldr	r1, [pc, #76]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	3b01      	subs	r3, #1
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d018      	beq.n	80028b8 <HAL_OSPIM_Config+0x808>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002886:	4a0b      	ldr	r2, [pc, #44]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	3b01      	subs	r3, #1
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800289c:	4905      	ldr	r1, [pc, #20]	@ (80028b4 <HAL_OSPIM_Config+0x804>)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e0c5      	b.n	8002a40 <HAL_OSPIM_Config+0x990>
 80028b4:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	f000 80bf 	beq.w	8002a40 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80028c2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80028d8:	4968      	ldr	r1, [pc, #416]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	e0a7      	b.n	8002a40 <HAL_OSPIM_Config+0x990>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80028f0:	4a62      	ldr	r2, [pc, #392]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	431a      	orrs	r2, r3
 8002908:	495c      	ldr	r1, [pc, #368]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3b01      	subs	r3, #1
 8002910:	f042 0201 	orr.w	r2, r2, #1
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d014      	beq.n	800294c <HAL_OSPIM_Config+0x89c>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002922:	4a56      	ldr	r2, [pc, #344]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	3b01      	subs	r3, #1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002934:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002936:	015b      	lsls	r3, r3, #5
 8002938:	431a      	orrs	r2, r3
 800293a:	4950      	ldr	r1, [pc, #320]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	3b01      	subs	r3, #1
 8002942:	f042 0210 	orr.w	r2, r2, #16
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d019      	beq.n	800298c <HAL_OSPIM_Config+0x8dc>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002958:	4a48      	ldr	r2, [pc, #288]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	3b01      	subs	r3, #1
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800296e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002970:	049b      	lsls	r3, r3, #18
 8002972:	431a      	orrs	r2, r3
 8002974:	4941      	ldr	r1, [pc, #260]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	3b01      	subs	r3, #1
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	e01c      	b.n	80029c6 <HAL_OSPIM_Config+0x916>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d018      	beq.n	80029c6 <HAL_OSPIM_Config+0x916>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002994:	4a39      	ldr	r2, [pc, #228]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	3b01      	subs	r3, #1
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80029aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ac:	069b      	lsls	r3, r3, #26
 80029ae:	431a      	orrs	r2, r3
 80029b0:	4932      	ldr	r1, [pc, #200]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d019      	beq.n	8002a06 <HAL_OSPIM_Config+0x956>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80029d2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	3b01      	subs	r3, #1
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80029e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ea:	049b      	lsls	r3, r3, #18
 80029ec:	431a      	orrs	r2, r3
 80029ee:	4923      	ldr	r1, [pc, #140]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	e01c      	b.n	8002a40 <HAL_OSPIM_Config+0x990>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <HAL_OSPIM_Config+0x990>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8002a24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a26:	069b      	lsls	r3, r3, #26
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	4914      	ldr	r1, [pc, #80]	@ (8002a7c <HAL_OSPIM_Config+0x9cc>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002a40:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_OSPIM_Config+0x9a8>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <HAL_OSPIM_Config+0x9d0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0b      	ldr	r2, [pc, #44]	@ (8002a80 <HAL_OSPIM_Config+0x9d0>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002a58:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_OSPIM_Config+0x9c0>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002a64:	4b07      	ldr	r3, [pc, #28]	@ (8002a84 <HAL_OSPIM_Config+0x9d4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a06      	ldr	r2, [pc, #24]	@ (8002a84 <HAL_OSPIM_Config+0x9d4>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002a70:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3750      	adds	r7, #80	@ 0x50
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	5200b400 	.word	0x5200b400
 8002a80:	52005000 	.word	0x52005000
 8002a84:	5200a000 	.word	0x5200a000

08002a88 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002a98:	e01a      	b.n	8002ad0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d016      	beq.n	8002ad0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7fe fbeb 	bl	800127c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10b      	bne.n	8002ad0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002abe:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e00e      	b.n	8002aee <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1d6      	bne.n	8002a9a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	@ 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b14:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10a      	bne.n	8002b34 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d114      	bne.n	8002b66 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002b44:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002b4e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002b58:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e02c      	b.n	8002bc0 <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d114      	bne.n	8002b98 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b76:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8002b80:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b8a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e013      	b.n	8002bc0 <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ba0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002baa:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002bb4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d012      	beq.n	8002bfc <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bee:	4319      	orrs	r1, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 021f 	bic.w	r2, r3, #31
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d009      	beq.n	8002c2a <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d105      	bne.n	8002c2a <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3a01      	subs	r2, #1
 8002c28:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f000 8095 	beq.w	8002d5e <OSPI_ConfigCmd+0x266>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d053      	beq.n	8002ce4 <OSPI_ConfigCmd+0x1ec>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01e      	beq.n	8002c82 <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b64      	ldr	r3, [pc, #400]	@ (8002ddc <OSPI_ConfigCmd+0x2e4>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	68d1      	ldr	r1, [r2, #12]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	6952      	ldr	r2, [r2, #20]
 8002c54:	4311      	orrs	r1, r2
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	6912      	ldr	r2, [r2, #16]
 8002c5a:	4311      	orrs	r1, r2
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	69d2      	ldr	r2, [r2, #28]
 8002c60:	4311      	orrs	r1, r2
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c66:	4311      	orrs	r1, r2
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	6a12      	ldr	r2, [r2, #32]
 8002c6c:	4311      	orrs	r1, r2
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c72:	4311      	orrs	r1, r2
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e026      	b.n	8002cd0 <OSPI_ConfigCmd+0x1d8>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b56      	ldr	r3, [pc, #344]	@ (8002de0 <OSPI_ConfigCmd+0x2e8>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	68d1      	ldr	r1, [r2, #12]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6952      	ldr	r2, [r2, #20]
 8002c92:	4311      	orrs	r1, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6912      	ldr	r2, [r2, #16]
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	69d2      	ldr	r2, [r2, #28]
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ca4:	4311      	orrs	r1, r2
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	6a12      	ldr	r2, [r2, #32]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	431a      	orrs	r2, r3
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cba:	d109      	bne.n	8002cd0 <OSPI_ConfigCmd+0x1d8>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d105      	bne.n	8002cd0 <OSPI_ConfigCmd+0x1d8>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	6992      	ldr	r2, [r2, #24]
 8002ce0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002ce2:	e074      	b.n	8002dce <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d015      	beq.n	8002d18 <OSPI_ConfigCmd+0x220>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002de4 <OSPI_ConfigCmd+0x2ec>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	68d1      	ldr	r1, [r2, #12]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	6952      	ldr	r2, [r2, #20]
 8002cfc:	4311      	orrs	r1, r2
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	6912      	ldr	r2, [r2, #16]
 8002d02:	4311      	orrs	r1, r2
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d08:	4311      	orrs	r1, r2
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	431a      	orrs	r2, r3
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e01d      	b.n	8002d54 <OSPI_ConfigCmd+0x25c>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68d9      	ldr	r1, [r3, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4319      	orrs	r1, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	431a      	orrs	r2, r3
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d3e:	d109      	bne.n	8002d54 <OSPI_ConfigCmd+0x25c>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d105      	bne.n	8002d54 <OSPI_ConfigCmd+0x25c>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e037      	b.n	8002dce <OSPI_ConfigCmd+0x2d6>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02e      	beq.n	8002dc4 <OSPI_ConfigCmd+0x2cc>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d015      	beq.n	8002d9a <OSPI_ConfigCmd+0x2a2>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <OSPI_ConfigCmd+0x2f0>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	69d1      	ldr	r1, [r2, #28]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	6a12      	ldr	r2, [r2, #32]
 8002d84:	4311      	orrs	r1, r2
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d8a:	4311      	orrs	r1, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d90:	430a      	orrs	r2, r1
 8002d92:	431a      	orrs	r2, r3
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e00e      	b.n	8002db8 <OSPI_ConfigCmd+0x2c0>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	69d9      	ldr	r1, [r3, #28]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002daa:	4319      	orrs	r1, r3
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	431a      	orrs	r2, r3
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	6992      	ldr	r2, [r2, #24]
 8002dc0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002dc2:	e004      	b.n	8002dce <OSPI_ConfigCmd+0x2d6>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2208      	movs	r2, #8
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }

  /* Return function status */
  return status;
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3724      	adds	r7, #36	@ 0x24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	f0ffc0c0 	.word	0xf0ffc0c0
 8002de0:	ffffc0c0 	.word	0xffffc0c0
 8002de4:	f0ffffc0 	.word	0xf0ffffc0
 8002de8:	f0ffc0ff 	.word	0xf0ffc0ff

08002dec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <OSPIM_GetConfig+0x26>
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d802      	bhi.n	8002e12 <OSPIM_GetConfig+0x26>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
 8002e16:	e098      	b.n	8002f4a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d10b      	bne.n	8002e54 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8002e3c:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <OSPIM_GetConfig+0x16c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002e48:	4b44      	ldr	r3, [pc, #272]	@ (8002f5c <OSPIM_GetConfig+0x170>)
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e002      	b.n	8002e54 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8002e4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e52:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e074      	b.n	8002f44 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8002e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f58 <OSPIM_GetConfig+0x16c>)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4053      	eors	r3, r2
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4053      	eors	r3, r2
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d103      	bne.n	8002ea6 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4053      	eors	r3, r2
 8002eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d018      	beq.n	8002f02 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4053      	eors	r3, r2
 8002ed6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d111      	bne.n	8002f02 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d106      	bne.n	8002ef6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	3301      	adds	r3, #1
 8002eec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	60da      	str	r2, [r3, #12]
 8002ef4:	e005      	b.n	8002f02 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d018      	beq.n	8002f3e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4053      	eors	r3, r2
 8002f12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d111      	bne.n	8002f3e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d106      	bne.n	8002f32 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	611a      	str	r2, [r3, #16]
 8002f30:	e005      	b.n	8002f3e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3301      	adds	r3, #1
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d987      	bls.n	8002e5a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	371c      	adds	r7, #28
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	5200b400 	.word	0x5200b400
 8002f5c:	04040222 	.word	0x04040222

08002f60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002f68:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	2b06      	cmp	r3, #6
 8002f72:	d00a      	beq.n	8002f8a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002f74:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d001      	beq.n	8002f86 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e03f      	b.n	8003006 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e03d      	b.n	8003006 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002f8a:	4b21      	ldr	r3, [pc, #132]	@ (8003010 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002f92:	491f      	ldr	r1, [pc, #124]	@ (8003010 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002f9a:	f7fe f96f 	bl	800127c <HAL_GetTick>
 8002f9e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fa0:	e009      	b.n	8002fb6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fa2:	f7fe f96b 	bl	800127c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fb0:	d901      	bls.n	8002fb6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e027      	b.n	8003006 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002fb6:	4b16      	ldr	r3, [pc, #88]	@ (8003010 <HAL_PWREx_ConfigSupply+0xb0>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b1e      	cmp	r3, #30
 8002fc8:	d008      	beq.n	8002fdc <HAL_PWREx_ConfigSupply+0x7c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fce:	d005      	beq.n	8002fdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b1d      	cmp	r3, #29
 8002fd4:	d002      	beq.n	8002fdc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b2d      	cmp	r3, #45	@ 0x2d
 8002fda:	d113      	bne.n	8003004 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002fdc:	f7fe f94e 	bl	800127c <HAL_GetTick>
 8002fe0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002fe2:	e009      	b.n	8002ff8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002fe4:	f7fe f94a 	bl	800127c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ff2:	d901      	bls.n	8002ff8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e006      	b.n	8003006 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0311 	and.w	r3, r3, #17
 8003000:	2b11      	cmp	r3, #17
 8003002:	d1ef      	bne.n	8002fe4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	58024800 	.word	0x58024800

08003014 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	@ 0x30
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e3c8      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003034:	4b88      	ldr	r3, [pc, #544]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800303e:	4b86      	ldr	r3, [pc, #536]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003046:	2b10      	cmp	r3, #16
 8003048:	d007      	beq.n	800305a <HAL_RCC_OscConfig+0x46>
 800304a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304c:	2b18      	cmp	r3, #24
 800304e:	d110      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
 8003050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	4b7f      	ldr	r3, [pc, #508]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d06c      	beq.n	8003140 <HAL_RCC_OscConfig+0x12c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d168      	bne.n	8003140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e3a2      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x76>
 800307c:	4b76      	ldr	r3, [pc, #472]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a75      	ldr	r2, [pc, #468]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e02e      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b71      	ldr	r3, [pc, #452]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a70      	ldr	r2, [pc, #448]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b6e      	ldr	r3, [pc, #440]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a6d      	ldr	r2, [pc, #436]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0xbc>
 80030b6:	4b68      	ldr	r3, [pc, #416]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a67      	ldr	r2, [pc, #412]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b65      	ldr	r3, [pc, #404]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a64      	ldr	r2, [pc, #400]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030d0:	4b61      	ldr	r3, [pc, #388]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a60      	ldr	r2, [pc, #384]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f0:	f7fe f8c4 	bl	800127c <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe f8c0 	bl	800127c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	@ 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e356      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800310a:	4b53      	ldr	r3, [pc, #332]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe4>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe f8b0 	bl	800127c <HAL_GetTick>
 800311c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe f8ac 	bl	800127c <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	@ 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e342      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003132:	4b49      	ldr	r3, [pc, #292]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x10c>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 808c 	beq.w	8003268 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003150:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003158:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800315a:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_RCC_OscConfig+0x162>
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	2b18      	cmp	r3, #24
 800316a:	d137      	bne.n	80031dc <HAL_RCC_OscConfig+0x1c8>
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d132      	bne.n	80031dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003176:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_RCC_OscConfig+0x17a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e314      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800318e:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 0219 	bic.w	r2, r3, #25
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	492f      	ldr	r1, [pc, #188]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe f86c 	bl	800127c <HAL_GetTick>
 80031a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe f868 	bl	800127c <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e2fe      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031ba:	4b27      	ldr	r3, [pc, #156]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c6:	4b24      	ldr	r3, [pc, #144]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	061b      	lsls	r3, r3, #24
 80031d4:	4920      	ldr	r1, [pc, #128]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031da:	e045      	b.n	8003268 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d026      	beq.n	8003232 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80031e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 0219 	bic.w	r2, r3, #25
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4919      	ldr	r1, [pc, #100]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f6:	f7fe f841 	bl	800127c <HAL_GetTick>
 80031fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fe:	f7fe f83d 	bl	800127c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e2d3      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003210:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	490b      	ldr	r1, [pc, #44]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 800322c:	4313      	orrs	r3, r2
 800322e:	604b      	str	r3, [r1, #4]
 8003230:	e01a      	b.n	8003268 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003232:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a08      	ldr	r2, [pc, #32]	@ (8003258 <HAL_RCC_OscConfig+0x244>)
 8003238:	f023 0301 	bic.w	r3, r3, #1
 800323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fe f81d 	bl	800127c <HAL_GetTick>
 8003242:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003246:	f7fe f819 	bl	800127c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d903      	bls.n	800325c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e2af      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
 8003258:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800325c:	4b96      	ldr	r3, [pc, #600]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d06a      	beq.n	800334a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003274:	4b90      	ldr	r3, [pc, #576]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800327c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800327e:	4b8e      	ldr	r3, [pc, #568]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003282:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b08      	cmp	r3, #8
 8003288:	d007      	beq.n	800329a <HAL_RCC_OscConfig+0x286>
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b18      	cmp	r3, #24
 800328e:	d11b      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2b4>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800329a:	4b87      	ldr	r3, [pc, #540]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x29e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	2b80      	cmp	r3, #128	@ 0x80
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e282      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032b2:	4b81      	ldr	r3, [pc, #516]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	497d      	ldr	r1, [pc, #500]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032c6:	e040      	b.n	800334a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d023      	beq.n	8003318 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032d0:	4b79      	ldr	r3, [pc, #484]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a78      	ldr	r2, [pc, #480]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80032d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032dc:	f7fd ffce 	bl	800127c <HAL_GetTick>
 80032e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80032e4:	f7fd ffca 	bl	800127c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e260      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032f6:	4b70      	ldr	r3, [pc, #448]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003302:	4b6d      	ldr	r3, [pc, #436]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	4969      	ldr	r1, [pc, #420]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	60cb      	str	r3, [r1, #12]
 8003316:	e018      	b.n	800334a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003318:	4b67      	ldr	r3, [pc, #412]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a66      	ldr	r2, [pc, #408]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 800331e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd ffaa 	bl	800127c <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800332c:	f7fd ffa6 	bl	800127c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e23c      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800333e:	4b5e      	ldr	r3, [pc, #376]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f0      	bne.n	800332c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d036      	beq.n	80033c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d019      	beq.n	8003392 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800335e:	4b56      	ldr	r3, [pc, #344]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003362:	4a55      	ldr	r2, [pc, #340]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336a:	f7fd ff87 	bl	800127c <HAL_GetTick>
 800336e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003372:	f7fd ff83 	bl	800127c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e219      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003384:	4b4c      	ldr	r3, [pc, #304]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x35e>
 8003390:	e018      	b.n	80033c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003392:	4b49      	ldr	r3, [pc, #292]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003396:	4a48      	ldr	r2, [pc, #288]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003398:	f023 0301 	bic.w	r3, r3, #1
 800339c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339e:	f7fd ff6d 	bl	800127c <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a6:	f7fd ff69 	bl	800127c <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e1ff      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033b8:	4b3f      	ldr	r3, [pc, #252]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80033ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d036      	beq.n	800343e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d019      	beq.n	800340c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033d8:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a36      	ldr	r2, [pc, #216]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80033de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80033e4:	f7fd ff4a 	bl	800127c <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033ec:	f7fd ff46 	bl	800127c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e1dc      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80033fe:	4b2e      	ldr	r3, [pc, #184]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x3d8>
 800340a:	e018      	b.n	800343e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800340c:	4b2a      	ldr	r3, [pc, #168]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a29      	ldr	r2, [pc, #164]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003412:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003416:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003418:	f7fd ff30 	bl	800127c <HAL_GetTick>
 800341c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003420:	f7fd ff2c 	bl	800127c <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1c2      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003432:	4b21      	ldr	r3, [pc, #132]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8086 	beq.w	8003558 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800344c:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <HAL_RCC_OscConfig+0x4a8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1a      	ldr	r2, [pc, #104]	@ (80034bc <HAL_RCC_OscConfig+0x4a8>)
 8003452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003456:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003458:	f7fd ff10 	bl	800127c <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003460:	f7fd ff0c 	bl	800127c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1a2      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003472:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <HAL_RCC_OscConfig+0x4a8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d106      	bne.n	8003494 <HAL_RCC_OscConfig+0x480>
 8003486:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348a:	4a0b      	ldr	r2, [pc, #44]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6713      	str	r3, [r2, #112]	@ 0x70
 8003492:	e032      	b.n	80034fa <HAL_RCC_OscConfig+0x4e6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d111      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4ac>
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 800349e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a0:	4a05      	ldr	r2, [pc, #20]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ac:	4a02      	ldr	r2, [pc, #8]	@ (80034b8 <HAL_RCC_OscConfig+0x4a4>)
 80034ae:	f023 0304 	bic.w	r3, r3, #4
 80034b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b4:	e021      	b.n	80034fa <HAL_RCC_OscConfig+0x4e6>
 80034b6:	bf00      	nop
 80034b8:	58024400 	.word	0x58024400
 80034bc:	58024800 	.word	0x58024800
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4ce>
 80034c8:	4b83      	ldr	r3, [pc, #524]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034cc:	4a82      	ldr	r2, [pc, #520]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d4:	4b80      	ldr	r3, [pc, #512]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d8:	4a7f      	ldr	r2, [pc, #508]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x4e6>
 80034e2:	4b7d      	ldr	r3, [pc, #500]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e6:	4a7c      	ldr	r2, [pc, #496]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ee:	4b7a      	ldr	r3, [pc, #488]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a79      	ldr	r2, [pc, #484]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003502:	f7fd febb 	bl	800127c <HAL_GetTick>
 8003506:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fd feb7 	bl	800127c <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e14b      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003520:	4b6d      	ldr	r3, [pc, #436]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x4f6>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352e:	f7fd fea5 	bl	800127c <HAL_GetTick>
 8003532:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fea1 	bl	800127c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e135      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800354c:	4b62      	ldr	r3, [pc, #392]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800354e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 812a 	beq.w	80037b6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003562:	4b5d      	ldr	r3, [pc, #372]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800356a:	2b18      	cmp	r3, #24
 800356c:	f000 80ba 	beq.w	80036e4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	2b02      	cmp	r3, #2
 8003576:	f040 8095 	bne.w	80036a4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b57      	ldr	r3, [pc, #348]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a56      	ldr	r2, [pc, #344]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003580:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fd fe79 	bl	800127c <HAL_GetTick>
 800358a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fd fe75 	bl	800127c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e10b      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035a0:	4b4d      	ldr	r3, [pc, #308]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ac:	4b4a      	ldr	r3, [pc, #296]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80035ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035b0:	4b4a      	ldr	r3, [pc, #296]	@ (80036dc <HAL_RCC_OscConfig+0x6c8>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	430a      	orrs	r2, r1
 80035c0:	4945      	ldr	r1, [pc, #276]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d4:	3b01      	subs	r3, #1
 80035d6:	025b      	lsls	r3, r3, #9
 80035d8:	b29b      	uxth	r3, r3
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	3b01      	subs	r3, #1
 80035e2:	041b      	lsls	r3, r3, #16
 80035e4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ee:	3b01      	subs	r3, #1
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80035f6:	4938      	ldr	r1, [pc, #224]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80035fc:	4b36      	ldr	r3, [pc, #216]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	4a35      	ldr	r2, [pc, #212]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003608:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800360a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800360c:	4b34      	ldr	r3, [pc, #208]	@ (80036e0 <HAL_RCC_OscConfig+0x6cc>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003614:	00d2      	lsls	r2, r2, #3
 8003616:	4930      	ldr	r1, [pc, #192]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003618:	4313      	orrs	r3, r2
 800361a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800361c:	4b2e      	ldr	r3, [pc, #184]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	f023 020c 	bic.w	r2, r3, #12
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	492b      	ldr	r1, [pc, #172]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800362e:	4b2a      	ldr	r3, [pc, #168]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003632:	f023 0202 	bic.w	r2, r3, #2
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363a:	4927      	ldr	r1, [pc, #156]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003640:	4b25      	ldr	r3, [pc, #148]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4a24      	ldr	r2, [pc, #144]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364c:	4b22      	ldr	r3, [pc, #136]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800364e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003650:	4a21      	ldr	r2, [pc, #132]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003658:	4b1f      	ldr	r3, [pc, #124]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	4a1e      	ldr	r2, [pc, #120]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800365e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003664:	4b1c      	ldr	r3, [pc, #112]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003668:	4a1b      	ldr	r2, [pc, #108]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003670:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a18      	ldr	r2, [pc, #96]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fd fdfe 	bl	800127c <HAL_GetTick>
 8003680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003684:	f7fd fdfa 	bl	800127c <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e090      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003696:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x670>
 80036a2:	e088      	b.n	80037b6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0b      	ldr	r2, [pc, #44]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80036aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd fde4 	bl	800127c <HAL_GetTick>
 80036b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fd fde0 	bl	800127c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e076      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ca:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <HAL_RCC_OscConfig+0x6c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x6a4>
 80036d6:	e06e      	b.n	80037b6 <HAL_RCC_OscConfig+0x7a2>
 80036d8:	58024400 	.word	0x58024400
 80036dc:	fffffc0c 	.word	0xfffffc0c
 80036e0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80036e4:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80036ea:	4b35      	ldr	r3, [pc, #212]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d031      	beq.n	800375c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 0203 	and.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d12a      	bne.n	800375c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d122      	bne.n	800375c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003720:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d11a      	bne.n	800375c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	0a5b      	lsrs	r3, r3, #9
 800372a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003732:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d111      	bne.n	800375c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003744:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d108      	bne.n	800375c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	0e1b      	lsrs	r3, r3, #24
 800374e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003756:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e02b      	b.n	80037b8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003760:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 8003762:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003764:	08db      	lsrs	r3, r3, #3
 8003766:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800376a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	429a      	cmp	r2, r3
 8003774:	d01f      	beq.n	80037b6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	4a11      	ldr	r2, [pc, #68]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003782:	f7fd fd7b 	bl	800127c <HAL_GetTick>
 8003786:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003788:	bf00      	nop
 800378a:	f7fd fd77 	bl	800127c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003792:	4293      	cmp	r3, r2
 8003794:	d0f9      	beq.n	800378a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003796:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 8003798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800379a:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <HAL_RCC_OscConfig+0x7b0>)
 800379c:	4013      	ands	r3, r2
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037a2:	00d2      	lsls	r2, r2, #3
 80037a4:	4906      	ldr	r1, [pc, #24]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80037aa:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_RCC_OscConfig+0x7ac>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3730      	adds	r7, #48	@ 0x30
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	58024400 	.word	0x58024400
 80037c4:	ffff0007 	.word	0xffff0007

080037c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e19c      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037dc:	4b8a      	ldr	r3, [pc, #552]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d910      	bls.n	800380c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b87      	ldr	r3, [pc, #540]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 020f 	bic.w	r2, r3, #15
 80037f2:	4985      	ldr	r1, [pc, #532]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b83      	ldr	r3, [pc, #524]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e184      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003824:	429a      	cmp	r2, r3
 8003826:	d908      	bls.n	800383a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003828:	4b78      	ldr	r3, [pc, #480]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	4975      	ldr	r1, [pc, #468]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003836:	4313      	orrs	r3, r2
 8003838:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d010      	beq.n	8003868 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	4b70      	ldr	r3, [pc, #448]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003852:	429a      	cmp	r2, r3
 8003854:	d908      	bls.n	8003868 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003856:	4b6d      	ldr	r3, [pc, #436]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	496a      	ldr	r1, [pc, #424]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003864:	4313      	orrs	r3, r2
 8003866:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0310 	and.w	r3, r3, #16
 8003870:	2b00      	cmp	r3, #0
 8003872:	d010      	beq.n	8003896 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	4b64      	ldr	r3, [pc, #400]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003880:	429a      	cmp	r2, r3
 8003882:	d908      	bls.n	8003896 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003884:	4b61      	ldr	r3, [pc, #388]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	495e      	ldr	r1, [pc, #376]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003892:	4313      	orrs	r3, r2
 8003894:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d010      	beq.n	80038c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	4b59      	ldr	r3, [pc, #356]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d908      	bls.n	80038c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038b2:	4b56      	ldr	r3, [pc, #344]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4953      	ldr	r1, [pc, #332]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d010      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	4b4d      	ldr	r3, [pc, #308]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	429a      	cmp	r2, r3
 80038de:	d908      	bls.n	80038f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b4a      	ldr	r3, [pc, #296]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f023 020f 	bic.w	r2, r3, #15
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4947      	ldr	r1, [pc, #284]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d055      	beq.n	80039aa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038fe:	4b43      	ldr	r3, [pc, #268]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4940      	ldr	r1, [pc, #256]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800390c:	4313      	orrs	r3, r2
 800390e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d107      	bne.n	8003928 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003918:	4b3c      	ldr	r3, [pc, #240]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d121      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0f6      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d107      	bne.n	8003940 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003930:	4b36      	ldr	r3, [pc, #216]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d115      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0ea      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d107      	bne.n	8003958 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003948:	4b30      	ldr	r3, [pc, #192]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0de      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003958:	4b2c      	ldr	r3, [pc, #176]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0d6      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003968:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f023 0207 	bic.w	r2, r3, #7
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	4925      	ldr	r1, [pc, #148]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 8003976:	4313      	orrs	r3, r2
 8003978:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397a:	f7fd fc7f 	bl	800127c <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003980:	e00a      	b.n	8003998 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003982:	f7fd fc7b 	bl	800127c <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003990:	4293      	cmp	r3, r2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e0be      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003998:	4b1c      	ldr	r3, [pc, #112]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d1eb      	bne.n	8003982 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d010      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d208      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c6:	4b11      	ldr	r3, [pc, #68]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	f023 020f 	bic.w	r2, r3, #15
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	490e      	ldr	r1, [pc, #56]	@ (8003a0c <HAL_RCC_ClockConfig+0x244>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d214      	bcs.n	8003a10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 020f 	bic.w	r2, r3, #15
 80039ee:	4906      	ldr	r1, [pc, #24]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b04      	ldr	r3, [pc, #16]	@ (8003a08 <HAL_RCC_ClockConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e086      	b.n	8003b16 <HAL_RCC_ClockConfig+0x34e>
 8003a08:	52002000 	.word	0x52002000
 8003a0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	4b3f      	ldr	r3, [pc, #252]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d208      	bcs.n	8003a3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a2c:	4b3c      	ldr	r3, [pc, #240]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	4939      	ldr	r1, [pc, #228]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	4b34      	ldr	r3, [pc, #208]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d208      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a5a:	4b31      	ldr	r3, [pc, #196]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	492e      	ldr	r1, [pc, #184]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0310 	and.w	r3, r3, #16
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699a      	ldr	r2, [r3, #24]
 8003a7c:	4b28      	ldr	r3, [pc, #160]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d208      	bcs.n	8003a9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a88:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	4922      	ldr	r1, [pc, #136]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d010      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d208      	bcs.n	8003ac8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4917      	ldr	r1, [pc, #92]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ac8:	f000 f834 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	4912      	ldr	r1, [pc, #72]	@ (8003b24 <HAL_RCC_ClockConfig+0x35c>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b20 <HAL_RCC_ClockConfig+0x358>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4a0d      	ldr	r2, [pc, #52]	@ (8003b24 <HAL_RCC_ClockConfig+0x35c>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
 8003afc:	4a0a      	ldr	r2, [pc, #40]	@ (8003b28 <HAL_RCC_ClockConfig+0x360>)
 8003afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b00:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <HAL_RCC_ClockConfig+0x364>)
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b06:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <HAL_RCC_ClockConfig+0x368>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7fd fb6c 	bl	80011e8 <HAL_InitTick>
 8003b10:	4603      	mov	r3, r0
 8003b12:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
 8003b24:	080054a0 	.word	0x080054a0
 8003b28:	24000020 	.word	0x24000020
 8003b2c:	2400001c 	.word	0x2400001c
 8003b30:	24000024 	.word	0x24000024

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	@ 0x24
 8003b38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b3a:	4bb3      	ldr	r3, [pc, #716]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b42:	2b18      	cmp	r3, #24
 8003b44:	f200 8155 	bhi.w	8003df2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003b48:	a201      	add	r2, pc, #4	@ (adr r2, 8003b50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003bb5 	.word	0x08003bb5
 8003b54:	08003df3 	.word	0x08003df3
 8003b58:	08003df3 	.word	0x08003df3
 8003b5c:	08003df3 	.word	0x08003df3
 8003b60:	08003df3 	.word	0x08003df3
 8003b64:	08003df3 	.word	0x08003df3
 8003b68:	08003df3 	.word	0x08003df3
 8003b6c:	08003df3 	.word	0x08003df3
 8003b70:	08003bdb 	.word	0x08003bdb
 8003b74:	08003df3 	.word	0x08003df3
 8003b78:	08003df3 	.word	0x08003df3
 8003b7c:	08003df3 	.word	0x08003df3
 8003b80:	08003df3 	.word	0x08003df3
 8003b84:	08003df3 	.word	0x08003df3
 8003b88:	08003df3 	.word	0x08003df3
 8003b8c:	08003df3 	.word	0x08003df3
 8003b90:	08003be1 	.word	0x08003be1
 8003b94:	08003df3 	.word	0x08003df3
 8003b98:	08003df3 	.word	0x08003df3
 8003b9c:	08003df3 	.word	0x08003df3
 8003ba0:	08003df3 	.word	0x08003df3
 8003ba4:	08003df3 	.word	0x08003df3
 8003ba8:	08003df3 	.word	0x08003df3
 8003bac:	08003df3 	.word	0x08003df3
 8003bb0:	08003be7 	.word	0x08003be7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bb4:	4b94      	ldr	r3, [pc, #592]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bc0:	4b91      	ldr	r3, [pc, #580]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	08db      	lsrs	r3, r3, #3
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	4a90      	ldr	r2, [pc, #576]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003bd2:	e111      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bd4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bd6:	61bb      	str	r3, [r7, #24]
      break;
 8003bd8:	e10e      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003bda:	4b8d      	ldr	r3, [pc, #564]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bdc:	61bb      	str	r3, [r7, #24]
      break;
 8003bde:	e10b      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003be0:	4b8c      	ldr	r3, [pc, #560]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003be2:	61bb      	str	r3, [r7, #24]
      break;
 8003be4:	e108      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003be6:	4b88      	ldr	r3, [pc, #544]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003bf0:	4b85      	ldr	r3, [pc, #532]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf4:	091b      	lsrs	r3, r3, #4
 8003bf6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bfa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003bfc:	4b82      	ldr	r3, [pc, #520]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c06:	4b80      	ldr	r3, [pc, #512]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c0a:	08db      	lsrs	r3, r3, #3
 8003c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80e1 	beq.w	8003dec <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	f000 8083 	beq.w	8003d38 <HAL_RCC_GetSysClockFreq+0x204>
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	f200 80a1 	bhi.w	8003d7c <HAL_RCC_GetSysClockFreq+0x248>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d003      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0x114>
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d056      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c46:	e099      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c48:	4b6f      	ldr	r3, [pc, #444]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02d      	beq.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c54:	4b6c      	ldr	r3, [pc, #432]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	08db      	lsrs	r3, r3, #3
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
 8003c64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	ee07 3a90 	vmov	s15, r3
 8003c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c7e:	4b62      	ldr	r3, [pc, #392]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c92:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003cae:	e087      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cc2:	4b51      	ldr	r3, [pc, #324]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cd6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003cf2:	e065      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d06:	4b40      	ldr	r3, [pc, #256]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d1a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d36:	e043      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d42:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d5e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d7a:	e021      	b.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d86:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003da2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003dc0:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc4:	0a5b      	lsrs	r3, r3, #9
 8003dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dca:	3301      	adds	r3, #1
 8003dcc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	ee07 3a90 	vmov	s15, r3
 8003dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de4:	ee17 3a90 	vmov	r3, s15
 8003de8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003dea:	e005      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
      break;
 8003df0:	e002      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003df2:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003df4:	61bb      	str	r3, [r7, #24]
      break;
 8003df6:	bf00      	nop
  }

  return sysclockfreq;
 8003df8:	69bb      	ldr	r3, [r7, #24]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	@ 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	03d09000 	.word	0x03d09000
 8003e10:	003d0900 	.word	0x003d0900
 8003e14:	017d7840 	.word	0x017d7840
 8003e18:	46000000 	.word	0x46000000
 8003e1c:	4c742400 	.word	0x4c742400
 8003e20:	4a742400 	.word	0x4a742400
 8003e24:	4bbebc20 	.word	0x4bbebc20

08003e28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e2c:	b0c6      	sub	sp, #280	@ 0x118
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e34:	2300      	movs	r3, #0
 8003e36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003e4c:	2500      	movs	r5, #0
 8003e4e:	ea54 0305 	orrs.w	r3, r4, r5
 8003e52:	d049      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e5a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e5e:	d02f      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e64:	d828      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e6a:	d01a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e70:	d822      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e7a:	d007      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7e:	4bab      	ldr	r3, [pc, #684]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	4aaa      	ldr	r2, [pc, #680]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e8a:	e01a      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e90:	3308      	adds	r3, #8
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 f967 	bl	8005168 <RCCEx_PLL2_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ea0:	e00f      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea6:	3328      	adds	r3, #40	@ 0x28
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 fa0e 	bl	80052cc <RCCEx_PLL3_Config>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003eca:	4b98      	ldr	r3, [pc, #608]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ece:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ed8:	4a94      	ldr	r2, [pc, #592]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003ef4:	f04f 0900 	mov.w	r9, #0
 8003ef8:	ea58 0309 	orrs.w	r3, r8, r9
 8003efc:	d047      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d82a      	bhi.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003f08:	a201      	add	r2, pc, #4	@ (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f25 	.word	0x08003f25
 8003f14:	08003f33 	.word	0x08003f33
 8003f18:	08003f49 	.word	0x08003f49
 8003f1c:	08003f67 	.word	0x08003f67
 8003f20:	08003f67 	.word	0x08003f67
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f24:	4b81      	ldr	r3, [pc, #516]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f28:	4a80      	ldr	r2, [pc, #512]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f30:	e01a      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f36:	3308      	adds	r3, #8
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 f914 	bl	8005168 <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f46:	e00f      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4c:	3328      	adds	r3, #40	@ 0x28
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4618      	mov	r0, r3
 8003f52:	f001 f9bb 	bl	80052cc <RCCEx_PLL3_Config>
 8003f56:	4603      	mov	r3, r0
 8003f58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f5c:	e004      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f64:	e000      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10a      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f70:	4b6e      	ldr	r3, [pc, #440]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f74:	f023 0107 	bic.w	r1, r3, #7
 8003f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7e:	4a6b      	ldr	r2, [pc, #428]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f84:	e003      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003f9a:	f04f 0b00 	mov.w	fp, #0
 8003f9e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003fa2:	d05b      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fac:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003fb0:	d03b      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003fb2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003fb6:	d834      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fbc:	d037      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003fbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fc2:	d82e      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fc8:	d033      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003fca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fce:	d828      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fd4:	d01a      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fda:	d822      	bhi.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003fe0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fe4:	d007      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003fe6:	e01c      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4b50      	ldr	r3, [pc, #320]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fec:	4a4f      	ldr	r2, [pc, #316]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ff4:	e01e      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 f8b2 	bl	8005168 <RCCEx_PLL2_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800400a:	e013      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800400c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004010:	3328      	adds	r3, #40	@ 0x28
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f959 	bl	80052cc <RCCEx_PLL3_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004020:	e008      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800403c:	4b3b      	ldr	r3, [pc, #236]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004040:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800404c:	4a37      	ldr	r2, [pc, #220]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800404e:	430b      	orrs	r3, r1
 8004050:	6593      	str	r3, [r2, #88]	@ 0x58
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004068:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004072:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d05d      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800407c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004080:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004084:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004088:	d03b      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800408a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800408e:	d834      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004090:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004094:	d037      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8004096:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800409a:	d82e      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800409c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040a0:	d033      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80040a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80040a6:	d828      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80040a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040ac:	d01a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80040ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040b2:	d822      	bhi.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80040b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040bc:	d007      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80040be:	e01c      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	4a19      	ldr	r2, [pc, #100]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040cc:	e01e      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d2:	3308      	adds	r3, #8
 80040d4:	2100      	movs	r1, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f846 	bl	8005168 <RCCEx_PLL2_Config>
 80040dc:	4603      	mov	r3, r0
 80040de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040e2:	e013      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e8:	3328      	adds	r3, #40	@ 0x28
 80040ea:	2100      	movs	r1, #0
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f8ed 	bl	80052cc <RCCEx_PLL3_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040f8:	e008      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004100:	e004      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004102:	bf00      	nop
 8004104:	e002      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004106:	bf00      	nop
 8004108:	e000      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800410a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10d      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004118:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004124:	4a01      	ldr	r2, [pc, #4]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004126:	430b      	orrs	r3, r1
 8004128:	6593      	str	r3, [r2, #88]	@ 0x58
 800412a:	e005      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800412c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004134:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004144:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800414e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004152:	460b      	mov	r3, r1
 8004154:	4313      	orrs	r3, r2
 8004156:	d03a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800415e:	2b30      	cmp	r3, #48	@ 0x30
 8004160:	d01f      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004162:	2b30      	cmp	r3, #48	@ 0x30
 8004164:	d819      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004166:	2b20      	cmp	r3, #32
 8004168:	d00c      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800416a:	2b20      	cmp	r3, #32
 800416c:	d815      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800416e:	2b00      	cmp	r3, #0
 8004170:	d019      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004172:	2b10      	cmp	r3, #16
 8004174:	d111      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004176:	4baa      	ldr	r3, [pc, #680]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	4aa9      	ldr	r2, [pc, #676]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800417c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004182:	e011      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004188:	3308      	adds	r3, #8
 800418a:	2102      	movs	r1, #2
 800418c:	4618      	mov	r0, r3
 800418e:	f000 ffeb 	bl	8005168 <RCCEx_PLL2_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004198:	e006      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80041a0:	e002      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80041a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80041b0:	4b9b      	ldr	r3, [pc, #620]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80041b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041be:	4a98      	ldr	r2, [pc, #608]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80041da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80041e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d051      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041f8:	d035      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80041fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041fe:	d82e      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004200:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004204:	d031      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004206:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800420a:	d828      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004210:	d01a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004216:	d822      	bhi.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800421c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004220:	d007      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8004222:	e01c      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004224:	4b7e      	ldr	r3, [pc, #504]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	4a7d      	ldr	r2, [pc, #500]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800422a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800422e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004230:	e01c      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004236:	3308      	adds	r3, #8
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f000 ff94 	bl	8005168 <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004246:	e011      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424c:	3328      	adds	r3, #40	@ 0x28
 800424e:	2100      	movs	r1, #0
 8004250:	4618      	mov	r0, r3
 8004252:	f001 f83b 	bl	80052cc <RCCEx_PLL3_Config>
 8004256:	4603      	mov	r3, r0
 8004258:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800425c:	e006      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004264:	e002      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800426a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004274:	4b6a      	ldr	r3, [pc, #424]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004278:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800427c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004282:	4a67      	ldr	r2, [pc, #412]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004284:	430b      	orrs	r3, r1
 8004286:	6513      	str	r3, [r2, #80]	@ 0x50
 8004288:	e003      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800428e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800429e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042a2:	2300      	movs	r3, #0
 80042a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042a8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4313      	orrs	r3, r2
 80042b0:	d053      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80042b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042bc:	d033      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80042be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c2:	d82c      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042c8:	d02f      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x502>
 80042ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042ce:	d826      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042d4:	d02b      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80042d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80042da:	d820      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042e0:	d012      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80042e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042e6:	d81a      	bhi.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80042ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f0:	d115      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f6:	3308      	adds	r3, #8
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 ff34 	bl	8005168 <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004306:	e015      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430c:	3328      	adds	r3, #40	@ 0x28
 800430e:	2101      	movs	r1, #1
 8004310:	4618      	mov	r0, r3
 8004312:	f000 ffdb 	bl	80052cc <RCCEx_PLL3_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800431c:	e00a      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004324:	e006      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004326:	bf00      	nop
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800433c:	4b38      	ldr	r3, [pc, #224]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800433e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004340:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800434a:	4a35      	ldr	r2, [pc, #212]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800434c:	430b      	orrs	r3, r1
 800434e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004350:	e003      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004356:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800435a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800436a:	2300      	movs	r3, #0
 800436c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004370:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d058      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800437a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004382:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004386:	d033      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800438c:	d82c      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800438e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004392:	d02f      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004398:	d826      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800439a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800439e:	d02b      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80043a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043a4:	d820      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80043a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043aa:	d012      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043b0:	d81a      	bhi.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d022      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80043b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ba:	d115      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c0:	3308      	adds	r3, #8
 80043c2:	2101      	movs	r1, #1
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fecf 	bl	8005168 <RCCEx_PLL2_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043d0:	e015      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d6:	3328      	adds	r3, #40	@ 0x28
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 ff76 	bl	80052cc <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043e6:	e00a      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043ee:	e006      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043f0:	bf00      	nop
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043f4:	bf00      	nop
 80043f6:	e002      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80043fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004406:	4b06      	ldr	r3, [pc, #24]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800440e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004412:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004416:	4a02      	ldr	r2, [pc, #8]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004418:	430b      	orrs	r3, r1
 800441a:	6593      	str	r3, [r2, #88]	@ 0x58
 800441c:	e006      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800442c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004442:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d037      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004456:	d00e      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800445c:	d816      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d018      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004462:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004466:	d111      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4bc4      	ldr	r3, [pc, #784]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4ac3      	ldr	r2, [pc, #780]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004474:	e00f      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447a:	3308      	adds	r3, #8
 800447c:	2101      	movs	r1, #1
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fe72 	bl	8005168 <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004492:	e000      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004494:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004496:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800449e:	4bb7      	ldr	r3, [pc, #732]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ac:	4ab3      	ldr	r2, [pc, #716]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ae:	430b      	orrs	r3, r1
 80044b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80044b2:	e003      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80044c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d039      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d81c      	bhi.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80044e6:	a201      	add	r2, pc, #4	@ (adr r2, 80044ec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80044e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ec:	08004529 	.word	0x08004529
 80044f0:	080044fd 	.word	0x080044fd
 80044f4:	0800450b 	.word	0x0800450b
 80044f8:	08004529 	.word	0x08004529
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044fc:	4b9f      	ldr	r3, [pc, #636]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	4a9e      	ldr	r2, [pc, #632]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004508:	e00f      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800450a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450e:	3308      	adds	r3, #8
 8004510:	2102      	movs	r1, #2
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fe28 	bl	8005168 <RCCEx_PLL2_Config>
 8004518:	4603      	mov	r3, r0
 800451a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800451e:	e004      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004532:	4b92      	ldr	r3, [pc, #584]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004536:	f023 0103 	bic.w	r1, r3, #3
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004540:	4a8e      	ldr	r2, [pc, #568]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004542:	430b      	orrs	r3, r1
 8004544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004546:	e003      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800454c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800455c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004560:	2300      	movs	r3, #0
 8004562:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004566:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800456a:	460b      	mov	r3, r1
 800456c:	4313      	orrs	r3, r2
 800456e:	f000 8099 	beq.w	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004572:	4b83      	ldr	r3, [pc, #524]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a82      	ldr	r2, [pc, #520]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800457c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800457e:	f7fc fe7d 	bl	800127c <HAL_GetTick>
 8004582:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004586:	e00b      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004588:	f7fc fe78 	bl	800127c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b64      	cmp	r3, #100	@ 0x64
 8004596:	d903      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800459e:	e005      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a0:	4b77      	ldr	r3, [pc, #476]	@ (8004780 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0ed      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80045ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d173      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045b4:	4b71      	ldr	r3, [pc, #452]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045c0:	4053      	eors	r3, r2
 80045c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d015      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ca:	4b6c      	ldr	r3, [pc, #432]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80045d6:	4b69      	ldr	r3, [pc, #420]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	4a68      	ldr	r2, [pc, #416]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045e2:	4b66      	ldr	r3, [pc, #408]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	4a65      	ldr	r2, [pc, #404]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045ee:	4a63      	ldr	r2, [pc, #396]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80045f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80045fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004602:	d118      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fc fe3a 	bl	800127c <HAL_GetTick>
 8004608:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800460c:	e00d      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fc fe35 	bl	800127c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004618:	1ad2      	subs	r2, r2, r3
 800461a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800461e:	429a      	cmp	r2, r3
 8004620:	d903      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004628:	e005      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800462a:	4b54      	ldr	r3, [pc, #336]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0eb      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004636:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800463a:	2b00      	cmp	r3, #0
 800463c:	d129      	bne.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004642:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800464e:	d10e      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004650:	4b4a      	ldr	r3, [pc, #296]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800465c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004660:	091a      	lsrs	r2, r3, #4
 8004662:	4b48      	ldr	r3, [pc, #288]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004664:	4013      	ands	r3, r2
 8004666:	4a45      	ldr	r2, [pc, #276]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004668:	430b      	orrs	r3, r1
 800466a:	6113      	str	r3, [r2, #16]
 800466c:	e005      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800466e:	4b43      	ldr	r3, [pc, #268]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	4a42      	ldr	r2, [pc, #264]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004674:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004678:	6113      	str	r3, [r2, #16]
 800467a:	4b40      	ldr	r3, [pc, #256]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800467c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800467e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004686:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468a:	4a3c      	ldr	r2, [pc, #240]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800468c:	430b      	orrs	r3, r1
 800468e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004690:	e008      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004692:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004696:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800469a:	e003      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f002 0301 	and.w	r3, r2, #1
 80046b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80046be:	460b      	mov	r3, r1
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f000 808f 	beq.w	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80046c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046cc:	2b28      	cmp	r3, #40	@ 0x28
 80046ce:	d871      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80046d0:	a201      	add	r2, pc, #4	@ (adr r2, 80046d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080047bd 	.word	0x080047bd
 80046dc:	080047b5 	.word	0x080047b5
 80046e0:	080047b5 	.word	0x080047b5
 80046e4:	080047b5 	.word	0x080047b5
 80046e8:	080047b5 	.word	0x080047b5
 80046ec:	080047b5 	.word	0x080047b5
 80046f0:	080047b5 	.word	0x080047b5
 80046f4:	080047b5 	.word	0x080047b5
 80046f8:	08004789 	.word	0x08004789
 80046fc:	080047b5 	.word	0x080047b5
 8004700:	080047b5 	.word	0x080047b5
 8004704:	080047b5 	.word	0x080047b5
 8004708:	080047b5 	.word	0x080047b5
 800470c:	080047b5 	.word	0x080047b5
 8004710:	080047b5 	.word	0x080047b5
 8004714:	080047b5 	.word	0x080047b5
 8004718:	0800479f 	.word	0x0800479f
 800471c:	080047b5 	.word	0x080047b5
 8004720:	080047b5 	.word	0x080047b5
 8004724:	080047b5 	.word	0x080047b5
 8004728:	080047b5 	.word	0x080047b5
 800472c:	080047b5 	.word	0x080047b5
 8004730:	080047b5 	.word	0x080047b5
 8004734:	080047b5 	.word	0x080047b5
 8004738:	080047bd 	.word	0x080047bd
 800473c:	080047b5 	.word	0x080047b5
 8004740:	080047b5 	.word	0x080047b5
 8004744:	080047b5 	.word	0x080047b5
 8004748:	080047b5 	.word	0x080047b5
 800474c:	080047b5 	.word	0x080047b5
 8004750:	080047b5 	.word	0x080047b5
 8004754:	080047b5 	.word	0x080047b5
 8004758:	080047bd 	.word	0x080047bd
 800475c:	080047b5 	.word	0x080047b5
 8004760:	080047b5 	.word	0x080047b5
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080047b5 	.word	0x080047b5
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047b5 	.word	0x080047b5
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047bd 	.word	0x080047bd
 800477c:	58024400 	.word	0x58024400
 8004780:	58024800 	.word	0x58024800
 8004784:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478c:	3308      	adds	r3, #8
 800478e:	2101      	movs	r1, #1
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fce9 	bl	8005168 <RCCEx_PLL2_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800479c:	e00f      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800479e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047a2:	3328      	adds	r3, #40	@ 0x28
 80047a4:	2101      	movs	r1, #1
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fd90 	bl	80052cc <RCCEx_PLL3_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80047bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80047c6:	4bbf      	ldr	r3, [pc, #764]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80047ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d4:	4abb      	ldr	r2, [pc, #748]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047d6:	430b      	orrs	r3, r1
 80047d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80047da:	e003      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f002 0302 	and.w	r3, r2, #2
 80047f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047f4:	2300      	movs	r3, #0
 80047f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80047fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80047fe:	460b      	mov	r3, r1
 8004800:	4313      	orrs	r3, r2
 8004802:	d041      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480a:	2b05      	cmp	r3, #5
 800480c:	d824      	bhi.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800480e:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004861 	.word	0x08004861
 8004818:	0800482d 	.word	0x0800482d
 800481c:	08004843 	.word	0x08004843
 8004820:	08004861 	.word	0x08004861
 8004824:	08004861 	.word	0x08004861
 8004828:	08004861 	.word	0x08004861
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800482c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004830:	3308      	adds	r3, #8
 8004832:	2101      	movs	r1, #1
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fc97 	bl	8005168 <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004840:	e00f      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004846:	3328      	adds	r3, #40	@ 0x28
 8004848:	2101      	movs	r1, #1
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fd3e 	bl	80052cc <RCCEx_PLL3_Config>
 8004850:	4603      	mov	r3, r0
 8004852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004856:	e004      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800486a:	4b96      	ldr	r3, [pc, #600]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800486c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800486e:	f023 0107 	bic.w	r1, r3, #7
 8004872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004878:	4a92      	ldr	r2, [pc, #584]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800487a:	430b      	orrs	r3, r1
 800487c:	6553      	str	r3, [r2, #84]	@ 0x54
 800487e:	e003      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004884:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f002 0304 	and.w	r3, r2, #4
 8004894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004898:	2300      	movs	r3, #0
 800489a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800489e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d044      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80048a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d825      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	08004909 	.word	0x08004909
 80048c0:	080048d5 	.word	0x080048d5
 80048c4:	080048eb 	.word	0x080048eb
 80048c8:	08004909 	.word	0x08004909
 80048cc:	08004909 	.word	0x08004909
 80048d0:	08004909 	.word	0x08004909
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048d8:	3308      	adds	r3, #8
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f000 fc43 	bl	8005168 <RCCEx_PLL2_Config>
 80048e2:	4603      	mov	r3, r0
 80048e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048e8:	e00f      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ee:	3328      	adds	r3, #40	@ 0x28
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fcea 	bl	80052cc <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048fe:	e004      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004906:	e000      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004912:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004916:	f023 0107 	bic.w	r1, r3, #7
 800491a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	4a68      	ldr	r2, [pc, #416]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004924:	430b      	orrs	r3, r1
 8004926:	6593      	str	r3, [r2, #88]	@ 0x58
 8004928:	e003      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800492e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f002 0320 	and.w	r3, r2, #32
 800493e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004942:	2300      	movs	r3, #0
 8004944:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004948:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d055      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004956:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800495a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800495e:	d033      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004964:	d82c      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800496a:	d02f      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004970:	d826      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004972:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004976:	d02b      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004978:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800497c:	d820      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800497e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004982:	d012      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004988:	d81a      	bhi.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d022      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800498e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004992:	d115      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004998:	3308      	adds	r3, #8
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fbe3 	bl	8005168 <RCCEx_PLL2_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049a8:	e015      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ae:	3328      	adds	r3, #40	@ 0x28
 80049b0:	2102      	movs	r1, #2
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fc8a 	bl	80052cc <RCCEx_PLL3_Config>
 80049b8:	4603      	mov	r3, r0
 80049ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049be:	e00a      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049c6:	e006      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80049d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049de:	4b39      	ldr	r3, [pc, #228]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ee:	4a35      	ldr	r2, [pc, #212]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049f0:	430b      	orrs	r3, r1
 80049f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80049f4:	e003      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004a0a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a14:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d058      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a22:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a2a:	d033      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004a2c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004a30:	d82c      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a36:	d02f      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3c:	d826      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a42:	d02b      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004a44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a48:	d820      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a4e:	d012      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004a50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a54:	d81a      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d022      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a5e:	d115      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a64:	3308      	adds	r3, #8
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fb7d 	bl	8005168 <RCCEx_PLL2_Config>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a74:	e015      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a7a:	3328      	adds	r3, #40	@ 0x28
 8004a7c:	2102      	movs	r1, #2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fc24 	bl	80052cc <RCCEx_PLL3_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a92:	e006      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a94:	bf00      	nop
 8004a96:	e004      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a98:	bf00      	nop
 8004a9a:	e002      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004a9c:	bf00      	nop
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004aba:	4a02      	ldr	r2, [pc, #8]	@ (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ac0:	e006      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004adc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004ae6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004aea:	460b      	mov	r3, r1
 8004aec:	4313      	orrs	r3, r2
 8004aee:	d055      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004af8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004afc:	d033      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004afe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004b02:	d82c      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b08:	d02f      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b0e:	d826      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004b10:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b14:	d02b      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004b16:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b1a:	d820      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b20:	d012      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004b22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b26:	d81a      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d022      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004b2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b30:	d115      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b36:	3308      	adds	r3, #8
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fb14 	bl	8005168 <RCCEx_PLL2_Config>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b46:	e015      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4c:	3328      	adds	r3, #40	@ 0x28
 8004b4e:	2102      	movs	r1, #2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fbbb 	bl	80052cc <RCCEx_PLL3_Config>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b64:	e006      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b66:	bf00      	nop
 8004b68:	e004      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e002      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b6e:	bf00      	nop
 8004b70:	e000      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b7c:	4ba0      	ldr	r3, [pc, #640]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b80:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b8c:	4a9c      	ldr	r2, [pc, #624]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b92:	e003      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	f002 0308 	and.w	r3, r2, #8
 8004ba8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bac:	2300      	movs	r3, #0
 8004bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004bb2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	d01e      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bce:	3328      	adds	r3, #40	@ 0x28
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fb7a 	bl	80052cc <RCCEx_PLL3_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004be4:	4b86      	ldr	r3, [pc, #536]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bf4:	4a82      	ldr	r2, [pc, #520]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	f002 0310 	and.w	r3, r2, #16
 8004c06:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c10:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c14:	460b      	mov	r3, r1
 8004c16:	4313      	orrs	r3, r2
 8004c18:	d01e      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c2c:	3328      	adds	r3, #40	@ 0x28
 8004c2e:	2102      	movs	r1, #2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fb4b 	bl	80052cc <RCCEx_PLL3_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c42:	4b6f      	ldr	r3, [pc, #444]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c46:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c52:	4a6b      	ldr	r2, [pc, #428]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c66:	2300      	movs	r3, #0
 8004c68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c6a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004c6e:	460b      	mov	r3, r1
 8004c70:	4313      	orrs	r3, r2
 8004c72:	d03e      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c80:	d022      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004c82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c86:	d81b      	bhi.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c90:	d00b      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004c92:	e015      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c98:	3308      	adds	r3, #8
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fa63 	bl	8005168 <RCCEx_PLL2_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ca8:	e00f      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cae:	3328      	adds	r3, #40	@ 0x28
 8004cb0:	2102      	movs	r1, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fb0a 	bl	80052cc <RCCEx_PLL3_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cbe:	e004      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cc6:	e000      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cd2:	4b4b      	ldr	r3, [pc, #300]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ce2:	4a47      	ldr	r2, [pc, #284]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ce8:	e003      	b.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004cfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d00:	2300      	movs	r3, #0
 8004d02:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d08:	460b      	mov	r3, r1
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	d03b      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d1a:	d01f      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004d1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d20:	d818      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d26:	d003      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004d28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d2c:	d007      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004d2e:	e011      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d30:	4b33      	ldr	r3, [pc, #204]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a32      	ldr	r2, [pc, #200]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d3c:	e00f      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d42:	3328      	adds	r3, #40	@ 0x28
 8004d44:	2101      	movs	r1, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fac0 	bl	80052cc <RCCEx_PLL3_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d52:	e004      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d66:	4b26      	ldr	r3, [pc, #152]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d76:	4a22      	ldr	r2, [pc, #136]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d7c:	e003      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d82:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d92:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d94:	2300      	movs	r3, #0
 8004d96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d98:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	d034      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db0:	d007      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004db2:	e011      	b.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db4:	4b12      	ldr	r3, [pc, #72]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	4a11      	ldr	r2, [pc, #68]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004dc0:	e00e      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f9cc 	bl	8005168 <RCCEx_PLL2_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004dd6:	e003      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004dde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df6:	4a02      	ldr	r2, [pc, #8]	@ (8004e00 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004e18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e1e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e22:	460b      	mov	r3, r1
 8004e24:	4313      	orrs	r3, r2
 8004e26:	d00c      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2c:	3328      	adds	r3, #40	@ 0x28
 8004e2e:	2102      	movs	r1, #2
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 fa4b 	bl	80052cc <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e50:	2300      	movs	r3, #0
 8004e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e54:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	d036      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e68:	d018      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004e6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e6e:	d811      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e74:	d014      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7a:	d80b      	bhi.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d011      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004e80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e84:	d106      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e86:	4bb7      	ldr	r3, [pc, #732]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	4ab6      	ldr	r2, [pc, #728]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e92:	e008      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e9a:	e004      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004e9c:	bf00      	nop
 8004e9e:	e002      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004ea0:	bf00      	nop
 8004ea2:	e000      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eae:	4bad      	ldr	r3, [pc, #692]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ebc:	4aa9      	ldr	r2, [pc, #676]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ec2:	e003      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ec8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eda:	2300      	movs	r3, #0
 8004edc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ede:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d009      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ee8:	4b9e      	ldr	r3, [pc, #632]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef6:	4a9b      	ldr	r2, [pc, #620]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f0e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f12:	460b      	mov	r3, r1
 8004f14:	4313      	orrs	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f18:	4b92      	ldr	r3, [pc, #584]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f1c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f26:	4a8f      	ldr	r2, [pc, #572]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d00e      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f48:	4b86      	ldr	r3, [pc, #536]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	4a85      	ldr	r2, [pc, #532]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f52:	6113      	str	r3, [r2, #16]
 8004f54:	4b83      	ldr	r3, [pc, #524]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f56:	6919      	ldr	r1, [r3, #16]
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f60:	4a80      	ldr	r2, [pc, #512]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f74:	2300      	movs	r3, #0
 8004f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f78:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d009      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f82:	4b78      	ldr	r3, [pc, #480]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f86:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f90:	4a74      	ldr	r2, [pc, #464]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004f92:	430b      	orrs	r3, r1
 8004f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004fac:	460b      	mov	r3, r1
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fb2:	4b6c      	ldr	r3, [pc, #432]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc2:	4a68      	ldr	r2, [pc, #416]	@ (8005164 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fda:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	d011      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe8:	3308      	adds	r3, #8
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f8bb 	bl	8005168 <RCCEx_PLL2_Config>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004ff8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005004:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	2100      	movs	r1, #0
 8005012:	6239      	str	r1, [r7, #32]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
 800501a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800501e:	460b      	mov	r3, r1
 8005020:	4313      	orrs	r3, r2
 8005022:	d011      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005028:	3308      	adds	r3, #8
 800502a:	2101      	movs	r1, #1
 800502c:	4618      	mov	r0, r3
 800502e:	f000 f89b 	bl	8005168 <RCCEx_PLL2_Config>
 8005032:	4603      	mov	r3, r0
 8005034:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	2100      	movs	r1, #0
 8005052:	61b9      	str	r1, [r7, #24]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d011      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005068:	3308      	adds	r3, #8
 800506a:	2102      	movs	r1, #2
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f87b 	bl	8005168 <RCCEx_PLL2_Config>
 8005072:	4603      	mov	r3, r0
 8005074:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005078:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	2100      	movs	r1, #0
 8005092:	6139      	str	r1, [r7, #16]
 8005094:	f003 0308 	and.w	r3, r3, #8
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800509e:	460b      	mov	r3, r1
 80050a0:	4313      	orrs	r3, r2
 80050a2:	d011      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a8:	3328      	adds	r3, #40	@ 0x28
 80050aa:	2100      	movs	r1, #0
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f90d 	bl	80052cc <RCCEx_PLL3_Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80050b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	2100      	movs	r1, #0
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050de:	460b      	mov	r3, r1
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d011      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e8:	3328      	adds	r3, #40	@ 0x28
 80050ea:	2101      	movs	r1, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 f8ed 	bl	80052cc <RCCEx_PLL3_Config>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80050f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005104:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	2100      	movs	r1, #0
 8005112:	6039      	str	r1, [r7, #0]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	607b      	str	r3, [r7, #4]
 800511a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800511e:	460b      	mov	r3, r1
 8005120:	4313      	orrs	r3, r2
 8005122:	d011      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005128:	3328      	adds	r3, #40	@ 0x28
 800512a:	2102      	movs	r1, #2
 800512c:	4618      	mov	r0, r3
 800512e:	f000 f8cd 	bl	80052cc <RCCEx_PLL3_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005138:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005144:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005148:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005150:	2300      	movs	r3, #0
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
}
 8005156:	4618      	mov	r0, r3
 8005158:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800515c:	46bd      	mov	sp, r7
 800515e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005162:	bf00      	nop
 8005164:	58024400 	.word	0x58024400

08005168 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005176:	4b53      	ldr	r3, [pc, #332]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b03      	cmp	r3, #3
 8005180:	d101      	bne.n	8005186 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e099      	b.n	80052ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005186:	4b4f      	ldr	r3, [pc, #316]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a4e      	ldr	r2, [pc, #312]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800518c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005192:	f7fc f873 	bl	800127c <HAL_GetTick>
 8005196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005198:	e008      	b.n	80051ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800519a:	f7fc f86f 	bl	800127c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e086      	b.n	80052ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051ac:	4b45      	ldr	r3, [pc, #276]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f0      	bne.n	800519a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051b8:	4b42      	ldr	r3, [pc, #264]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	031b      	lsls	r3, r3, #12
 80051c6:	493f      	ldr	r1, [pc, #252]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	3b01      	subs	r3, #1
 80051dc:	025b      	lsls	r3, r3, #9
 80051de:	b29b      	uxth	r3, r3
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	041b      	lsls	r3, r3, #16
 80051ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	061b      	lsls	r3, r3, #24
 80051f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051fc:	4931      	ldr	r1, [pc, #196]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005202:	4b30      	ldr	r3, [pc, #192]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	492d      	ldr	r1, [pc, #180]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005210:	4313      	orrs	r3, r2
 8005212:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005214:	4b2b      	ldr	r3, [pc, #172]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005218:	f023 0220 	bic.w	r2, r3, #32
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	4928      	ldr	r1, [pc, #160]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005222:	4313      	orrs	r3, r2
 8005224:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005226:	4b27      	ldr	r3, [pc, #156]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522a:	4a26      	ldr	r2, [pc, #152]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800522c:	f023 0310 	bic.w	r3, r3, #16
 8005230:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005232:	4b24      	ldr	r3, [pc, #144]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005234:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005236:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <RCCEx_PLL2_Config+0x160>)
 8005238:	4013      	ands	r3, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	69d2      	ldr	r2, [r2, #28]
 800523e:	00d2      	lsls	r2, r2, #3
 8005240:	4920      	ldr	r1, [pc, #128]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005246:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524a:	4a1e      	ldr	r2, [pc, #120]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800524c:	f043 0310 	orr.w	r3, r3, #16
 8005250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005258:	4b1a      	ldr	r3, [pc, #104]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	4a19      	ldr	r2, [pc, #100]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800525e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005262:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005264:	e00f      	b.n	8005286 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d106      	bne.n	800527a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800526c:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800526e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005270:	4a14      	ldr	r2, [pc, #80]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005276:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005278:	e005      	b.n	8005286 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800527a:	4b12      	ldr	r3, [pc, #72]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	4a11      	ldr	r2, [pc, #68]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005280:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005284:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005286:	4b0f      	ldr	r3, [pc, #60]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a0e      	ldr	r2, [pc, #56]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 800528c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005292:	f7fb fff3 	bl	800127c <HAL_GetTick>
 8005296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005298:	e008      	b.n	80052ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800529a:	f7fb ffef 	bl	800127c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e006      	b.n	80052ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052ac:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <RCCEx_PLL2_Config+0x15c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	58024400 	.word	0x58024400
 80052c8:	ffff0007 	.word	0xffff0007

080052cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d6:	2300      	movs	r3, #0
 80052d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052da:	4b53      	ldr	r3, [pc, #332]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d101      	bne.n	80052ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e099      	b.n	800541e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a4e      	ldr	r2, [pc, #312]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80052f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f6:	f7fb ffc1 	bl	800127c <HAL_GetTick>
 80052fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052fc:	e008      	b.n	8005310 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052fe:	f7fb ffbd 	bl	800127c <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b02      	cmp	r3, #2
 800530a:	d901      	bls.n	8005310 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e086      	b.n	800541e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005310:	4b45      	ldr	r3, [pc, #276]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f0      	bne.n	80052fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800531c:	4b42      	ldr	r3, [pc, #264]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 800531e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005320:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	051b      	lsls	r3, r3, #20
 800532a:	493f      	ldr	r1, [pc, #252]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 800532c:	4313      	orrs	r3, r2
 800532e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	3b01      	subs	r3, #1
 8005336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	3b01      	subs	r3, #1
 8005340:	025b      	lsls	r3, r3, #9
 8005342:	b29b      	uxth	r3, r3
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	3b01      	subs	r3, #1
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	3b01      	subs	r3, #1
 800535a:	061b      	lsls	r3, r3, #24
 800535c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005360:	4931      	ldr	r1, [pc, #196]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005362:	4313      	orrs	r3, r2
 8005364:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005366:	4b30      	ldr	r3, [pc, #192]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	492d      	ldr	r1, [pc, #180]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005378:	4b2b      	ldr	r3, [pc, #172]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	4928      	ldr	r1, [pc, #160]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005386:	4313      	orrs	r3, r2
 8005388:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800538a:	4b27      	ldr	r3, [pc, #156]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 800538c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538e:	4a26      	ldr	r2, [pc, #152]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005394:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005396:	4b24      	ldr	r3, [pc, #144]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800539a:	4b24      	ldr	r3, [pc, #144]	@ (800542c <RCCEx_PLL3_Config+0x160>)
 800539c:	4013      	ands	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	69d2      	ldr	r2, [r2, #28]
 80053a2:	00d2      	lsls	r2, r2, #3
 80053a4:	4920      	ldr	r1, [pc, #128]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d106      	bne.n	80053ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c0:	4a19      	ldr	r2, [pc, #100]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053c8:	e00f      	b.n	80053ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d106      	bne.n	80053de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053d0:	4b15      	ldr	r3, [pc, #84]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d4:	4a14      	ldr	r2, [pc, #80]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053dc:	e005      	b.n	80053ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e2:	4a11      	ldr	r2, [pc, #68]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a0e      	ldr	r2, [pc, #56]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 80053f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f6:	f7fb ff41 	bl	800127c <HAL_GetTick>
 80053fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053fc:	e008      	b.n	8005410 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053fe:	f7fb ff3d 	bl	800127c <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e006      	b.n	800541e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <RCCEx_PLL3_Config+0x15c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	58024400 	.word	0x58024400
 800542c:	ffff0007 	.word	0xffff0007

08005430 <memset>:
 8005430:	4402      	add	r2, r0
 8005432:	4603      	mov	r3, r0
 8005434:	4293      	cmp	r3, r2
 8005436:	d100      	bne.n	800543a <memset+0xa>
 8005438:	4770      	bx	lr
 800543a:	f803 1b01 	strb.w	r1, [r3], #1
 800543e:	e7f9      	b.n	8005434 <memset+0x4>

08005440 <__libc_init_array>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	4d0d      	ldr	r5, [pc, #52]	@ (8005478 <__libc_init_array+0x38>)
 8005444:	4c0d      	ldr	r4, [pc, #52]	@ (800547c <__libc_init_array+0x3c>)
 8005446:	1b64      	subs	r4, r4, r5
 8005448:	10a4      	asrs	r4, r4, #2
 800544a:	2600      	movs	r6, #0
 800544c:	42a6      	cmp	r6, r4
 800544e:	d109      	bne.n	8005464 <__libc_init_array+0x24>
 8005450:	4d0b      	ldr	r5, [pc, #44]	@ (8005480 <__libc_init_array+0x40>)
 8005452:	4c0c      	ldr	r4, [pc, #48]	@ (8005484 <__libc_init_array+0x44>)
 8005454:	f000 f818 	bl	8005488 <_init>
 8005458:	1b64      	subs	r4, r4, r5
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	2600      	movs	r6, #0
 800545e:	42a6      	cmp	r6, r4
 8005460:	d105      	bne.n	800546e <__libc_init_array+0x2e>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	f855 3b04 	ldr.w	r3, [r5], #4
 8005468:	4798      	blx	r3
 800546a:	3601      	adds	r6, #1
 800546c:	e7ee      	b.n	800544c <__libc_init_array+0xc>
 800546e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005472:	4798      	blx	r3
 8005474:	3601      	adds	r6, #1
 8005476:	e7f2      	b.n	800545e <__libc_init_array+0x1e>
 8005478:	080054b0 	.word	0x080054b0
 800547c:	080054b0 	.word	0x080054b0
 8005480:	080054b0 	.word	0x080054b0
 8005484:	080054b4 	.word	0x080054b4

08005488 <_init>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr

08005494 <_fini>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	bf00      	nop
 8005498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549a:	bc08      	pop	{r3}
 800549c:	469e      	mov	lr, r3
 800549e:	4770      	bx	lr
