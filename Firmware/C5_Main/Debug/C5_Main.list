
C5_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095bc  080202d0  080202d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08029890  08029890  0000a890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08029ce0  08029ce0  0000ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08029ce8  08029ce8  0000ace8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08029cec  08029cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  08029cf0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .psram_data   00000000  90000000  90000000  0000b1d8  2**0
                  CONTENTS
  8 .bss          00000254  240001d8  240001d8  0000b1d8  2**2
                  ALLOC
  9 .psram_bss    00000018  90000000  90000000  0000c000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400042c  2400042c  0000b1d8  2**0
                  ALLOC
 11 ._user_heap_stack 00000600  24000a30  24000a30  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100bf  00000000  00000000  0000b206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002851  00000000  00000000  0001b2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0001db18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009a7  00000000  00000000  0001e808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000346b8  00000000  00000000  0001f1af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012291  00000000  00000000  00053867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00148632  00000000  00000000  00065af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ae12a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046d8  00000000  00000000  001ae170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001b2848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080202d0 <__do_global_dtors_aux>:
 80202d0:	b510      	push	{r4, lr}
 80202d2:	4c05      	ldr	r4, [pc, #20]	@ (80202e8 <__do_global_dtors_aux+0x18>)
 80202d4:	7823      	ldrb	r3, [r4, #0]
 80202d6:	b933      	cbnz	r3, 80202e6 <__do_global_dtors_aux+0x16>
 80202d8:	4b04      	ldr	r3, [pc, #16]	@ (80202ec <__do_global_dtors_aux+0x1c>)
 80202da:	b113      	cbz	r3, 80202e2 <__do_global_dtors_aux+0x12>
 80202dc:	4804      	ldr	r0, [pc, #16]	@ (80202f0 <__do_global_dtors_aux+0x20>)
 80202de:	f3af 8000 	nop.w
 80202e2:	2301      	movs	r3, #1
 80202e4:	7023      	strb	r3, [r4, #0]
 80202e6:	bd10      	pop	{r4, pc}
 80202e8:	240001d8 	.word	0x240001d8
 80202ec:	00000000 	.word	0x00000000
 80202f0:	08029874 	.word	0x08029874

080202f4 <frame_dummy>:
 80202f4:	b508      	push	{r3, lr}
 80202f6:	4b03      	ldr	r3, [pc, #12]	@ (8020304 <frame_dummy+0x10>)
 80202f8:	b11b      	cbz	r3, 8020302 <frame_dummy+0xe>
 80202fa:	4903      	ldr	r1, [pc, #12]	@ (8020308 <frame_dummy+0x14>)
 80202fc:	4803      	ldr	r0, [pc, #12]	@ (802030c <frame_dummy+0x18>)
 80202fe:	f3af 8000 	nop.w
 8020302:	bd08      	pop	{r3, pc}
 8020304:	00000000 	.word	0x00000000
 8020308:	240001dc 	.word	0x240001dc
 802030c:	08029874 	.word	0x08029874

08020310 <memchr>:
 8020310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020314:	2a10      	cmp	r2, #16
 8020316:	db2b      	blt.n	8020370 <memchr+0x60>
 8020318:	f010 0f07 	tst.w	r0, #7
 802031c:	d008      	beq.n	8020330 <memchr+0x20>
 802031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020322:	3a01      	subs	r2, #1
 8020324:	428b      	cmp	r3, r1
 8020326:	d02d      	beq.n	8020384 <memchr+0x74>
 8020328:	f010 0f07 	tst.w	r0, #7
 802032c:	b342      	cbz	r2, 8020380 <memchr+0x70>
 802032e:	d1f6      	bne.n	802031e <memchr+0xe>
 8020330:	b4f0      	push	{r4, r5, r6, r7}
 8020332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802033a:	f022 0407 	bic.w	r4, r2, #7
 802033e:	f07f 0700 	mvns.w	r7, #0
 8020342:	2300      	movs	r3, #0
 8020344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020348:	3c08      	subs	r4, #8
 802034a:	ea85 0501 	eor.w	r5, r5, r1
 802034e:	ea86 0601 	eor.w	r6, r6, r1
 8020352:	fa85 f547 	uadd8	r5, r5, r7
 8020356:	faa3 f587 	sel	r5, r3, r7
 802035a:	fa86 f647 	uadd8	r6, r6, r7
 802035e:	faa5 f687 	sel	r6, r5, r7
 8020362:	b98e      	cbnz	r6, 8020388 <memchr+0x78>
 8020364:	d1ee      	bne.n	8020344 <memchr+0x34>
 8020366:	bcf0      	pop	{r4, r5, r6, r7}
 8020368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 802036c:	f002 0207 	and.w	r2, r2, #7
 8020370:	b132      	cbz	r2, 8020380 <memchr+0x70>
 8020372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020376:	3a01      	subs	r2, #1
 8020378:	ea83 0301 	eor.w	r3, r3, r1
 802037c:	b113      	cbz	r3, 8020384 <memchr+0x74>
 802037e:	d1f8      	bne.n	8020372 <memchr+0x62>
 8020380:	2000      	movs	r0, #0
 8020382:	4770      	bx	lr
 8020384:	3801      	subs	r0, #1
 8020386:	4770      	bx	lr
 8020388:	2d00      	cmp	r5, #0
 802038a:	bf06      	itte	eq
 802038c:	4635      	moveq	r5, r6
 802038e:	3803      	subeq	r0, #3
 8020390:	3807      	subne	r0, #7
 8020392:	f015 0f01 	tst.w	r5, #1
 8020396:	d107      	bne.n	80203a8 <memchr+0x98>
 8020398:	3001      	adds	r0, #1
 802039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802039e:	bf02      	ittt	eq
 80203a0:	3001      	addeq	r0, #1
 80203a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80203a6:	3001      	addeq	r0, #1
 80203a8:	bcf0      	pop	{r4, r5, r6, r7}
 80203aa:	3801      	subs	r0, #1
 80203ac:	4770      	bx	lr
 80203ae:	bf00      	nop

080203b0 <strlen>:
 80203b0:	4603      	mov	r3, r0
 80203b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203b6:	2a00      	cmp	r2, #0
 80203b8:	d1fb      	bne.n	80203b2 <strlen+0x2>
 80203ba:	1a18      	subs	r0, r3, r0
 80203bc:	3801      	subs	r0, #1
 80203be:	4770      	bx	lr

080203c0 <__aeabi_drsub>:
 80203c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80203c4:	e002      	b.n	80203cc <__adddf3>
 80203c6:	bf00      	nop

080203c8 <__aeabi_dsub>:
 80203c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080203cc <__adddf3>:
 80203cc:	b530      	push	{r4, r5, lr}
 80203ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80203d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80203d6:	ea94 0f05 	teq	r4, r5
 80203da:	bf08      	it	eq
 80203dc:	ea90 0f02 	teqeq	r0, r2
 80203e0:	bf1f      	itttt	ne
 80203e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80203e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80203ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80203ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80203f2:	f000 80e2 	beq.w	80205ba <__adddf3+0x1ee>
 80203f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80203fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80203fe:	bfb8      	it	lt
 8020400:	426d      	neglt	r5, r5
 8020402:	dd0c      	ble.n	802041e <__adddf3+0x52>
 8020404:	442c      	add	r4, r5
 8020406:	ea80 0202 	eor.w	r2, r0, r2
 802040a:	ea81 0303 	eor.w	r3, r1, r3
 802040e:	ea82 0000 	eor.w	r0, r2, r0
 8020412:	ea83 0101 	eor.w	r1, r3, r1
 8020416:	ea80 0202 	eor.w	r2, r0, r2
 802041a:	ea81 0303 	eor.w	r3, r1, r3
 802041e:	2d36      	cmp	r5, #54	@ 0x36
 8020420:	bf88      	it	hi
 8020422:	bd30      	pophi	{r4, r5, pc}
 8020424:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8020428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802042c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8020430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020434:	d002      	beq.n	802043c <__adddf3+0x70>
 8020436:	4240      	negs	r0, r0
 8020438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802043c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8020440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020448:	d002      	beq.n	8020450 <__adddf3+0x84>
 802044a:	4252      	negs	r2, r2
 802044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020450:	ea94 0f05 	teq	r4, r5
 8020454:	f000 80a7 	beq.w	80205a6 <__adddf3+0x1da>
 8020458:	f1a4 0401 	sub.w	r4, r4, #1
 802045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020460:	db0d      	blt.n	802047e <__adddf3+0xb2>
 8020462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020466:	fa22 f205 	lsr.w	r2, r2, r5
 802046a:	1880      	adds	r0, r0, r2
 802046c:	f141 0100 	adc.w	r1, r1, #0
 8020470:	fa03 f20e 	lsl.w	r2, r3, lr
 8020474:	1880      	adds	r0, r0, r2
 8020476:	fa43 f305 	asr.w	r3, r3, r5
 802047a:	4159      	adcs	r1, r3
 802047c:	e00e      	b.n	802049c <__adddf3+0xd0>
 802047e:	f1a5 0520 	sub.w	r5, r5, #32
 8020482:	f10e 0e20 	add.w	lr, lr, #32
 8020486:	2a01      	cmp	r2, #1
 8020488:	fa03 fc0e 	lsl.w	ip, r3, lr
 802048c:	bf28      	it	cs
 802048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020492:	fa43 f305 	asr.w	r3, r3, r5
 8020496:	18c0      	adds	r0, r0, r3
 8020498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80204a0:	d507      	bpl.n	80204b2 <__adddf3+0xe6>
 80204a2:	f04f 0e00 	mov.w	lr, #0
 80204a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80204aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80204ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80204b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80204b6:	d31b      	bcc.n	80204f0 <__adddf3+0x124>
 80204b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80204bc:	d30c      	bcc.n	80204d8 <__adddf3+0x10c>
 80204be:	0849      	lsrs	r1, r1, #1
 80204c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80204c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80204c8:	f104 0401 	add.w	r4, r4, #1
 80204cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80204d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80204d4:	f080 809a 	bcs.w	802060c <__adddf3+0x240>
 80204d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80204dc:	bf08      	it	eq
 80204de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80204e2:	f150 0000 	adcs.w	r0, r0, #0
 80204e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80204ea:	ea41 0105 	orr.w	r1, r1, r5
 80204ee:	bd30      	pop	{r4, r5, pc}
 80204f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80204f4:	4140      	adcs	r0, r0
 80204f6:	eb41 0101 	adc.w	r1, r1, r1
 80204fa:	3c01      	subs	r4, #1
 80204fc:	bf28      	it	cs
 80204fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8020502:	d2e9      	bcs.n	80204d8 <__adddf3+0x10c>
 8020504:	f091 0f00 	teq	r1, #0
 8020508:	bf04      	itt	eq
 802050a:	4601      	moveq	r1, r0
 802050c:	2000      	moveq	r0, #0
 802050e:	fab1 f381 	clz	r3, r1
 8020512:	bf08      	it	eq
 8020514:	3320      	addeq	r3, #32
 8020516:	f1a3 030b 	sub.w	r3, r3, #11
 802051a:	f1b3 0220 	subs.w	r2, r3, #32
 802051e:	da0c      	bge.n	802053a <__adddf3+0x16e>
 8020520:	320c      	adds	r2, #12
 8020522:	dd08      	ble.n	8020536 <__adddf3+0x16a>
 8020524:	f102 0c14 	add.w	ip, r2, #20
 8020528:	f1c2 020c 	rsb	r2, r2, #12
 802052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020530:	fa21 f102 	lsr.w	r1, r1, r2
 8020534:	e00c      	b.n	8020550 <__adddf3+0x184>
 8020536:	f102 0214 	add.w	r2, r2, #20
 802053a:	bfd8      	it	le
 802053c:	f1c2 0c20 	rsble	ip, r2, #32
 8020540:	fa01 f102 	lsl.w	r1, r1, r2
 8020544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020548:	bfdc      	itt	le
 802054a:	ea41 010c 	orrle.w	r1, r1, ip
 802054e:	4090      	lslle	r0, r2
 8020550:	1ae4      	subs	r4, r4, r3
 8020552:	bfa2      	ittt	ge
 8020554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020558:	4329      	orrge	r1, r5
 802055a:	bd30      	popge	{r4, r5, pc}
 802055c:	ea6f 0404 	mvn.w	r4, r4
 8020560:	3c1f      	subs	r4, #31
 8020562:	da1c      	bge.n	802059e <__adddf3+0x1d2>
 8020564:	340c      	adds	r4, #12
 8020566:	dc0e      	bgt.n	8020586 <__adddf3+0x1ba>
 8020568:	f104 0414 	add.w	r4, r4, #20
 802056c:	f1c4 0220 	rsb	r2, r4, #32
 8020570:	fa20 f004 	lsr.w	r0, r0, r4
 8020574:	fa01 f302 	lsl.w	r3, r1, r2
 8020578:	ea40 0003 	orr.w	r0, r0, r3
 802057c:	fa21 f304 	lsr.w	r3, r1, r4
 8020580:	ea45 0103 	orr.w	r1, r5, r3
 8020584:	bd30      	pop	{r4, r5, pc}
 8020586:	f1c4 040c 	rsb	r4, r4, #12
 802058a:	f1c4 0220 	rsb	r2, r4, #32
 802058e:	fa20 f002 	lsr.w	r0, r0, r2
 8020592:	fa01 f304 	lsl.w	r3, r1, r4
 8020596:	ea40 0003 	orr.w	r0, r0, r3
 802059a:	4629      	mov	r1, r5
 802059c:	bd30      	pop	{r4, r5, pc}
 802059e:	fa21 f004 	lsr.w	r0, r1, r4
 80205a2:	4629      	mov	r1, r5
 80205a4:	bd30      	pop	{r4, r5, pc}
 80205a6:	f094 0f00 	teq	r4, #0
 80205aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80205ae:	bf06      	itte	eq
 80205b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80205b4:	3401      	addeq	r4, #1
 80205b6:	3d01      	subne	r5, #1
 80205b8:	e74e      	b.n	8020458 <__adddf3+0x8c>
 80205ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80205be:	bf18      	it	ne
 80205c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80205c4:	d029      	beq.n	802061a <__adddf3+0x24e>
 80205c6:	ea94 0f05 	teq	r4, r5
 80205ca:	bf08      	it	eq
 80205cc:	ea90 0f02 	teqeq	r0, r2
 80205d0:	d005      	beq.n	80205de <__adddf3+0x212>
 80205d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80205d6:	bf04      	itt	eq
 80205d8:	4619      	moveq	r1, r3
 80205da:	4610      	moveq	r0, r2
 80205dc:	bd30      	pop	{r4, r5, pc}
 80205de:	ea91 0f03 	teq	r1, r3
 80205e2:	bf1e      	ittt	ne
 80205e4:	2100      	movne	r1, #0
 80205e6:	2000      	movne	r0, #0
 80205e8:	bd30      	popne	{r4, r5, pc}
 80205ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80205ee:	d105      	bne.n	80205fc <__adddf3+0x230>
 80205f0:	0040      	lsls	r0, r0, #1
 80205f2:	4149      	adcs	r1, r1
 80205f4:	bf28      	it	cs
 80205f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80205fa:	bd30      	pop	{r4, r5, pc}
 80205fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8020600:	bf3c      	itt	cc
 8020602:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8020606:	bd30      	popcc	{r4, r5, pc}
 8020608:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 802060c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8020610:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8020614:	f04f 0000 	mov.w	r0, #0
 8020618:	bd30      	pop	{r4, r5, pc}
 802061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802061e:	bf1a      	itte	ne
 8020620:	4619      	movne	r1, r3
 8020622:	4610      	movne	r0, r2
 8020624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020628:	bf1c      	itt	ne
 802062a:	460b      	movne	r3, r1
 802062c:	4602      	movne	r2, r0
 802062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020632:	bf06      	itte	eq
 8020634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020638:	ea91 0f03 	teqeq	r1, r3
 802063c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8020640:	bd30      	pop	{r4, r5, pc}
 8020642:	bf00      	nop

08020644 <__aeabi_ui2d>:
 8020644:	f090 0f00 	teq	r0, #0
 8020648:	bf04      	itt	eq
 802064a:	2100      	moveq	r1, #0
 802064c:	4770      	bxeq	lr
 802064e:	b530      	push	{r4, r5, lr}
 8020650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020658:	f04f 0500 	mov.w	r5, #0
 802065c:	f04f 0100 	mov.w	r1, #0
 8020660:	e750      	b.n	8020504 <__adddf3+0x138>
 8020662:	bf00      	nop

08020664 <__aeabi_i2d>:
 8020664:	f090 0f00 	teq	r0, #0
 8020668:	bf04      	itt	eq
 802066a:	2100      	moveq	r1, #0
 802066c:	4770      	bxeq	lr
 802066e:	b530      	push	{r4, r5, lr}
 8020670:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8020674:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8020678:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 802067c:	bf48      	it	mi
 802067e:	4240      	negmi	r0, r0
 8020680:	f04f 0100 	mov.w	r1, #0
 8020684:	e73e      	b.n	8020504 <__adddf3+0x138>
 8020686:	bf00      	nop

08020688 <__aeabi_f2d>:
 8020688:	0042      	lsls	r2, r0, #1
 802068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020696:	bf1f      	itttt	ne
 8020698:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 802069c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80206a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80206a4:	4770      	bxne	lr
 80206a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80206aa:	bf08      	it	eq
 80206ac:	4770      	bxeq	lr
 80206ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80206b2:	bf04      	itt	eq
 80206b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80206b8:	4770      	bxeq	lr
 80206ba:	b530      	push	{r4, r5, lr}
 80206bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80206c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80206c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80206c8:	e71c      	b.n	8020504 <__adddf3+0x138>
 80206ca:	bf00      	nop

080206cc <__aeabi_ul2d>:
 80206cc:	ea50 0201 	orrs.w	r2, r0, r1
 80206d0:	bf08      	it	eq
 80206d2:	4770      	bxeq	lr
 80206d4:	b530      	push	{r4, r5, lr}
 80206d6:	f04f 0500 	mov.w	r5, #0
 80206da:	e00a      	b.n	80206f2 <__aeabi_l2d+0x16>

080206dc <__aeabi_l2d>:
 80206dc:	ea50 0201 	orrs.w	r2, r0, r1
 80206e0:	bf08      	it	eq
 80206e2:	4770      	bxeq	lr
 80206e4:	b530      	push	{r4, r5, lr}
 80206e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80206ea:	d502      	bpl.n	80206f2 <__aeabi_l2d+0x16>
 80206ec:	4240      	negs	r0, r0
 80206ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80206f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80206f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80206fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80206fe:	f43f aed8 	beq.w	80204b2 <__adddf3+0xe6>
 8020702:	f04f 0203 	mov.w	r2, #3
 8020706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 802070a:	bf18      	it	ne
 802070c:	3203      	addne	r2, #3
 802070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020712:	bf18      	it	ne
 8020714:	3203      	addne	r2, #3
 8020716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802071a:	f1c2 0320 	rsb	r3, r2, #32
 802071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020722:	fa20 f002 	lsr.w	r0, r0, r2
 8020726:	fa01 fe03 	lsl.w	lr, r1, r3
 802072a:	ea40 000e 	orr.w	r0, r0, lr
 802072e:	fa21 f102 	lsr.w	r1, r1, r2
 8020732:	4414      	add	r4, r2
 8020734:	e6bd      	b.n	80204b2 <__adddf3+0xe6>
 8020736:	bf00      	nop

08020738 <__aeabi_d2lz>:
 8020738:	b508      	push	{r3, lr}
 802073a:	4602      	mov	r2, r0
 802073c:	460b      	mov	r3, r1
 802073e:	ec43 2b17 	vmov	d7, r2, r3
 8020742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8020746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802074a:	d403      	bmi.n	8020754 <__aeabi_d2lz+0x1c>
 802074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020750:	f000 b80a 	b.w	8020768 <__aeabi_d2ulz>
 8020754:	eeb1 7b47 	vneg.f64	d7, d7
 8020758:	ec51 0b17 	vmov	r0, r1, d7
 802075c:	f000 f804 	bl	8020768 <__aeabi_d2ulz>
 8020760:	4240      	negs	r0, r0
 8020762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8020766:	bd08      	pop	{r3, pc}

08020768 <__aeabi_d2ulz>:
 8020768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8020798 <__aeabi_d2ulz+0x30>
 802076c:	ec41 0b17 	vmov	d7, r0, r1
 8020770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80207a0 <__aeabi_d2ulz+0x38>
 8020774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8020778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 802077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8020780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8020784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8020788:	ee16 1a10 	vmov	r1, s12
 802078c:	ee17 0a90 	vmov	r0, s15
 8020790:	4770      	bx	lr
 8020792:	bf00      	nop
 8020794:	f3af 8000 	nop.w
 8020798:	00000000 	.word	0x00000000
 802079c:	3df00000 	.word	0x3df00000
 80207a0:	00000000 	.word	0x00000000
 80207a4:	41f00000 	.word	0x41f00000

080207a8 <ISM330_Map>:
#include "ISM330ISN.h"

#include "ISM330ISN_Config.h"

static float ISM330_Map(float x, float in_min, float in_max, float out_min, float out_max)
{
 80207a8:	b480      	push	{r7}
 80207aa:	b087      	sub	sp, #28
 80207ac:	af00      	add	r7, sp, #0
 80207ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80207b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80207b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80207ba:	edc7 1a02 	vstr	s3, [r7, #8]
 80207be:	ed87 2a01 	vstr	s4, [r7, #4]
   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80207c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80207c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80207ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80207ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80207d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80207d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80207da:	ee67 6a27 	vmul.f32	s13, s14, s15
 80207de:	ed97 7a03 	vldr	s14, [r7, #12]
 80207e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80207e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80207ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80207ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80207f2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80207f6:	eeb0 0a67 	vmov.f32	s0, s15
 80207fa:	371c      	adds	r7, #28
 80207fc:	46bd      	mov	sp, r7
 80207fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020802:	4770      	bx	lr

08020804 <ISM_WriteDataToRegister>:

static void ISM_WriteDataToRegister(uint8_t *Data, uint8_t Size)
{
 8020804:	b580      	push	{r7, lr}
 8020806:	b082      	sub	sp, #8
 8020808:	af00      	add	r7, sp, #0
 802080a:	6078      	str	r0, [r7, #4]
 802080c:	460b      	mov	r3, r1
 802080e:	70fb      	strb	r3, [r7, #3]
   ISM_CS_Low();
 8020810:	f000 fab0 	bl	8020d74 <ISM_CS_Low>
   Data[0] &= 0x7F;
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	781b      	ldrb	r3, [r3, #0]
 8020818:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 802081c:	b2da      	uxtb	r2, r3
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	701a      	strb	r2, [r3, #0]
   ISM_WriteData(Data, Size);
 8020822:	78fb      	ldrb	r3, [r7, #3]
 8020824:	4619      	mov	r1, r3
 8020826:	6878      	ldr	r0, [r7, #4]
 8020828:	f000 fa6c 	bl	8020d04 <ISM_Write>
   ISM_CS_High();
 802082c:	f000 fa96 	bl	8020d5c <ISM_CS_High>
}
 8020830:	bf00      	nop
 8020832:	3708      	adds	r7, #8
 8020834:	46bd      	mov	sp, r7
 8020836:	bd80      	pop	{r7, pc}

08020838 <ISM_ReadDataFromRegister>:
static void ISM_ReadDataFromRegister(uint8_t *DataOut, uint8_t *DataIn, uint8_t Size)
{
 8020838:	b580      	push	{r7, lr}
 802083a:	b084      	sub	sp, #16
 802083c:	af00      	add	r7, sp, #0
 802083e:	60f8      	str	r0, [r7, #12]
 8020840:	60b9      	str	r1, [r7, #8]
 8020842:	4613      	mov	r3, r2
 8020844:	71fb      	strb	r3, [r7, #7]
   ISM_CS_Low();
 8020846:	f000 fa95 	bl	8020d74 <ISM_CS_Low>
   DataOut[0] |= 0x80;
 802084a:	68fb      	ldr	r3, [r7, #12]
 802084c:	781b      	ldrb	r3, [r3, #0]
 802084e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8020852:	b2da      	uxtb	r2, r3
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	701a      	strb	r2, [r3, #0]
   ISM_TransmitReceiveData(DataOut, DataIn, Size);
 8020858:	79fb      	ldrb	r3, [r7, #7]
 802085a:	461a      	mov	r2, r3
 802085c:	68b9      	ldr	r1, [r7, #8]
 802085e:	68f8      	ldr	r0, [r7, #12]
 8020860:	f000 fa64 	bl	8020d2c <ISM_TransmitReceive>
   ISM_CS_High();
 8020864:	f000 fa7a 	bl	8020d5c <ISM_CS_High>
}
 8020868:	bf00      	nop
 802086a:	3710      	adds	r7, #16
 802086c:	46bd      	mov	sp, r7
 802086e:	bd80      	pop	{r7, pc}

08020870 <ISM330_CalculateAcc>:
static void ISM330_CalculateAcc(ISM_TypeDef *ISM, uint8_t *Data)
{
 8020870:	b580      	push	{r7, lr}
 8020872:	b084      	sub	sp, #16
 8020874:	af00      	add	r7, sp, #0
 8020876:	6078      	str	r0, [r7, #4]
 8020878:	6039      	str	r1, [r7, #0]
   int16_t X = (int16_t)(Data[1] | (Data[2] << 8));
 802087a:	683b      	ldr	r3, [r7, #0]
 802087c:	3301      	adds	r3, #1
 802087e:	781b      	ldrb	r3, [r3, #0]
 8020880:	b21a      	sxth	r2, r3
 8020882:	683b      	ldr	r3, [r7, #0]
 8020884:	3302      	adds	r3, #2
 8020886:	781b      	ldrb	r3, [r3, #0]
 8020888:	021b      	lsls	r3, r3, #8
 802088a:	b21b      	sxth	r3, r3
 802088c:	4313      	orrs	r3, r2
 802088e:	81fb      	strh	r3, [r7, #14]
   int16_t Y = (int16_t)(Data[3] | (Data[4] << 8));
 8020890:	683b      	ldr	r3, [r7, #0]
 8020892:	3303      	adds	r3, #3
 8020894:	781b      	ldrb	r3, [r3, #0]
 8020896:	b21a      	sxth	r2, r3
 8020898:	683b      	ldr	r3, [r7, #0]
 802089a:	3304      	adds	r3, #4
 802089c:	781b      	ldrb	r3, [r3, #0]
 802089e:	021b      	lsls	r3, r3, #8
 80208a0:	b21b      	sxth	r3, r3
 80208a2:	4313      	orrs	r3, r2
 80208a4:	81bb      	strh	r3, [r7, #12]
   int16_t Z = (int16_t)(Data[5] | (Data[6] << 8));
 80208a6:	683b      	ldr	r3, [r7, #0]
 80208a8:	3305      	adds	r3, #5
 80208aa:	781b      	ldrb	r3, [r3, #0]
 80208ac:	b21a      	sxth	r2, r3
 80208ae:	683b      	ldr	r3, [r7, #0]
 80208b0:	3306      	adds	r3, #6
 80208b2:	781b      	ldrb	r3, [r3, #0]
 80208b4:	021b      	lsls	r3, r3, #8
 80208b6:	b21b      	sxth	r3, r3
 80208b8:	4313      	orrs	r3, r2
 80208ba:	817b      	strh	r3, [r7, #10]
   ISM->AccX = ISM330_Map(X, -32764, 32764, -4, 4);
 80208bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80208c0:	ee07 3a90 	vmov	s15, r3
 80208c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208c8:	eeb1 2a00 	vmov.f32	s4, #16	@ 0x40800000  4.0
 80208cc:	eef9 1a00 	vmov.f32	s3, #144	@ 0xc0800000 -4.0
 80208d0:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8020950 <ISM330_CalculateAcc+0xe0>
 80208d4:	eddf 0a1f 	vldr	s1, [pc, #124]	@ 8020954 <ISM330_CalculateAcc+0xe4>
 80208d8:	eeb0 0a67 	vmov.f32	s0, s15
 80208dc:	f7ff ff64 	bl	80207a8 <ISM330_Map>
 80208e0:	eef0 7a40 	vmov.f32	s15, s0
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	edc3 7a00 	vstr	s15, [r3]
   ISM->AccY = ISM330_Map(Y, -32764, 32764, -4, 4);
 80208ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80208ee:	ee07 3a90 	vmov	s15, r3
 80208f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80208f6:	eeb1 2a00 	vmov.f32	s4, #16	@ 0x40800000  4.0
 80208fa:	eef9 1a00 	vmov.f32	s3, #144	@ 0xc0800000 -4.0
 80208fe:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8020950 <ISM330_CalculateAcc+0xe0>
 8020902:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8020954 <ISM330_CalculateAcc+0xe4>
 8020906:	eeb0 0a67 	vmov.f32	s0, s15
 802090a:	f7ff ff4d 	bl	80207a8 <ISM330_Map>
 802090e:	eef0 7a40 	vmov.f32	s15, s0
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	edc3 7a01 	vstr	s15, [r3, #4]
   ISM->AccZ = ISM330_Map(Z, -32764, 32764, -4, 4);
 8020918:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 802091c:	ee07 3a90 	vmov	s15, r3
 8020920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020924:	eeb1 2a00 	vmov.f32	s4, #16	@ 0x40800000  4.0
 8020928:	eef9 1a00 	vmov.f32	s3, #144	@ 0xc0800000 -4.0
 802092c:	ed9f 1a08 	vldr	s2, [pc, #32]	@ 8020950 <ISM330_CalculateAcc+0xe0>
 8020930:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8020954 <ISM330_CalculateAcc+0xe4>
 8020934:	eeb0 0a67 	vmov.f32	s0, s15
 8020938:	f7ff ff36 	bl	80207a8 <ISM330_Map>
 802093c:	eef0 7a40 	vmov.f32	s15, s0
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8020946:	bf00      	nop
 8020948:	3710      	adds	r7, #16
 802094a:	46bd      	mov	sp, r7
 802094c:	bd80      	pop	{r7, pc}
 802094e:	bf00      	nop
 8020950:	46fff800 	.word	0x46fff800
 8020954:	c6fff800 	.word	0xc6fff800

08020958 <ISM330_CalculateGyro>:
static void ISM330_CalculateGyro(ISM_TypeDef *ISM, uint8_t *Data)
{
 8020958:	b480      	push	{r7}
 802095a:	b083      	sub	sp, #12
 802095c:	af00      	add	r7, sp, #0
 802095e:	6078      	str	r0, [r7, #4]
 8020960:	6039      	str	r1, [r7, #0]
   ISM->GX = (float)(int16_t)(Data[0] | (Data[1] << 8));
 8020962:	683b      	ldr	r3, [r7, #0]
 8020964:	781b      	ldrb	r3, [r3, #0]
 8020966:	b21a      	sxth	r2, r3
 8020968:	683b      	ldr	r3, [r7, #0]
 802096a:	3301      	adds	r3, #1
 802096c:	781b      	ldrb	r3, [r3, #0]
 802096e:	021b      	lsls	r3, r3, #8
 8020970:	b21b      	sxth	r3, r3
 8020972:	4313      	orrs	r3, r2
 8020974:	b21b      	sxth	r3, r3
 8020976:	ee07 3a90 	vmov	s15, r3
 802097a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	edc3 7a03 	vstr	s15, [r3, #12]
   ISM->GY = (float)(int16_t)(Data[2] | (Data[3] << 8));
 8020984:	683b      	ldr	r3, [r7, #0]
 8020986:	3302      	adds	r3, #2
 8020988:	781b      	ldrb	r3, [r3, #0]
 802098a:	b21a      	sxth	r2, r3
 802098c:	683b      	ldr	r3, [r7, #0]
 802098e:	3303      	adds	r3, #3
 8020990:	781b      	ldrb	r3, [r3, #0]
 8020992:	021b      	lsls	r3, r3, #8
 8020994:	b21b      	sxth	r3, r3
 8020996:	4313      	orrs	r3, r2
 8020998:	b21b      	sxth	r3, r3
 802099a:	ee07 3a90 	vmov	s15, r3
 802099e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209a2:	687b      	ldr	r3, [r7, #4]
 80209a4:	edc3 7a04 	vstr	s15, [r3, #16]
   ISM->GZ = (float)(int16_t)(Data[4] | (Data[5] << 8));
 80209a8:	683b      	ldr	r3, [r7, #0]
 80209aa:	3304      	adds	r3, #4
 80209ac:	781b      	ldrb	r3, [r3, #0]
 80209ae:	b21a      	sxth	r2, r3
 80209b0:	683b      	ldr	r3, [r7, #0]
 80209b2:	3305      	adds	r3, #5
 80209b4:	781b      	ldrb	r3, [r3, #0]
 80209b6:	021b      	lsls	r3, r3, #8
 80209b8:	b21b      	sxth	r3, r3
 80209ba:	4313      	orrs	r3, r2
 80209bc:	b21b      	sxth	r3, r3
 80209be:	ee07 3a90 	vmov	s15, r3
 80209c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80209cc:	bf00      	nop
 80209ce:	370c      	adds	r7, #12
 80209d0:	46bd      	mov	sp, r7
 80209d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209d6:	4770      	bx	lr

080209d8 <ISM330ISN_Init>:
void ISM330ISN_Init(void)
{
 80209d8:	b580      	push	{r7, lr}
 80209da:	b084      	sub	sp, #16
 80209dc:	af00      	add	r7, sp, #0
   uint8_t RegisterOut[2] = { ISM330_REG_WHU_AM_I, 0 };
 80209de:	230f      	movs	r3, #15
 80209e0:	81bb      	strh	r3, [r7, #12]
   uint8_t RegisterIn[2]  = { 0 };
 80209e2:	2300      	movs	r3, #0
 80209e4:	813b      	strh	r3, [r7, #8]
   ISM_ReadDataFromRegister(RegisterOut, RegisterIn, 2);
 80209e6:	f107 0108 	add.w	r1, r7, #8
 80209ea:	f107 030c 	add.w	r3, r7, #12
 80209ee:	2202      	movs	r2, #2
 80209f0:	4618      	mov	r0, r3
 80209f2:	f7ff ff21 	bl	8020838 <ISM_ReadDataFromRegister>
   uint8_t Data[2] = { ISM330_REG_CTRL1_XL, 0b10111000 };
 80209f6:	f64b 0310 	movw	r3, #47120	@ 0xb810
 80209fa:	80bb      	strh	r3, [r7, #4]
   ISM_WriteDataToRegister(Data, 2);
 80209fc:	1d3b      	adds	r3, r7, #4
 80209fe:	2102      	movs	r1, #2
 8020a00:	4618      	mov	r0, r3
 8020a02:	f7ff feff 	bl	8020804 <ISM_WriteDataToRegister>
   Data[0] = ISM330_REG_CTRL2_G;
 8020a06:	2311      	movs	r3, #17
 8020a08:	713b      	strb	r3, [r7, #4]
   Data[1] = 0b00010000;
 8020a0a:	2310      	movs	r3, #16
 8020a0c:	717b      	strb	r3, [r7, #5]
   ISM_WriteDataToRegister(Data, 2);
 8020a0e:	1d3b      	adds	r3, r7, #4
 8020a10:	2102      	movs	r1, #2
 8020a12:	4618      	mov	r0, r3
 8020a14:	f7ff fef6 	bl	8020804 <ISM_WriteDataToRegister>
}
 8020a18:	bf00      	nop
 8020a1a:	3710      	adds	r7, #16
 8020a1c:	46bd      	mov	sp, r7
 8020a1e:	bd80      	pop	{r7, pc}

08020a20 <ISM330ISN_Hanler>:
void ISM330ISN_Hanler(ISM_TypeDef *ISM)
{
 8020a20:	b580      	push	{r7, lr}
 8020a22:	b08c      	sub	sp, #48	@ 0x30
 8020a24:	af00      	add	r7, sp, #0
 8020a26:	6078      	str	r0, [r7, #4]
   uint8_t DataOut[2] = { ISM330_REG_STATUS_REG, 0 };
 8020a28:	231e      	movs	r3, #30
 8020a2a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   uint8_t DataIn[2]  = { 0 };
 8020a2c:	2300      	movs	r3, #0
 8020a2e:	853b      	strh	r3, [r7, #40]	@ 0x28
   ISM_ReadDataFromRegister(DataOut, DataIn, 2);
 8020a30:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8020a34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8020a38:	2202      	movs	r2, #2
 8020a3a:	4618      	mov	r0, r3
 8020a3c:	f7ff fefc 	bl	8020838 <ISM_ReadDataFromRegister>
   if((DataIn[1] & ISM330_ACC_DRDY_MASK) != 0)
 8020a40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8020a44:	f003 0301 	and.w	r3, r3, #1
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	d021      	beq.n	8020a90 <ISM330ISN_Hanler+0x70>
   {
      uint8_t AccDataOut[7] = { ISM330_REG_OUTX_L_A, 0, 0, 0, 0, 0, 0 };
 8020a4c:	4a26      	ldr	r2, [pc, #152]	@ (8020ae8 <ISM330ISN_Hanler+0xc8>)
 8020a4e:	f107 0320 	add.w	r3, r7, #32
 8020a52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020a56:	6018      	str	r0, [r3, #0]
 8020a58:	3304      	adds	r3, #4
 8020a5a:	8019      	strh	r1, [r3, #0]
 8020a5c:	3302      	adds	r3, #2
 8020a5e:	0c0a      	lsrs	r2, r1, #16
 8020a60:	701a      	strb	r2, [r3, #0]
      uint8_t AccDataIn[7]  = { 0 };
 8020a62:	2300      	movs	r3, #0
 8020a64:	61bb      	str	r3, [r7, #24]
 8020a66:	f107 031c 	add.w	r3, r7, #28
 8020a6a:	2100      	movs	r1, #0
 8020a6c:	460a      	mov	r2, r1
 8020a6e:	801a      	strh	r2, [r3, #0]
 8020a70:	460a      	mov	r2, r1
 8020a72:	709a      	strb	r2, [r3, #2]
      ISM_ReadDataFromRegister(AccDataOut, AccDataIn, 7);
 8020a74:	f107 0118 	add.w	r1, r7, #24
 8020a78:	f107 0320 	add.w	r3, r7, #32
 8020a7c:	2207      	movs	r2, #7
 8020a7e:	4618      	mov	r0, r3
 8020a80:	f7ff feda 	bl	8020838 <ISM_ReadDataFromRegister>
      ISM330_CalculateAcc(ISM, AccDataIn);
 8020a84:	f107 0318 	add.w	r3, r7, #24
 8020a88:	4619      	mov	r1, r3
 8020a8a:	6878      	ldr	r0, [r7, #4]
 8020a8c:	f7ff fef0 	bl	8020870 <ISM330_CalculateAcc>
   }
   if((DataIn[1] & ISM330_GYRO_DRDY_MASK) != 0)
 8020a90:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8020a94:	f003 0302 	and.w	r3, r3, #2
 8020a98:	2b00      	cmp	r3, #0
 8020a9a:	d021      	beq.n	8020ae0 <ISM330ISN_Hanler+0xc0>
   {
      uint8_t MagDataOut[7] = { ISM330_REG_OUTX_L_G, 0, 0, 0, 0, 0, 0 };
 8020a9c:	4a13      	ldr	r2, [pc, #76]	@ (8020aec <ISM330ISN_Hanler+0xcc>)
 8020a9e:	f107 0310 	add.w	r3, r7, #16
 8020aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020aa6:	6018      	str	r0, [r3, #0]
 8020aa8:	3304      	adds	r3, #4
 8020aaa:	8019      	strh	r1, [r3, #0]
 8020aac:	3302      	adds	r3, #2
 8020aae:	0c0a      	lsrs	r2, r1, #16
 8020ab0:	701a      	strb	r2, [r3, #0]
      uint8_t MagDataIn[7]  = { 0 };
 8020ab2:	2300      	movs	r3, #0
 8020ab4:	60bb      	str	r3, [r7, #8]
 8020ab6:	f107 030c 	add.w	r3, r7, #12
 8020aba:	2100      	movs	r1, #0
 8020abc:	460a      	mov	r2, r1
 8020abe:	801a      	strh	r2, [r3, #0]
 8020ac0:	460a      	mov	r2, r1
 8020ac2:	709a      	strb	r2, [r3, #2]
      ISM_ReadDataFromRegister(MagDataOut, MagDataIn, 7);
 8020ac4:	f107 0108 	add.w	r1, r7, #8
 8020ac8:	f107 0310 	add.w	r3, r7, #16
 8020acc:	2207      	movs	r2, #7
 8020ace:	4618      	mov	r0, r3
 8020ad0:	f7ff feb2 	bl	8020838 <ISM_ReadDataFromRegister>
      ISM330_CalculateGyro(ISM, MagDataIn);
 8020ad4:	f107 0308 	add.w	r3, r7, #8
 8020ad8:	4619      	mov	r1, r3
 8020ada:	6878      	ldr	r0, [r7, #4]
 8020adc:	f7ff ff3c 	bl	8020958 <ISM330_CalculateGyro>
   }
}
 8020ae0:	bf00      	nop
 8020ae2:	3730      	adds	r7, #48	@ 0x30
 8020ae4:	46bd      	mov	sp, r7
 8020ae6:	bd80      	pop	{r7, pc}
 8020ae8:	08029890 	.word	0x08029890
 8020aec:	08029898 	.word	0x08029898

08020af0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8020af0:	b580      	push	{r7, lr}
 8020af2:	b08c      	sub	sp, #48	@ 0x30
 8020af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020af6:	f107 031c 	add.w	r3, r7, #28
 8020afa:	2200      	movs	r2, #0
 8020afc:	601a      	str	r2, [r3, #0]
 8020afe:	605a      	str	r2, [r3, #4]
 8020b00:	609a      	str	r2, [r3, #8]
 8020b02:	60da      	str	r2, [r3, #12]
 8020b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8020b06:	4b38      	ldr	r3, [pc, #224]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b0c:	4a36      	ldr	r2, [pc, #216]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8020b16:	4b34      	ldr	r3, [pc, #208]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020b20:	61bb      	str	r3, [r7, #24]
 8020b22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020b24:	4b30      	ldr	r3, [pc, #192]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b2a:	4a2f      	ldr	r2, [pc, #188]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b2c:	f043 0301 	orr.w	r3, r3, #1
 8020b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8020b34:	4b2c      	ldr	r3, [pc, #176]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b3a:	f003 0301 	and.w	r3, r3, #1
 8020b3e:	617b      	str	r3, [r7, #20]
 8020b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020b42:	4b29      	ldr	r3, [pc, #164]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b48:	4a27      	ldr	r2, [pc, #156]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b4a:	f043 0302 	orr.w	r3, r3, #2
 8020b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8020b52:	4b25      	ldr	r3, [pc, #148]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b58:	f003 0302 	and.w	r3, r3, #2
 8020b5c:	613b      	str	r3, [r7, #16]
 8020b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8020b60:	4b21      	ldr	r3, [pc, #132]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b66:	4a20      	ldr	r2, [pc, #128]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b68:	f043 0310 	orr.w	r3, r3, #16
 8020b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8020b70:	4b1d      	ldr	r3, [pc, #116]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b76:	f003 0310 	and.w	r3, r3, #16
 8020b7a:	60fb      	str	r3, [r7, #12]
 8020b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8020b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b84:	4a18      	ldr	r2, [pc, #96]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b86:	f043 0304 	orr.w	r3, r3, #4
 8020b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8020b8e:	4b16      	ldr	r3, [pc, #88]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020b94:	f003 0304 	and.w	r3, r3, #4
 8020b98:	60bb      	str	r3, [r7, #8]
 8020b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8020b9c:	4b12      	ldr	r3, [pc, #72]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020ba2:	4a11      	ldr	r2, [pc, #68]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020ba4:	f043 0308 	orr.w	r3, r3, #8
 8020ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8020bac:	4b0e      	ldr	r3, [pc, #56]	@ (8020be8 <MX_GPIO_Init+0xf8>)
 8020bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020bb2:	f003 0308 	and.w	r3, r3, #8
 8020bb6:	607b      	str	r3, [r7, #4]
 8020bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM330_CS_GPIO_Port, ISM330_CS_Pin, GPIO_PIN_SET);
 8020bba:	2201      	movs	r2, #1
 8020bbc:	2101      	movs	r1, #1
 8020bbe:	480b      	ldr	r0, [pc, #44]	@ (8020bec <MX_GPIO_Init+0xfc>)
 8020bc0:	f001 f88c 	bl	8021cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ISM330_CS_Pin */
  GPIO_InitStruct.Pin = ISM330_CS_Pin;
 8020bc4:	2301      	movs	r3, #1
 8020bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8020bc8:	2301      	movs	r3, #1
 8020bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020bcc:	2300      	movs	r3, #0
 8020bce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020bd0:	2303      	movs	r3, #3
 8020bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ISM330_CS_GPIO_Port, &GPIO_InitStruct);
 8020bd4:	f107 031c 	add.w	r3, r7, #28
 8020bd8:	4619      	mov	r1, r3
 8020bda:	4804      	ldr	r0, [pc, #16]	@ (8020bec <MX_GPIO_Init+0xfc>)
 8020bdc:	f000 fdd4 	bl	8021788 <HAL_GPIO_Init>

}
 8020be0:	bf00      	nop
 8020be2:	3730      	adds	r7, #48	@ 0x30
 8020be4:	46bd      	mov	sp, r7
 8020be6:	bd80      	pop	{r7, pc}
 8020be8:	58024400 	.word	0x58024400
 8020bec:	58020c00 	.word	0x58020c00

08020bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020bf0:	b580      	push	{r7, lr}
 8020bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8020bf4:	f000 f8ca 	bl	8020d8c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020bf8:	f000 fbd8 	bl	80213ac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020bfc:	f000 f814 	bl	8020c28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
   HAL_OSPI_Abort(&hospi1);
 8020c00:	4807      	ldr	r0, [pc, #28]	@ (8020c20 <main+0x30>)
 8020c02:	f001 f906 	bl	8021e12 <HAL_OSPI_Abort>
   HAL_OSPI_DeInit(&hospi1);
 8020c06:	4806      	ldr	r0, [pc, #24]	@ (8020c20 <main+0x30>)
 8020c08:	f001 f8dc 	bl	8021dc4 <HAL_OSPI_DeInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020c0c:	f7ff ff70 	bl	8020af0 <MX_GPIO_Init>
 // MX_OCTOSPI1_Init();
  MX_SPI3_Init();
 8020c10:	f000 f934 	bl	8020e7c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
   ISM330ISN_Init();
 8020c14:	f7ff fee0 	bl	80209d8 <ISM330ISN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while(1)
   {
      ISM330ISN_Hanler(&Ism);
 8020c18:	4802      	ldr	r0, [pc, #8]	@ (8020c24 <main+0x34>)
 8020c1a:	f7ff ff01 	bl	8020a20 <ISM330ISN_Hanler>
 8020c1e:	e7fb      	b.n	8020c18 <main+0x28>
 8020c20:	240001f4 	.word	0x240001f4
 8020c24:	90000000 	.word	0x90000000

08020c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8020c28:	b580      	push	{r7, lr}
 8020c2a:	b09c      	sub	sp, #112	@ 0x70
 8020c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8020c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020c32:	224c      	movs	r2, #76	@ 0x4c
 8020c34:	2100      	movs	r1, #0
 8020c36:	4618      	mov	r0, r3
 8020c38:	f005 fb07 	bl	802624a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8020c3c:	1d3b      	adds	r3, r7, #4
 8020c3e:	2220      	movs	r2, #32
 8020c40:	2100      	movs	r1, #0
 8020c42:	4618      	mov	r0, r3
 8020c44:	f005 fb01 	bl	802624a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8020c48:	2004      	movs	r0, #4
 8020c4a:	f001 f98f 	bl	8021f6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8020c4e:	2300      	movs	r3, #0
 8020c50:	603b      	str	r3, [r7, #0]
 8020c52:	4b2b      	ldr	r3, [pc, #172]	@ (8020d00 <SystemClock_Config+0xd8>)
 8020c54:	699b      	ldr	r3, [r3, #24]
 8020c56:	4a2a      	ldr	r2, [pc, #168]	@ (8020d00 <SystemClock_Config+0xd8>)
 8020c58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8020c5c:	6193      	str	r3, [r2, #24]
 8020c5e:	4b28      	ldr	r3, [pc, #160]	@ (8020d00 <SystemClock_Config+0xd8>)
 8020c60:	699b      	ldr	r3, [r3, #24]
 8020c62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8020c66:	603b      	str	r3, [r7, #0]
 8020c68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8020c6a:	bf00      	nop
 8020c6c:	4b24      	ldr	r3, [pc, #144]	@ (8020d00 <SystemClock_Config+0xd8>)
 8020c6e:	699b      	ldr	r3, [r3, #24]
 8020c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020c78:	d1f8      	bne.n	8020c6c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8020c7a:	2302      	movs	r3, #2
 8020c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8020c7e:	2301      	movs	r3, #1
 8020c80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8020c82:	2340      	movs	r3, #64	@ 0x40
 8020c84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8020c86:	2302      	movs	r3, #2
 8020c88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8020c8e:	2304      	movs	r3, #4
 8020c90:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8020c92:	230c      	movs	r3, #12
 8020c94:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8020c96:	2301      	movs	r3, #1
 8020c98:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8020c9a:	2302      	movs	r3, #2
 8020c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8020c9e:	2302      	movs	r3, #2
 8020ca0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8020ca2:	230c      	movs	r3, #12
 8020ca4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8020caa:	2300      	movs	r3, #0
 8020cac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020cb2:	4618      	mov	r0, r3
 8020cb4:	f001 f9b4 	bl	8022020 <HAL_RCC_OscConfig>
 8020cb8:	4603      	mov	r3, r0
 8020cba:	2b00      	cmp	r3, #0
 8020cbc:	d001      	beq.n	8020cc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8020cbe:	f000 f8a2 	bl	8020e06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8020cc2:	233f      	movs	r3, #63	@ 0x3f
 8020cc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8020cc6:	2303      	movs	r3, #3
 8020cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8020cca:	2300      	movs	r3, #0
 8020ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8020cce:	2300      	movs	r3, #0
 8020cd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8020cd2:	2340      	movs	r3, #64	@ 0x40
 8020cd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8020cd6:	2340      	movs	r3, #64	@ 0x40
 8020cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8020cda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8020cde:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8020ce0:	2340      	movs	r3, #64	@ 0x40
 8020ce2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8020ce4:	1d3b      	adds	r3, r7, #4
 8020ce6:	2102      	movs	r1, #2
 8020ce8:	4618      	mov	r0, r3
 8020cea:	f001 fd73 	bl	80227d4 <HAL_RCC_ClockConfig>
 8020cee:	4603      	mov	r3, r0
 8020cf0:	2b00      	cmp	r3, #0
 8020cf2:	d001      	beq.n	8020cf8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8020cf4:	f000 f887 	bl	8020e06 <Error_Handler>
  }
}
 8020cf8:	bf00      	nop
 8020cfa:	3770      	adds	r7, #112	@ 0x70
 8020cfc:	46bd      	mov	sp, r7
 8020cfe:	bd80      	pop	{r7, pc}
 8020d00:	58024800 	.word	0x58024800

08020d04 <ISM_Write>:

/* USER CODE BEGIN 4 */
void ISM_Write(uint8_t *Data, uint8_t Size)
{
 8020d04:	b580      	push	{r7, lr}
 8020d06:	b082      	sub	sp, #8
 8020d08:	af00      	add	r7, sp, #0
 8020d0a:	6078      	str	r0, [r7, #4]
 8020d0c:	460b      	mov	r3, r1
 8020d0e:	70fb      	strb	r3, [r7, #3]
   HAL_SPI_Transmit(&hspi3, Data, Size, 1000);
 8020d10:	78fb      	ldrb	r3, [r7, #3]
 8020d12:	b29a      	uxth	r2, r3
 8020d14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020d18:	6879      	ldr	r1, [r7, #4]
 8020d1a:	4803      	ldr	r0, [pc, #12]	@ (8020d28 <ISM_Write+0x24>)
 8020d1c:	f003 fcb2 	bl	8024684 <HAL_SPI_Transmit>
}
 8020d20:	bf00      	nop
 8020d22:	3708      	adds	r7, #8
 8020d24:	46bd      	mov	sp, r7
 8020d26:	bd80      	pop	{r7, pc}
 8020d28:	24000250 	.word	0x24000250

08020d2c <ISM_TransmitReceive>:
void ISM_Receive(uint8_t *Data, uint8_t Size)
{
   HAL_SPI_Receive(&hspi3, Data, Size, 1000);
}
void ISM_TransmitReceive(uint8_t *DataOut, uint8_t *DataIn, uint8_t Size)
{
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	b086      	sub	sp, #24
 8020d30:	af02      	add	r7, sp, #8
 8020d32:	60f8      	str	r0, [r7, #12]
 8020d34:	60b9      	str	r1, [r7, #8]
 8020d36:	4613      	mov	r3, r2
 8020d38:	71fb      	strb	r3, [r7, #7]
   HAL_SPI_TransmitReceive(&hspi3, DataOut, DataIn, Size, 1000);
 8020d3a:	79fb      	ldrb	r3, [r7, #7]
 8020d3c:	b29b      	uxth	r3, r3
 8020d3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020d42:	9200      	str	r2, [sp, #0]
 8020d44:	68ba      	ldr	r2, [r7, #8]
 8020d46:	68f9      	ldr	r1, [r7, #12]
 8020d48:	4803      	ldr	r0, [pc, #12]	@ (8020d58 <ISM_TransmitReceive+0x2c>)
 8020d4a:	f003 fe89 	bl	8024a60 <HAL_SPI_TransmitReceive>
}
 8020d4e:	bf00      	nop
 8020d50:	3710      	adds	r7, #16
 8020d52:	46bd      	mov	sp, r7
 8020d54:	bd80      	pop	{r7, pc}
 8020d56:	bf00      	nop
 8020d58:	24000250 	.word	0x24000250

08020d5c <ISM_CS_High>:
void ISM_CS_High(void)
{
 8020d5c:	b580      	push	{r7, lr}
 8020d5e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(ISM330_CS_GPIO_Port, ISM330_CS_Pin, 1);
 8020d60:	2201      	movs	r2, #1
 8020d62:	2101      	movs	r1, #1
 8020d64:	4802      	ldr	r0, [pc, #8]	@ (8020d70 <ISM_CS_High+0x14>)
 8020d66:	f000 ffb9 	bl	8021cdc <HAL_GPIO_WritePin>
}
 8020d6a:	bf00      	nop
 8020d6c:	bd80      	pop	{r7, pc}
 8020d6e:	bf00      	nop
 8020d70:	58020c00 	.word	0x58020c00

08020d74 <ISM_CS_Low>:
void ISM_CS_Low(void)
{
 8020d74:	b580      	push	{r7, lr}
 8020d76:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(ISM330_CS_GPIO_Port, ISM330_CS_Pin, 0);
 8020d78:	2200      	movs	r2, #0
 8020d7a:	2101      	movs	r1, #1
 8020d7c:	4802      	ldr	r0, [pc, #8]	@ (8020d88 <ISM_CS_Low+0x14>)
 8020d7e:	f000 ffad 	bl	8021cdc <HAL_GPIO_WritePin>
}
 8020d82:	bf00      	nop
 8020d84:	bd80      	pop	{r7, pc}
 8020d86:	bf00      	nop
 8020d88:	58020c00 	.word	0x58020c00

08020d8c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8020d8c:	b580      	push	{r7, lr}
 8020d8e:	b084      	sub	sp, #16
 8020d90:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8020d92:	463b      	mov	r3, r7
 8020d94:	2200      	movs	r2, #0
 8020d96:	601a      	str	r2, [r3, #0]
 8020d98:	605a      	str	r2, [r3, #4]
 8020d9a:	609a      	str	r2, [r3, #8]
 8020d9c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8020d9e:	f000 fc7b 	bl	8021698 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8020da2:	2301      	movs	r3, #1
 8020da4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8020da6:	2300      	movs	r3, #0
 8020da8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8020daa:	2300      	movs	r3, #0
 8020dac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8020dae:	231f      	movs	r3, #31
 8020db0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8020db2:	2387      	movs	r3, #135	@ 0x87
 8020db4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8020db6:	2300      	movs	r3, #0
 8020db8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8020dba:	2300      	movs	r3, #0
 8020dbc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8020dbe:	2301      	movs	r3, #1
 8020dc0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8020dc2:	2301      	movs	r3, #1
 8020dc4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8020dca:	2300      	movs	r3, #0
 8020dcc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8020dce:	463b      	mov	r3, r7
 8020dd0:	4618      	mov	r0, r3
 8020dd2:	f000 fc99 	bl	8021708 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8020dd6:	2301      	movs	r3, #1
 8020dd8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8020dda:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8020dde:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8020de0:	2316      	movs	r3, #22
 8020de2:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8020de4:	2300      	movs	r3, #0
 8020de6:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8020de8:	2303      	movs	r3, #3
 8020dea:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8020dec:	2300      	movs	r3, #0
 8020dee:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8020df0:	463b      	mov	r3, r7
 8020df2:	4618      	mov	r0, r3
 8020df4:	f000 fc88 	bl	8021708 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8020df8:	2004      	movs	r0, #4
 8020dfa:	f000 fc65 	bl	80216c8 <HAL_MPU_Enable>

}
 8020dfe:	bf00      	nop
 8020e00:	3710      	adds	r7, #16
 8020e02:	46bd      	mov	sp, r7
 8020e04:	bd80      	pop	{r7, pc}

08020e06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020e06:	b480      	push	{r7}
 8020e08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020e0a:	b672      	cpsid	i
}
 8020e0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8020e0e:	bf00      	nop
 8020e10:	e7fd      	b.n	8020e0e <Error_Handler+0x8>
	...

08020e14 <HAL_OSPI_MspDeInit>:
  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}

void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* ospiHandle)
{
 8020e14:	b580      	push	{r7, lr}
 8020e16:	b082      	sub	sp, #8
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	6078      	str	r0, [r7, #4]

  if(ospiHandle->Instance==OCTOSPI1)
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	4a11      	ldr	r2, [pc, #68]	@ (8020e68 <HAL_OSPI_MspDeInit+0x54>)
 8020e22:	4293      	cmp	r3, r2
 8020e24:	d11c      	bne.n	8020e60 <HAL_OSPI_MspDeInit+0x4c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 8020e26:	4b11      	ldr	r3, [pc, #68]	@ (8020e6c <HAL_OSPI_MspDeInit+0x58>)
 8020e28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8020e2c:	4a0f      	ldr	r2, [pc, #60]	@ (8020e6c <HAL_OSPI_MspDeInit+0x58>)
 8020e2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8020e32:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8020e36:	4b0d      	ldr	r3, [pc, #52]	@ (8020e6c <HAL_OSPI_MspDeInit+0x58>)
 8020e38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8020e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8020e6c <HAL_OSPI_MspDeInit+0x58>)
 8020e3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8020e42:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    PB0     ------> OCTOSPIM_P1_IO1
    PB1     ------> OCTOSPIM_P1_IO0
    PB2     ------> OCTOSPIM_P1_CLK
    PE11     ------> OCTOSPIM_P1_NCS
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_7);
 8020e46:	21c0      	movs	r1, #192	@ 0xc0
 8020e48:	4809      	ldr	r0, [pc, #36]	@ (8020e70 <HAL_OSPI_MspDeInit+0x5c>)
 8020e4a:	f000 fe45 	bl	8021ad8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2);
 8020e4e:	2107      	movs	r1, #7
 8020e50:	4808      	ldr	r0, [pc, #32]	@ (8020e74 <HAL_OSPI_MspDeInit+0x60>)
 8020e52:	f000 fe41 	bl	8021ad8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_11);
 8020e56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8020e5a:	4807      	ldr	r0, [pc, #28]	@ (8020e78 <HAL_OSPI_MspDeInit+0x64>)
 8020e5c:	f000 fe3c 	bl	8021ad8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }
}
 8020e60:	bf00      	nop
 8020e62:	3708      	adds	r7, #8
 8020e64:	46bd      	mov	sp, r7
 8020e66:	bd80      	pop	{r7, pc}
 8020e68:	52005000 	.word	0x52005000
 8020e6c:	58024400 	.word	0x58024400
 8020e70:	58020000 	.word	0x58020000
 8020e74:	58020400 	.word	0x58020400
 8020e78:	58021000 	.word	0x58021000

08020e7c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8020e7c:	b580      	push	{r7, lr}
 8020e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8020e80:	4b27      	ldr	r3, [pc, #156]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020e82:	4a28      	ldr	r2, [pc, #160]	@ (8020f24 <MX_SPI3_Init+0xa8>)
 8020e84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8020e86:	4b26      	ldr	r3, [pc, #152]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020e88:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8020e8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8020e8e:	4b24      	ldr	r3, [pc, #144]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020e90:	2200      	movs	r2, #0
 8020e92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8020e94:	4b22      	ldr	r3, [pc, #136]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020e96:	2207      	movs	r2, #7
 8020e98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8020e9a:	4b21      	ldr	r3, [pc, #132]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020e9c:	2200      	movs	r2, #0
 8020e9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8020ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ea2:	2200      	movs	r2, #0
 8020ea4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8020ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ea8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8020eac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8020eae:	4b1c      	ldr	r3, [pc, #112]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020eb0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8020eb4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8020eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020eb8:	2200      	movs	r2, #0
 8020eba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8020ebc:	4b18      	ldr	r3, [pc, #96]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ebe:	2200      	movs	r2, #0
 8020ec0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8020ec2:	4b17      	ldr	r3, [pc, #92]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ec4:	2200      	movs	r2, #0
 8020ec6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8020ec8:	4b15      	ldr	r3, [pc, #84]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020eca:	2200      	movs	r2, #0
 8020ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8020ece:	4b14      	ldr	r3, [pc, #80]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ed0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8020ed4:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8020ed6:	4b12      	ldr	r3, [pc, #72]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ed8:	2200      	movs	r2, #0
 8020eda:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8020edc:	4b10      	ldr	r3, [pc, #64]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ede:	2200      	movs	r2, #0
 8020ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8020ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ee4:	2200      	movs	r2, #0
 8020ee6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8020ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020eea:	2200      	movs	r2, #0
 8020eec:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8020eee:	4b0c      	ldr	r3, [pc, #48]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ef0:	2200      	movs	r2, #0
 8020ef2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8020ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020ef6:	2200      	movs	r2, #0
 8020ef8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8020efa:	4b09      	ldr	r3, [pc, #36]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020efc:	2200      	movs	r2, #0
 8020efe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8020f00:	4b07      	ldr	r3, [pc, #28]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020f02:	2200      	movs	r2, #0
 8020f04:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8020f06:	4b06      	ldr	r3, [pc, #24]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020f08:	2200      	movs	r2, #0
 8020f0a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8020f0c:	4804      	ldr	r0, [pc, #16]	@ (8020f20 <MX_SPI3_Init+0xa4>)
 8020f0e:	f003 fa95 	bl	802443c <HAL_SPI_Init>
 8020f12:	4603      	mov	r3, r0
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d001      	beq.n	8020f1c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8020f18:	f7ff ff75 	bl	8020e06 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8020f1c:	bf00      	nop
 8020f1e:	bd80      	pop	{r7, pc}
 8020f20:	24000250 	.word	0x24000250
 8020f24:	40003c00 	.word	0x40003c00

08020f28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	b0b8      	sub	sp, #224	@ 0xe0
 8020f2c:	af00      	add	r7, sp, #0
 8020f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020f30:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8020f34:	2200      	movs	r2, #0
 8020f36:	601a      	str	r2, [r3, #0]
 8020f38:	605a      	str	r2, [r3, #4]
 8020f3a:	609a      	str	r2, [r3, #8]
 8020f3c:	60da      	str	r2, [r3, #12]
 8020f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020f40:	f107 0310 	add.w	r3, r7, #16
 8020f44:	22b8      	movs	r2, #184	@ 0xb8
 8020f46:	2100      	movs	r1, #0
 8020f48:	4618      	mov	r0, r3
 8020f4a:	f005 f97e 	bl	802624a <memset>
  if(spiHandle->Instance==SPI3)
 8020f4e:	687b      	ldr	r3, [r7, #4]
 8020f50:	681b      	ldr	r3, [r3, #0]
 8020f52:	4a26      	ldr	r2, [pc, #152]	@ (8020fec <HAL_SPI_MspInit+0xc4>)
 8020f54:	4293      	cmp	r3, r2
 8020f56:	d145      	bne.n	8020fe4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8020f58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8020f5c:	f04f 0300 	mov.w	r3, #0
 8020f60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8020f64:	2300      	movs	r3, #0
 8020f66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020f68:	f107 0310 	add.w	r3, r7, #16
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	f001 ff61 	bl	8022e34 <HAL_RCCEx_PeriphCLKConfig>
 8020f72:	4603      	mov	r3, r0
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d001      	beq.n	8020f7c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8020f78:	f7ff ff45 	bl	8020e06 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8020f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8020ff0 <HAL_SPI_MspInit+0xc8>)
 8020f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020f82:	4a1b      	ldr	r2, [pc, #108]	@ (8020ff0 <HAL_SPI_MspInit+0xc8>)
 8020f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8020f88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8020f8c:	4b18      	ldr	r3, [pc, #96]	@ (8020ff0 <HAL_SPI_MspInit+0xc8>)
 8020f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8020f96:	60fb      	str	r3, [r7, #12]
 8020f98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020f9a:	4b15      	ldr	r3, [pc, #84]	@ (8020ff0 <HAL_SPI_MspInit+0xc8>)
 8020f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020fa0:	4a13      	ldr	r2, [pc, #76]	@ (8020ff0 <HAL_SPI_MspInit+0xc8>)
 8020fa2:	f043 0304 	orr.w	r3, r3, #4
 8020fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8020faa:	4b11      	ldr	r3, [pc, #68]	@ (8020ff0 <HAL_SPI_MspInit+0xc8>)
 8020fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8020fb0:	f003 0304 	and.w	r3, r3, #4
 8020fb4:	60bb      	str	r3, [r7, #8]
 8020fb6:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8020fb8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8020fbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020fc0:	2302      	movs	r3, #2
 8020fc2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020fc6:	2300      	movs	r3, #0
 8020fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020fcc:	2300      	movs	r3, #0
 8020fce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8020fd2:	2306      	movs	r3, #6
 8020fd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020fd8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8020fdc:	4619      	mov	r1, r3
 8020fde:	4805      	ldr	r0, [pc, #20]	@ (8020ff4 <HAL_SPI_MspInit+0xcc>)
 8020fe0:	f000 fbd2 	bl	8021788 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8020fe4:	bf00      	nop
 8020fe6:	37e0      	adds	r7, #224	@ 0xe0
 8020fe8:	46bd      	mov	sp, r7
 8020fea:	bd80      	pop	{r7, pc}
 8020fec:	40003c00 	.word	0x40003c00
 8020ff0:	58024400 	.word	0x58024400
 8020ff4:	58020800 	.word	0x58020800

08020ff8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8020ff8:	b480      	push	{r7}
 8020ffa:	b083      	sub	sp, #12
 8020ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8020ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8021028 <HAL_MspInit+0x30>)
 8021000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8021004:	4a08      	ldr	r2, [pc, #32]	@ (8021028 <HAL_MspInit+0x30>)
 8021006:	f043 0302 	orr.w	r3, r3, #2
 802100a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 802100e:	4b06      	ldr	r3, [pc, #24]	@ (8021028 <HAL_MspInit+0x30>)
 8021010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8021014:	f003 0302 	and.w	r3, r3, #2
 8021018:	607b      	str	r3, [r7, #4]
 802101a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802101c:	bf00      	nop
 802101e:	370c      	adds	r7, #12
 8021020:	46bd      	mov	sp, r7
 8021022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021026:	4770      	bx	lr
 8021028:	58024400 	.word	0x58024400

0802102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802102c:	b480      	push	{r7}
 802102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8021030:	bf00      	nop
 8021032:	e7fd      	b.n	8021030 <NMI_Handler+0x4>

08021034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021034:	b480      	push	{r7}
 8021036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021038:	bf00      	nop
 802103a:	e7fd      	b.n	8021038 <HardFault_Handler+0x4>

0802103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802103c:	b480      	push	{r7}
 802103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8021040:	bf00      	nop
 8021042:	e7fd      	b.n	8021040 <MemManage_Handler+0x4>

08021044 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8021044:	b480      	push	{r7}
 8021046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8021048:	bf00      	nop
 802104a:	e7fd      	b.n	8021048 <BusFault_Handler+0x4>

0802104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802104c:	b480      	push	{r7}
 802104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8021050:	bf00      	nop
 8021052:	e7fd      	b.n	8021050 <UsageFault_Handler+0x4>

08021054 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8021054:	b480      	push	{r7}
 8021056:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8021058:	bf00      	nop
 802105a:	46bd      	mov	sp, r7
 802105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021060:	4770      	bx	lr

08021062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8021062:	b480      	push	{r7}
 8021064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8021066:	bf00      	nop
 8021068:	46bd      	mov	sp, r7
 802106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802106e:	4770      	bx	lr

08021070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8021070:	b480      	push	{r7}
 8021072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8021074:	bf00      	nop
 8021076:	46bd      	mov	sp, r7
 8021078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802107c:	4770      	bx	lr

0802107e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802107e:	b580      	push	{r7, lr}
 8021080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8021082:	f000 fa05 	bl	8021490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021086:	bf00      	nop
 8021088:	bd80      	pop	{r7, pc}

0802108a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802108a:	b480      	push	{r7}
 802108c:	af00      	add	r7, sp, #0
  return 1;
 802108e:	2301      	movs	r3, #1
}
 8021090:	4618      	mov	r0, r3
 8021092:	46bd      	mov	sp, r7
 8021094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021098:	4770      	bx	lr

0802109a <_kill>:

int _kill(int pid, int sig)
{
 802109a:	b580      	push	{r7, lr}
 802109c:	b082      	sub	sp, #8
 802109e:	af00      	add	r7, sp, #0
 80210a0:	6078      	str	r0, [r7, #4]
 80210a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80210a4:	f005 f924 	bl	80262f0 <__errno>
 80210a8:	4603      	mov	r3, r0
 80210aa:	2216      	movs	r2, #22
 80210ac:	601a      	str	r2, [r3, #0]
  return -1;
 80210ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80210b2:	4618      	mov	r0, r3
 80210b4:	3708      	adds	r7, #8
 80210b6:	46bd      	mov	sp, r7
 80210b8:	bd80      	pop	{r7, pc}

080210ba <_exit>:

void _exit (int status)
{
 80210ba:	b580      	push	{r7, lr}
 80210bc:	b082      	sub	sp, #8
 80210be:	af00      	add	r7, sp, #0
 80210c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80210c2:	f04f 31ff 	mov.w	r1, #4294967295
 80210c6:	6878      	ldr	r0, [r7, #4]
 80210c8:	f7ff ffe7 	bl	802109a <_kill>
  while (1) {}    /* Make sure we hang here */
 80210cc:	bf00      	nop
 80210ce:	e7fd      	b.n	80210cc <_exit+0x12>

080210d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80210d0:	b580      	push	{r7, lr}
 80210d2:	b086      	sub	sp, #24
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	60f8      	str	r0, [r7, #12]
 80210d8:	60b9      	str	r1, [r7, #8]
 80210da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80210dc:	2300      	movs	r3, #0
 80210de:	617b      	str	r3, [r7, #20]
 80210e0:	e00a      	b.n	80210f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80210e2:	f3af 8000 	nop.w
 80210e6:	4601      	mov	r1, r0
 80210e8:	68bb      	ldr	r3, [r7, #8]
 80210ea:	1c5a      	adds	r2, r3, #1
 80210ec:	60ba      	str	r2, [r7, #8]
 80210ee:	b2ca      	uxtb	r2, r1
 80210f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80210f2:	697b      	ldr	r3, [r7, #20]
 80210f4:	3301      	adds	r3, #1
 80210f6:	617b      	str	r3, [r7, #20]
 80210f8:	697a      	ldr	r2, [r7, #20]
 80210fa:	687b      	ldr	r3, [r7, #4]
 80210fc:	429a      	cmp	r2, r3
 80210fe:	dbf0      	blt.n	80210e2 <_read+0x12>
  }

  return len;
 8021100:	687b      	ldr	r3, [r7, #4]
}
 8021102:	4618      	mov	r0, r3
 8021104:	3718      	adds	r7, #24
 8021106:	46bd      	mov	sp, r7
 8021108:	bd80      	pop	{r7, pc}

0802110a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802110a:	b580      	push	{r7, lr}
 802110c:	b086      	sub	sp, #24
 802110e:	af00      	add	r7, sp, #0
 8021110:	60f8      	str	r0, [r7, #12]
 8021112:	60b9      	str	r1, [r7, #8]
 8021114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021116:	2300      	movs	r3, #0
 8021118:	617b      	str	r3, [r7, #20]
 802111a:	e009      	b.n	8021130 <_write+0x26>
  {
    __io_putchar(*ptr++);
 802111c:	68bb      	ldr	r3, [r7, #8]
 802111e:	1c5a      	adds	r2, r3, #1
 8021120:	60ba      	str	r2, [r7, #8]
 8021122:	781b      	ldrb	r3, [r3, #0]
 8021124:	4618      	mov	r0, r3
 8021126:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802112a:	697b      	ldr	r3, [r7, #20]
 802112c:	3301      	adds	r3, #1
 802112e:	617b      	str	r3, [r7, #20]
 8021130:	697a      	ldr	r2, [r7, #20]
 8021132:	687b      	ldr	r3, [r7, #4]
 8021134:	429a      	cmp	r2, r3
 8021136:	dbf1      	blt.n	802111c <_write+0x12>
  }
  return len;
 8021138:	687b      	ldr	r3, [r7, #4]
}
 802113a:	4618      	mov	r0, r3
 802113c:	3718      	adds	r7, #24
 802113e:	46bd      	mov	sp, r7
 8021140:	bd80      	pop	{r7, pc}

08021142 <_close>:

int _close(int file)
{
 8021142:	b480      	push	{r7}
 8021144:	b083      	sub	sp, #12
 8021146:	af00      	add	r7, sp, #0
 8021148:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 802114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802114e:	4618      	mov	r0, r3
 8021150:	370c      	adds	r7, #12
 8021152:	46bd      	mov	sp, r7
 8021154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021158:	4770      	bx	lr

0802115a <_fstat>:


int _fstat(int file, struct stat *st)
{
 802115a:	b480      	push	{r7}
 802115c:	b083      	sub	sp, #12
 802115e:	af00      	add	r7, sp, #0
 8021160:	6078      	str	r0, [r7, #4]
 8021162:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8021164:	683b      	ldr	r3, [r7, #0]
 8021166:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 802116a:	605a      	str	r2, [r3, #4]
  return 0;
 802116c:	2300      	movs	r3, #0
}
 802116e:	4618      	mov	r0, r3
 8021170:	370c      	adds	r7, #12
 8021172:	46bd      	mov	sp, r7
 8021174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021178:	4770      	bx	lr

0802117a <_isatty>:

int _isatty(int file)
{
 802117a:	b480      	push	{r7}
 802117c:	b083      	sub	sp, #12
 802117e:	af00      	add	r7, sp, #0
 8021180:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8021182:	2301      	movs	r3, #1
}
 8021184:	4618      	mov	r0, r3
 8021186:	370c      	adds	r7, #12
 8021188:	46bd      	mov	sp, r7
 802118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802118e:	4770      	bx	lr

08021190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021190:	b480      	push	{r7}
 8021192:	b085      	sub	sp, #20
 8021194:	af00      	add	r7, sp, #0
 8021196:	60f8      	str	r0, [r7, #12]
 8021198:	60b9      	str	r1, [r7, #8]
 802119a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802119c:	2300      	movs	r3, #0
}
 802119e:	4618      	mov	r0, r3
 80211a0:	3714      	adds	r7, #20
 80211a2:	46bd      	mov	sp, r7
 80211a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a8:	4770      	bx	lr
	...

080211ac <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80211ac:	b580      	push	{r7, lr}
 80211ae:	b086      	sub	sp, #24
 80211b0:	af00      	add	r7, sp, #0
 80211b2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80211b4:	4a14      	ldr	r2, [pc, #80]	@ (8021208 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80211b6:	4b15      	ldr	r3, [pc, #84]	@ (802120c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80211b8:	1ad3      	subs	r3, r2, r3
 80211ba:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80211bc:	697b      	ldr	r3, [r7, #20]
 80211be:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80211c0:	4b13      	ldr	r3, [pc, #76]	@ (8021210 <_sbrk+0x64>)
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	d102      	bne.n	80211ce <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80211c8:	4b11      	ldr	r3, [pc, #68]	@ (8021210 <_sbrk+0x64>)
 80211ca:	4a12      	ldr	r2, [pc, #72]	@ (8021214 <_sbrk+0x68>)
 80211cc:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80211ce:	4b10      	ldr	r3, [pc, #64]	@ (8021210 <_sbrk+0x64>)
 80211d0:	681a      	ldr	r2, [r3, #0]
 80211d2:	687b      	ldr	r3, [r7, #4]
 80211d4:	4413      	add	r3, r2
 80211d6:	693a      	ldr	r2, [r7, #16]
 80211d8:	429a      	cmp	r2, r3
 80211da:	d207      	bcs.n	80211ec <_sbrk+0x40>
		errno = ENOMEM;
 80211dc:	f005 f888 	bl	80262f0 <__errno>
 80211e0:	4603      	mov	r3, r0
 80211e2:	220c      	movs	r2, #12
 80211e4:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80211e6:	f04f 33ff 	mov.w	r3, #4294967295
 80211ea:	e009      	b.n	8021200 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80211ec:	4b08      	ldr	r3, [pc, #32]	@ (8021210 <_sbrk+0x64>)
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80211f2:	4b07      	ldr	r3, [pc, #28]	@ (8021210 <_sbrk+0x64>)
 80211f4:	681a      	ldr	r2, [r3, #0]
 80211f6:	687b      	ldr	r3, [r7, #4]
 80211f8:	4413      	add	r3, r2
 80211fa:	4a05      	ldr	r2, [pc, #20]	@ (8021210 <_sbrk+0x64>)
 80211fc:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80211fe:	68fb      	ldr	r3, [r7, #12]
}
 8021200:	4618      	mov	r0, r3
 8021202:	3718      	adds	r7, #24
 8021204:	46bd      	mov	sp, r7
 8021206:	bd80      	pop	{r7, pc}
 8021208:	24050000 	.word	0x24050000
 802120c:	00000400 	.word	0x00000400
 8021210:	240002d8 	.word	0x240002d8
 8021214:	24000430 	.word	0x24000430

08021218 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8021218:	b480      	push	{r7}
 802121a:	af00      	add	r7, sp, #0
  __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10 * 2)) |
 802121c:	4b34      	ldr	r3, [pc, #208]	@ (80212f0 <SystemInit+0xd8>)
 802121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8021222:	4a33      	ldr	r2, [pc, #204]	@ (80212f0 <SystemInit+0xd8>)
 8021224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8021228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
                 (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
#endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 802122c:	4b31      	ldr	r3, [pc, #196]	@ (80212f4 <SystemInit+0xdc>)
 802122e:	681b      	ldr	r3, [r3, #0]
 8021230:	f003 030f 	and.w	r3, r3, #15
 8021234:	2b06      	cmp	r3, #6
 8021236:	d807      	bhi.n	8021248 <SystemInit+0x30>
    /* Program the new number of wait states to the LATENCY bits in the
     * FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8021238:	4b2e      	ldr	r3, [pc, #184]	@ (80212f4 <SystemInit+0xdc>)
 802123a:	681b      	ldr	r3, [r3, #0]
 802123c:	f023 030f 	bic.w	r3, r3, #15
 8021240:	4a2c      	ldr	r2, [pc, #176]	@ (80212f4 <SystemInit+0xdc>)
 8021242:	f043 0307 	orr.w	r3, r3, #7
 8021246:	6013      	str	r3, [r2, #0]
               (uint32_t)(FLASH_LATENCY_DEFAULT));
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8021248:	4b2b      	ldr	r3, [pc, #172]	@ (80212f8 <SystemInit+0xe0>)
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	4a2a      	ldr	r2, [pc, #168]	@ (80212f8 <SystemInit+0xe0>)
 802124e:	f043 0301 	orr.w	r3, r3, #1
 8021252:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8021254:	4b28      	ldr	r3, [pc, #160]	@ (80212f8 <SystemInit+0xe0>)
 8021256:	2200      	movs	r2, #0
 8021258:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON
   * bits */
  RCC->CR &= 0xEAF6ED7FU;
 802125a:	4b27      	ldr	r3, [pc, #156]	@ (80212f8 <SystemInit+0xe0>)
 802125c:	681a      	ldr	r2, [r3, #0]
 802125e:	4926      	ldr	r1, [pc, #152]	@ (80212f8 <SystemInit+0xe0>)
 8021260:	4b26      	ldr	r3, [pc, #152]	@ (80212fc <SystemInit+0xe4>)
 8021262:	4013      	ands	r3, r2
 8021264:	600b      	str	r3, [r1, #0]

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8021266:	4b23      	ldr	r3, [pc, #140]	@ (80212f4 <SystemInit+0xdc>)
 8021268:	681b      	ldr	r3, [r3, #0]
 802126a:	f003 0308 	and.w	r3, r3, #8
 802126e:	2b00      	cmp	r3, #0
 8021270:	d007      	beq.n	8021282 <SystemInit+0x6a>
    /* Program the new number of wait states to the LATENCY bits in the
     * FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8021272:	4b20      	ldr	r3, [pc, #128]	@ (80212f4 <SystemInit+0xdc>)
 8021274:	681b      	ldr	r3, [r3, #0]
 8021276:	f023 030f 	bic.w	r3, r3, #15
 802127a:	4a1e      	ldr	r2, [pc, #120]	@ (80212f4 <SystemInit+0xdc>)
 802127c:	f043 0307 	orr.w	r3, r3, #7
 8021280:	6013      	str	r3, [r2, #0]
               (uint32_t)(FLASH_LATENCY_DEFAULT));
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8021282:	4b1d      	ldr	r3, [pc, #116]	@ (80212f8 <SystemInit+0xe0>)
 8021284:	2200      	movs	r2, #0
 8021286:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8021288:	4b1b      	ldr	r3, [pc, #108]	@ (80212f8 <SystemInit+0xe0>)
 802128a:	2200      	movs	r2, #0
 802128c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 802128e:	4b1a      	ldr	r3, [pc, #104]	@ (80212f8 <SystemInit+0xe0>)
 8021290:	2200      	movs	r2, #0
 8021292:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8021294:	4b18      	ldr	r3, [pc, #96]	@ (80212f8 <SystemInit+0xe0>)
 8021296:	4a1a      	ldr	r2, [pc, #104]	@ (8021300 <SystemInit+0xe8>)
 8021298:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 802129a:	4b17      	ldr	r3, [pc, #92]	@ (80212f8 <SystemInit+0xe0>)
 802129c:	4a19      	ldr	r2, [pc, #100]	@ (8021304 <SystemInit+0xec>)
 802129e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80212a0:	4b15      	ldr	r3, [pc, #84]	@ (80212f8 <SystemInit+0xe0>)
 80212a2:	4a19      	ldr	r2, [pc, #100]	@ (8021308 <SystemInit+0xf0>)
 80212a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80212a6:	4b14      	ldr	r3, [pc, #80]	@ (80212f8 <SystemInit+0xe0>)
 80212a8:	2200      	movs	r2, #0
 80212aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80212ac:	4b12      	ldr	r3, [pc, #72]	@ (80212f8 <SystemInit+0xe0>)
 80212ae:	4a16      	ldr	r2, [pc, #88]	@ (8021308 <SystemInit+0xf0>)
 80212b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80212b2:	4b11      	ldr	r3, [pc, #68]	@ (80212f8 <SystemInit+0xe0>)
 80212b4:	2200      	movs	r2, #0
 80212b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80212b8:	4b0f      	ldr	r3, [pc, #60]	@ (80212f8 <SystemInit+0xe0>)
 80212ba:	4a13      	ldr	r2, [pc, #76]	@ (8021308 <SystemInit+0xf0>)
 80212bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80212be:	4b0e      	ldr	r3, [pc, #56]	@ (80212f8 <SystemInit+0xe0>)
 80212c0:	2200      	movs	r2, #0
 80212c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80212c4:	4b0c      	ldr	r3, [pc, #48]	@ (80212f8 <SystemInit+0xe0>)
 80212c6:	681b      	ldr	r3, [r3, #0]
 80212c8:	4a0b      	ldr	r2, [pc, #44]	@ (80212f8 <SystemInit+0xe0>)
 80212ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80212ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80212d0:	4b09      	ldr	r3, [pc, #36]	@ (80212f8 <SystemInit+0xe0>)
 80212d2:	2200      	movs	r2, #0
 80212d4:	661a      	str	r2, [r3, #96]	@ 0x60
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of
   * FMC during 24us. During this time the others FMC master (such as LTDC)
   * cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80212d6:	4b0d      	ldr	r3, [pc, #52]	@ (802130c <SystemInit+0xf4>)
 80212d8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80212dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS |
 80212de:	4b04      	ldr	r3, [pc, #16]	@ (80212f0 <SystemInit+0xd8>)
 80212e0:	4a0b      	ldr	r2, [pc, #44]	@ (8021310 <SystemInit+0xf8>)
 80212e2:	609a      	str	r2, [r3, #8]
              VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM
                                  or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80212e4:	bf00      	nop
 80212e6:	46bd      	mov	sp, r7
 80212e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ec:	4770      	bx	lr
 80212ee:	bf00      	nop
 80212f0:	e000ed00 	.word	0xe000ed00
 80212f4:	52002000 	.word	0x52002000
 80212f8:	58024400 	.word	0x58024400
 80212fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8021300:	02020200 	.word	0x02020200
 8021304:	01ff0000 	.word	0x01ff0000
 8021308:	01010280 	.word	0x01010280
 802130c:	52004000 	.word	0x52004000
 8021310:	08020000 	.word	0x08020000

08021314 <ExitRun0Mode>:
 * indicating that the power supply configuration is stable.
 *
 * @param  None
 * @retval None
 */
void ExitRun0Mode(void) {
 8021314:	b480      	push	{r7}
 8021316:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
#if defined(SMPS)
  /* Exit Run* mode by disabling SMPS and enabling LDO */
  PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8021318:	4b0a      	ldr	r3, [pc, #40]	@ (8021344 <ExitRun0Mode+0x30>)
 802131a:	68db      	ldr	r3, [r3, #12]
 802131c:	f023 0306 	bic.w	r3, r3, #6
 8021320:	4a08      	ldr	r2, [pc, #32]	@ (8021344 <ExitRun0Mode+0x30>)
 8021322:	f043 0302 	orr.w	r3, r3, #2
 8021326:	60d3      	str	r3, [r2, #12]
#else
  /* Enable LDO mode */
  PWR->CR3 |= PWR_CR3_LDOEN;
#endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
 8021328:	bf00      	nop
 802132a:	4b06      	ldr	r3, [pc, #24]	@ (8021344 <ExitRun0Mode+0x30>)
 802132c:	685b      	ldr	r3, [r3, #4]
 802132e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8021332:	2b00      	cmp	r3, #0
 8021334:	d0f9      	beq.n	802132a <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U) {
  }
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8021336:	bf00      	nop
 8021338:	bf00      	nop
 802133a:	46bd      	mov	sp, r7
 802133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021340:	4770      	bx	lr
 8021342:	bf00      	nop
 8021344:	58024800 	.word	0x58024800

08021348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8021348:	f8df d044 	ldr.w	sp, [pc, #68]	@ 8021390 <LoopFillZerobss+0xe>
/* Call check if external memory is enable*/
  bl  ExternalMemmoryRun
 802134c:	f003 ffac 	bl	80252a8 <ExternalMemmoryRun>
  /* Copy Data to PSRAM*/
  bl ExternalMemoryCopyDataSection
 8021350:	f003 ffd6 	bl	8025300 <ExternalMemoryCopyDataSection>
/* Set to Zero .bss in external RAM */
  bl ExternalMemorySetZeorsInBSSSection
 8021354:	f003 fff6 	bl	8025344 <ExternalMemorySetZeorsInBSSSection>
/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8021358:	f7ff ffdc 	bl	8021314 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 802135c:	f7ff ff5c 	bl	8021218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8021360:	480c      	ldr	r0, [pc, #48]	@ (8021394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8021362:	490d      	ldr	r1, [pc, #52]	@ (8021398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8021364:	4a0d      	ldr	r2, [pc, #52]	@ (802139c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8021366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021368:	e002      	b.n	8021370 <LoopCopyDataInit>

0802136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 802136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 802136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 802136e:	3304      	adds	r3, #4

08021370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021374:	d3f9      	bcc.n	802136a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021376:	4a0a      	ldr	r2, [pc, #40]	@ (80213a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8021378:	4c0a      	ldr	r4, [pc, #40]	@ (80213a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 802137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 802137c:	e001      	b.n	8021382 <LoopFillZerobss>

0802137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 802137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021380:	3204      	adds	r2, #4

08021382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021384:	d3fb      	bcc.n	802137e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8021386:	f004 ffb9 	bl	80262fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 802138a:	f7ff fc31 	bl	8020bf0 <main>
  bx  lr
 802138e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8021390:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8021394:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8021398:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 802139c:	08029cf0 	.word	0x08029cf0
  ldr r2, =_sbss
 80213a0:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80213a4:	2400042c 	.word	0x2400042c

080213a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80213a8:	e7fe      	b.n	80213a8 <ADC3_IRQHandler>
	...

080213ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80213ac:	b580      	push	{r7, lr}
 80213ae:	b082      	sub	sp, #8
 80213b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80213b2:	2003      	movs	r0, #3
 80213b4:	f000 f93e 	bl	8021634 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80213b8:	f001 fbc2 	bl	8022b40 <HAL_RCC_GetSysClockFreq>
 80213bc:	4602      	mov	r2, r0
 80213be:	4b15      	ldr	r3, [pc, #84]	@ (8021414 <HAL_Init+0x68>)
 80213c0:	699b      	ldr	r3, [r3, #24]
 80213c2:	0a1b      	lsrs	r3, r3, #8
 80213c4:	f003 030f 	and.w	r3, r3, #15
 80213c8:	4913      	ldr	r1, [pc, #76]	@ (8021418 <HAL_Init+0x6c>)
 80213ca:	5ccb      	ldrb	r3, [r1, r3]
 80213cc:	f003 031f 	and.w	r3, r3, #31
 80213d0:	fa22 f303 	lsr.w	r3, r2, r3
 80213d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80213d6:	4b0f      	ldr	r3, [pc, #60]	@ (8021414 <HAL_Init+0x68>)
 80213d8:	699b      	ldr	r3, [r3, #24]
 80213da:	f003 030f 	and.w	r3, r3, #15
 80213de:	4a0e      	ldr	r2, [pc, #56]	@ (8021418 <HAL_Init+0x6c>)
 80213e0:	5cd3      	ldrb	r3, [r2, r3]
 80213e2:	f003 031f 	and.w	r3, r3, #31
 80213e6:	687a      	ldr	r2, [r7, #4]
 80213e8:	fa22 f303 	lsr.w	r3, r2, r3
 80213ec:	4a0b      	ldr	r2, [pc, #44]	@ (802141c <HAL_Init+0x70>)
 80213ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80213f0:	4a0b      	ldr	r2, [pc, #44]	@ (8021420 <HAL_Init+0x74>)
 80213f2:	687b      	ldr	r3, [r7, #4]
 80213f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80213f6:	200f      	movs	r0, #15
 80213f8:	f000 f814 	bl	8021424 <HAL_InitTick>
 80213fc:	4603      	mov	r3, r0
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d001      	beq.n	8021406 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8021402:	2301      	movs	r3, #1
 8021404:	e002      	b.n	802140c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8021406:	f7ff fdf7 	bl	8020ff8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 802140a:	2300      	movs	r3, #0
}
 802140c:	4618      	mov	r0, r3
 802140e:	3708      	adds	r7, #8
 8021410:	46bd      	mov	sp, r7
 8021412:	bd80      	pop	{r7, pc}
 8021414:	58024400 	.word	0x58024400
 8021418:	080298a0 	.word	0x080298a0
 802141c:	24000004 	.word	0x24000004
 8021420:	24000000 	.word	0x24000000

08021424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8021424:	b580      	push	{r7, lr}
 8021426:	b082      	sub	sp, #8
 8021428:	af00      	add	r7, sp, #0
 802142a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 802142c:	4b15      	ldr	r3, [pc, #84]	@ (8021484 <HAL_InitTick+0x60>)
 802142e:	781b      	ldrb	r3, [r3, #0]
 8021430:	2b00      	cmp	r3, #0
 8021432:	d101      	bne.n	8021438 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8021434:	2301      	movs	r3, #1
 8021436:	e021      	b.n	802147c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8021438:	4b13      	ldr	r3, [pc, #76]	@ (8021488 <HAL_InitTick+0x64>)
 802143a:	681a      	ldr	r2, [r3, #0]
 802143c:	4b11      	ldr	r3, [pc, #68]	@ (8021484 <HAL_InitTick+0x60>)
 802143e:	781b      	ldrb	r3, [r3, #0]
 8021440:	4619      	mov	r1, r3
 8021442:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8021446:	fbb3 f3f1 	udiv	r3, r3, r1
 802144a:	fbb2 f3f3 	udiv	r3, r2, r3
 802144e:	4618      	mov	r0, r3
 8021450:	f000 f915 	bl	802167e <HAL_SYSTICK_Config>
 8021454:	4603      	mov	r3, r0
 8021456:	2b00      	cmp	r3, #0
 8021458:	d001      	beq.n	802145e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 802145a:	2301      	movs	r3, #1
 802145c:	e00e      	b.n	802147c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802145e:	687b      	ldr	r3, [r7, #4]
 8021460:	2b0f      	cmp	r3, #15
 8021462:	d80a      	bhi.n	802147a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8021464:	2200      	movs	r2, #0
 8021466:	6879      	ldr	r1, [r7, #4]
 8021468:	f04f 30ff 	mov.w	r0, #4294967295
 802146c:	f000 f8ed 	bl	802164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8021470:	4a06      	ldr	r2, [pc, #24]	@ (802148c <HAL_InitTick+0x68>)
 8021472:	687b      	ldr	r3, [r7, #4]
 8021474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8021476:	2300      	movs	r3, #0
 8021478:	e000      	b.n	802147c <HAL_InitTick+0x58>
    return HAL_ERROR;
 802147a:	2301      	movs	r3, #1
}
 802147c:	4618      	mov	r0, r3
 802147e:	3708      	adds	r7, #8
 8021480:	46bd      	mov	sp, r7
 8021482:	bd80      	pop	{r7, pc}
 8021484:	2400000c 	.word	0x2400000c
 8021488:	24000000 	.word	0x24000000
 802148c:	24000008 	.word	0x24000008

08021490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021490:	b480      	push	{r7}
 8021492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8021494:	4b06      	ldr	r3, [pc, #24]	@ (80214b0 <HAL_IncTick+0x20>)
 8021496:	781b      	ldrb	r3, [r3, #0]
 8021498:	461a      	mov	r2, r3
 802149a:	4b06      	ldr	r3, [pc, #24]	@ (80214b4 <HAL_IncTick+0x24>)
 802149c:	681b      	ldr	r3, [r3, #0]
 802149e:	4413      	add	r3, r2
 80214a0:	4a04      	ldr	r2, [pc, #16]	@ (80214b4 <HAL_IncTick+0x24>)
 80214a2:	6013      	str	r3, [r2, #0]
}
 80214a4:	bf00      	nop
 80214a6:	46bd      	mov	sp, r7
 80214a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ac:	4770      	bx	lr
 80214ae:	bf00      	nop
 80214b0:	2400000c 	.word	0x2400000c
 80214b4:	240002dc 	.word	0x240002dc

080214b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80214b8:	b480      	push	{r7}
 80214ba:	af00      	add	r7, sp, #0
  return uwTick;
 80214bc:	4b03      	ldr	r3, [pc, #12]	@ (80214cc <HAL_GetTick+0x14>)
 80214be:	681b      	ldr	r3, [r3, #0]
}
 80214c0:	4618      	mov	r0, r3
 80214c2:	46bd      	mov	sp, r7
 80214c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214c8:	4770      	bx	lr
 80214ca:	bf00      	nop
 80214cc:	240002dc 	.word	0x240002dc

080214d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80214d0:	b480      	push	{r7}
 80214d2:	b085      	sub	sp, #20
 80214d4:	af00      	add	r7, sp, #0
 80214d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	f003 0307 	and.w	r3, r3, #7
 80214de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80214e0:	4b0b      	ldr	r3, [pc, #44]	@ (8021510 <__NVIC_SetPriorityGrouping+0x40>)
 80214e2:	68db      	ldr	r3, [r3, #12]
 80214e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80214e6:	68ba      	ldr	r2, [r7, #8]
 80214e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80214ec:	4013      	ands	r3, r2
 80214ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80214f0:	68fb      	ldr	r3, [r7, #12]
 80214f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80214f4:	68bb      	ldr	r3, [r7, #8]
 80214f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80214f8:	4b06      	ldr	r3, [pc, #24]	@ (8021514 <__NVIC_SetPriorityGrouping+0x44>)
 80214fa:	4313      	orrs	r3, r2
 80214fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80214fe:	4a04      	ldr	r2, [pc, #16]	@ (8021510 <__NVIC_SetPriorityGrouping+0x40>)
 8021500:	68bb      	ldr	r3, [r7, #8]
 8021502:	60d3      	str	r3, [r2, #12]
}
 8021504:	bf00      	nop
 8021506:	3714      	adds	r7, #20
 8021508:	46bd      	mov	sp, r7
 802150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802150e:	4770      	bx	lr
 8021510:	e000ed00 	.word	0xe000ed00
 8021514:	05fa0000 	.word	0x05fa0000

08021518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021518:	b480      	push	{r7}
 802151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 802151c:	4b04      	ldr	r3, [pc, #16]	@ (8021530 <__NVIC_GetPriorityGrouping+0x18>)
 802151e:	68db      	ldr	r3, [r3, #12]
 8021520:	0a1b      	lsrs	r3, r3, #8
 8021522:	f003 0307 	and.w	r3, r3, #7
}
 8021526:	4618      	mov	r0, r3
 8021528:	46bd      	mov	sp, r7
 802152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802152e:	4770      	bx	lr
 8021530:	e000ed00 	.word	0xe000ed00

08021534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021534:	b480      	push	{r7}
 8021536:	b083      	sub	sp, #12
 8021538:	af00      	add	r7, sp, #0
 802153a:	4603      	mov	r3, r0
 802153c:	6039      	str	r1, [r7, #0]
 802153e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8021540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021544:	2b00      	cmp	r3, #0
 8021546:	db0a      	blt.n	802155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021548:	683b      	ldr	r3, [r7, #0]
 802154a:	b2da      	uxtb	r2, r3
 802154c:	490c      	ldr	r1, [pc, #48]	@ (8021580 <__NVIC_SetPriority+0x4c>)
 802154e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8021552:	0112      	lsls	r2, r2, #4
 8021554:	b2d2      	uxtb	r2, r2
 8021556:	440b      	add	r3, r1
 8021558:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 802155c:	e00a      	b.n	8021574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 802155e:	683b      	ldr	r3, [r7, #0]
 8021560:	b2da      	uxtb	r2, r3
 8021562:	4908      	ldr	r1, [pc, #32]	@ (8021584 <__NVIC_SetPriority+0x50>)
 8021564:	88fb      	ldrh	r3, [r7, #6]
 8021566:	f003 030f 	and.w	r3, r3, #15
 802156a:	3b04      	subs	r3, #4
 802156c:	0112      	lsls	r2, r2, #4
 802156e:	b2d2      	uxtb	r2, r2
 8021570:	440b      	add	r3, r1
 8021572:	761a      	strb	r2, [r3, #24]
}
 8021574:	bf00      	nop
 8021576:	370c      	adds	r7, #12
 8021578:	46bd      	mov	sp, r7
 802157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802157e:	4770      	bx	lr
 8021580:	e000e100 	.word	0xe000e100
 8021584:	e000ed00 	.word	0xe000ed00

08021588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021588:	b480      	push	{r7}
 802158a:	b089      	sub	sp, #36	@ 0x24
 802158c:	af00      	add	r7, sp, #0
 802158e:	60f8      	str	r0, [r7, #12]
 8021590:	60b9      	str	r1, [r7, #8]
 8021592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8021594:	68fb      	ldr	r3, [r7, #12]
 8021596:	f003 0307 	and.w	r3, r3, #7
 802159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 802159c:	69fb      	ldr	r3, [r7, #28]
 802159e:	f1c3 0307 	rsb	r3, r3, #7
 80215a2:	2b04      	cmp	r3, #4
 80215a4:	bf28      	it	cs
 80215a6:	2304      	movcs	r3, #4
 80215a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80215aa:	69fb      	ldr	r3, [r7, #28]
 80215ac:	3304      	adds	r3, #4
 80215ae:	2b06      	cmp	r3, #6
 80215b0:	d902      	bls.n	80215b8 <NVIC_EncodePriority+0x30>
 80215b2:	69fb      	ldr	r3, [r7, #28]
 80215b4:	3b03      	subs	r3, #3
 80215b6:	e000      	b.n	80215ba <NVIC_EncodePriority+0x32>
 80215b8:	2300      	movs	r3, #0
 80215ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80215bc:	f04f 32ff 	mov.w	r2, #4294967295
 80215c0:	69bb      	ldr	r3, [r7, #24]
 80215c2:	fa02 f303 	lsl.w	r3, r2, r3
 80215c6:	43da      	mvns	r2, r3
 80215c8:	68bb      	ldr	r3, [r7, #8]
 80215ca:	401a      	ands	r2, r3
 80215cc:	697b      	ldr	r3, [r7, #20]
 80215ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80215d0:	f04f 31ff 	mov.w	r1, #4294967295
 80215d4:	697b      	ldr	r3, [r7, #20]
 80215d6:	fa01 f303 	lsl.w	r3, r1, r3
 80215da:	43d9      	mvns	r1, r3
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80215e0:	4313      	orrs	r3, r2
         );
}
 80215e2:	4618      	mov	r0, r3
 80215e4:	3724      	adds	r7, #36	@ 0x24
 80215e6:	46bd      	mov	sp, r7
 80215e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ec:	4770      	bx	lr
	...

080215f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80215f0:	b580      	push	{r7, lr}
 80215f2:	b082      	sub	sp, #8
 80215f4:	af00      	add	r7, sp, #0
 80215f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	3b01      	subs	r3, #1
 80215fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8021600:	d301      	bcc.n	8021606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8021602:	2301      	movs	r3, #1
 8021604:	e00f      	b.n	8021626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8021606:	4a0a      	ldr	r2, [pc, #40]	@ (8021630 <SysTick_Config+0x40>)
 8021608:	687b      	ldr	r3, [r7, #4]
 802160a:	3b01      	subs	r3, #1
 802160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 802160e:	210f      	movs	r1, #15
 8021610:	f04f 30ff 	mov.w	r0, #4294967295
 8021614:	f7ff ff8e 	bl	8021534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8021618:	4b05      	ldr	r3, [pc, #20]	@ (8021630 <SysTick_Config+0x40>)
 802161a:	2200      	movs	r2, #0
 802161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 802161e:	4b04      	ldr	r3, [pc, #16]	@ (8021630 <SysTick_Config+0x40>)
 8021620:	2207      	movs	r2, #7
 8021622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8021624:	2300      	movs	r3, #0
}
 8021626:	4618      	mov	r0, r3
 8021628:	3708      	adds	r7, #8
 802162a:	46bd      	mov	sp, r7
 802162c:	bd80      	pop	{r7, pc}
 802162e:	bf00      	nop
 8021630:	e000e010 	.word	0xe000e010

08021634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021634:	b580      	push	{r7, lr}
 8021636:	b082      	sub	sp, #8
 8021638:	af00      	add	r7, sp, #0
 802163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 802163c:	6878      	ldr	r0, [r7, #4]
 802163e:	f7ff ff47 	bl	80214d0 <__NVIC_SetPriorityGrouping>
}
 8021642:	bf00      	nop
 8021644:	3708      	adds	r7, #8
 8021646:	46bd      	mov	sp, r7
 8021648:	bd80      	pop	{r7, pc}

0802164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 802164a:	b580      	push	{r7, lr}
 802164c:	b086      	sub	sp, #24
 802164e:	af00      	add	r7, sp, #0
 8021650:	4603      	mov	r3, r0
 8021652:	60b9      	str	r1, [r7, #8]
 8021654:	607a      	str	r2, [r7, #4]
 8021656:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8021658:	f7ff ff5e 	bl	8021518 <__NVIC_GetPriorityGrouping>
 802165c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 802165e:	687a      	ldr	r2, [r7, #4]
 8021660:	68b9      	ldr	r1, [r7, #8]
 8021662:	6978      	ldr	r0, [r7, #20]
 8021664:	f7ff ff90 	bl	8021588 <NVIC_EncodePriority>
 8021668:	4602      	mov	r2, r0
 802166a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802166e:	4611      	mov	r1, r2
 8021670:	4618      	mov	r0, r3
 8021672:	f7ff ff5f 	bl	8021534 <__NVIC_SetPriority>
}
 8021676:	bf00      	nop
 8021678:	3718      	adds	r7, #24
 802167a:	46bd      	mov	sp, r7
 802167c:	bd80      	pop	{r7, pc}

0802167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 802167e:	b580      	push	{r7, lr}
 8021680:	b082      	sub	sp, #8
 8021682:	af00      	add	r7, sp, #0
 8021684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8021686:	6878      	ldr	r0, [r7, #4]
 8021688:	f7ff ffb2 	bl	80215f0 <SysTick_Config>
 802168c:	4603      	mov	r3, r0
}
 802168e:	4618      	mov	r0, r3
 8021690:	3708      	adds	r7, #8
 8021692:	46bd      	mov	sp, r7
 8021694:	bd80      	pop	{r7, pc}
	...

08021698 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8021698:	b480      	push	{r7}
 802169a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 802169c:	f3bf 8f5f 	dmb	sy
}
 80216a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80216a2:	4b07      	ldr	r3, [pc, #28]	@ (80216c0 <HAL_MPU_Disable+0x28>)
 80216a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80216a6:	4a06      	ldr	r2, [pc, #24]	@ (80216c0 <HAL_MPU_Disable+0x28>)
 80216a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80216ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80216ae:	4b05      	ldr	r3, [pc, #20]	@ (80216c4 <HAL_MPU_Disable+0x2c>)
 80216b0:	2200      	movs	r2, #0
 80216b2:	605a      	str	r2, [r3, #4]
}
 80216b4:	bf00      	nop
 80216b6:	46bd      	mov	sp, r7
 80216b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216bc:	4770      	bx	lr
 80216be:	bf00      	nop
 80216c0:	e000ed00 	.word	0xe000ed00
 80216c4:	e000ed90 	.word	0xe000ed90

080216c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80216c8:	b480      	push	{r7}
 80216ca:	b083      	sub	sp, #12
 80216cc:	af00      	add	r7, sp, #0
 80216ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80216d0:	4a0b      	ldr	r2, [pc, #44]	@ (8021700 <HAL_MPU_Enable+0x38>)
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	f043 0301 	orr.w	r3, r3, #1
 80216d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80216da:	4b0a      	ldr	r3, [pc, #40]	@ (8021704 <HAL_MPU_Enable+0x3c>)
 80216dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80216de:	4a09      	ldr	r2, [pc, #36]	@ (8021704 <HAL_MPU_Enable+0x3c>)
 80216e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80216e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80216e6:	f3bf 8f4f 	dsb	sy
}
 80216ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80216ec:	f3bf 8f6f 	isb	sy
}
 80216f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80216f2:	bf00      	nop
 80216f4:	370c      	adds	r7, #12
 80216f6:	46bd      	mov	sp, r7
 80216f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216fc:	4770      	bx	lr
 80216fe:	bf00      	nop
 8021700:	e000ed90 	.word	0xe000ed90
 8021704:	e000ed00 	.word	0xe000ed00

08021708 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8021708:	b480      	push	{r7}
 802170a:	b083      	sub	sp, #12
 802170c:	af00      	add	r7, sp, #0
 802170e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	785a      	ldrb	r2, [r3, #1]
 8021714:	4b1b      	ldr	r3, [pc, #108]	@ (8021784 <HAL_MPU_ConfigRegion+0x7c>)
 8021716:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8021718:	4b1a      	ldr	r3, [pc, #104]	@ (8021784 <HAL_MPU_ConfigRegion+0x7c>)
 802171a:	691b      	ldr	r3, [r3, #16]
 802171c:	4a19      	ldr	r2, [pc, #100]	@ (8021784 <HAL_MPU_ConfigRegion+0x7c>)
 802171e:	f023 0301 	bic.w	r3, r3, #1
 8021722:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8021724:	4a17      	ldr	r2, [pc, #92]	@ (8021784 <HAL_MPU_ConfigRegion+0x7c>)
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	685b      	ldr	r3, [r3, #4]
 802172a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 802172c:	687b      	ldr	r3, [r7, #4]
 802172e:	7b1b      	ldrb	r3, [r3, #12]
 8021730:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	7adb      	ldrb	r3, [r3, #11]
 8021736:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8021738:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	7a9b      	ldrb	r3, [r3, #10]
 802173e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8021740:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	7b5b      	ldrb	r3, [r3, #13]
 8021746:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8021748:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 802174a:	687b      	ldr	r3, [r7, #4]
 802174c:	7b9b      	ldrb	r3, [r3, #14]
 802174e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8021750:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	7bdb      	ldrb	r3, [r3, #15]
 8021756:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8021758:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	7a5b      	ldrb	r3, [r3, #9]
 802175e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8021760:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	7a1b      	ldrb	r3, [r3, #8]
 8021766:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8021768:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 802176a:	687a      	ldr	r2, [r7, #4]
 802176c:	7812      	ldrb	r2, [r2, #0]
 802176e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8021770:	4a04      	ldr	r2, [pc, #16]	@ (8021784 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8021772:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8021774:	6113      	str	r3, [r2, #16]
}
 8021776:	bf00      	nop
 8021778:	370c      	adds	r7, #12
 802177a:	46bd      	mov	sp, r7
 802177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021780:	4770      	bx	lr
 8021782:	bf00      	nop
 8021784:	e000ed90 	.word	0xe000ed90

08021788 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8021788:	b480      	push	{r7}
 802178a:	b089      	sub	sp, #36	@ 0x24
 802178c:	af00      	add	r7, sp, #0
 802178e:	6078      	str	r0, [r7, #4]
 8021790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8021792:	2300      	movs	r3, #0
 8021794:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8021796:	4b86      	ldr	r3, [pc, #536]	@ (80219b0 <HAL_GPIO_Init+0x228>)
 8021798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 802179a:	e18c      	b.n	8021ab6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 802179c:	683b      	ldr	r3, [r7, #0]
 802179e:	681a      	ldr	r2, [r3, #0]
 80217a0:	2101      	movs	r1, #1
 80217a2:	69fb      	ldr	r3, [r7, #28]
 80217a4:	fa01 f303 	lsl.w	r3, r1, r3
 80217a8:	4013      	ands	r3, r2
 80217aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80217ac:	693b      	ldr	r3, [r7, #16]
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	f000 817e 	beq.w	8021ab0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80217b4:	683b      	ldr	r3, [r7, #0]
 80217b6:	685b      	ldr	r3, [r3, #4]
 80217b8:	f003 0303 	and.w	r3, r3, #3
 80217bc:	2b01      	cmp	r3, #1
 80217be:	d005      	beq.n	80217cc <HAL_GPIO_Init+0x44>
 80217c0:	683b      	ldr	r3, [r7, #0]
 80217c2:	685b      	ldr	r3, [r3, #4]
 80217c4:	f003 0303 	and.w	r3, r3, #3
 80217c8:	2b02      	cmp	r3, #2
 80217ca:	d130      	bne.n	802182e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80217cc:	687b      	ldr	r3, [r7, #4]
 80217ce:	689b      	ldr	r3, [r3, #8]
 80217d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80217d2:	69fb      	ldr	r3, [r7, #28]
 80217d4:	005b      	lsls	r3, r3, #1
 80217d6:	2203      	movs	r2, #3
 80217d8:	fa02 f303 	lsl.w	r3, r2, r3
 80217dc:	43db      	mvns	r3, r3
 80217de:	69ba      	ldr	r2, [r7, #24]
 80217e0:	4013      	ands	r3, r2
 80217e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80217e4:	683b      	ldr	r3, [r7, #0]
 80217e6:	68da      	ldr	r2, [r3, #12]
 80217e8:	69fb      	ldr	r3, [r7, #28]
 80217ea:	005b      	lsls	r3, r3, #1
 80217ec:	fa02 f303 	lsl.w	r3, r2, r3
 80217f0:	69ba      	ldr	r2, [r7, #24]
 80217f2:	4313      	orrs	r3, r2
 80217f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80217f6:	687b      	ldr	r3, [r7, #4]
 80217f8:	69ba      	ldr	r2, [r7, #24]
 80217fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	685b      	ldr	r3, [r3, #4]
 8021800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8021802:	2201      	movs	r2, #1
 8021804:	69fb      	ldr	r3, [r7, #28]
 8021806:	fa02 f303 	lsl.w	r3, r2, r3
 802180a:	43db      	mvns	r3, r3
 802180c:	69ba      	ldr	r2, [r7, #24]
 802180e:	4013      	ands	r3, r2
 8021810:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8021812:	683b      	ldr	r3, [r7, #0]
 8021814:	685b      	ldr	r3, [r3, #4]
 8021816:	091b      	lsrs	r3, r3, #4
 8021818:	f003 0201 	and.w	r2, r3, #1
 802181c:	69fb      	ldr	r3, [r7, #28]
 802181e:	fa02 f303 	lsl.w	r3, r2, r3
 8021822:	69ba      	ldr	r2, [r7, #24]
 8021824:	4313      	orrs	r3, r2
 8021826:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8021828:	687b      	ldr	r3, [r7, #4]
 802182a:	69ba      	ldr	r2, [r7, #24]
 802182c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 802182e:	683b      	ldr	r3, [r7, #0]
 8021830:	685b      	ldr	r3, [r3, #4]
 8021832:	f003 0303 	and.w	r3, r3, #3
 8021836:	2b03      	cmp	r3, #3
 8021838:	d017      	beq.n	802186a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 802183a:	687b      	ldr	r3, [r7, #4]
 802183c:	68db      	ldr	r3, [r3, #12]
 802183e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8021840:	69fb      	ldr	r3, [r7, #28]
 8021842:	005b      	lsls	r3, r3, #1
 8021844:	2203      	movs	r2, #3
 8021846:	fa02 f303 	lsl.w	r3, r2, r3
 802184a:	43db      	mvns	r3, r3
 802184c:	69ba      	ldr	r2, [r7, #24]
 802184e:	4013      	ands	r3, r2
 8021850:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8021852:	683b      	ldr	r3, [r7, #0]
 8021854:	689a      	ldr	r2, [r3, #8]
 8021856:	69fb      	ldr	r3, [r7, #28]
 8021858:	005b      	lsls	r3, r3, #1
 802185a:	fa02 f303 	lsl.w	r3, r2, r3
 802185e:	69ba      	ldr	r2, [r7, #24]
 8021860:	4313      	orrs	r3, r2
 8021862:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8021864:	687b      	ldr	r3, [r7, #4]
 8021866:	69ba      	ldr	r2, [r7, #24]
 8021868:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 802186a:	683b      	ldr	r3, [r7, #0]
 802186c:	685b      	ldr	r3, [r3, #4]
 802186e:	f003 0303 	and.w	r3, r3, #3
 8021872:	2b02      	cmp	r3, #2
 8021874:	d123      	bne.n	80218be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8021876:	69fb      	ldr	r3, [r7, #28]
 8021878:	08da      	lsrs	r2, r3, #3
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	3208      	adds	r2, #8
 802187e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8021884:	69fb      	ldr	r3, [r7, #28]
 8021886:	f003 0307 	and.w	r3, r3, #7
 802188a:	009b      	lsls	r3, r3, #2
 802188c:	220f      	movs	r2, #15
 802188e:	fa02 f303 	lsl.w	r3, r2, r3
 8021892:	43db      	mvns	r3, r3
 8021894:	69ba      	ldr	r2, [r7, #24]
 8021896:	4013      	ands	r3, r2
 8021898:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 802189a:	683b      	ldr	r3, [r7, #0]
 802189c:	691a      	ldr	r2, [r3, #16]
 802189e:	69fb      	ldr	r3, [r7, #28]
 80218a0:	f003 0307 	and.w	r3, r3, #7
 80218a4:	009b      	lsls	r3, r3, #2
 80218a6:	fa02 f303 	lsl.w	r3, r2, r3
 80218aa:	69ba      	ldr	r2, [r7, #24]
 80218ac:	4313      	orrs	r3, r2
 80218ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80218b0:	69fb      	ldr	r3, [r7, #28]
 80218b2:	08da      	lsrs	r2, r3, #3
 80218b4:	687b      	ldr	r3, [r7, #4]
 80218b6:	3208      	adds	r2, #8
 80218b8:	69b9      	ldr	r1, [r7, #24]
 80218ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80218be:	687b      	ldr	r3, [r7, #4]
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80218c4:	69fb      	ldr	r3, [r7, #28]
 80218c6:	005b      	lsls	r3, r3, #1
 80218c8:	2203      	movs	r2, #3
 80218ca:	fa02 f303 	lsl.w	r3, r2, r3
 80218ce:	43db      	mvns	r3, r3
 80218d0:	69ba      	ldr	r2, [r7, #24]
 80218d2:	4013      	ands	r3, r2
 80218d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80218d6:	683b      	ldr	r3, [r7, #0]
 80218d8:	685b      	ldr	r3, [r3, #4]
 80218da:	f003 0203 	and.w	r2, r3, #3
 80218de:	69fb      	ldr	r3, [r7, #28]
 80218e0:	005b      	lsls	r3, r3, #1
 80218e2:	fa02 f303 	lsl.w	r3, r2, r3
 80218e6:	69ba      	ldr	r2, [r7, #24]
 80218e8:	4313      	orrs	r3, r2
 80218ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80218ec:	687b      	ldr	r3, [r7, #4]
 80218ee:	69ba      	ldr	r2, [r7, #24]
 80218f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80218f2:	683b      	ldr	r3, [r7, #0]
 80218f4:	685b      	ldr	r3, [r3, #4]
 80218f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80218fa:	2b00      	cmp	r3, #0
 80218fc:	f000 80d8 	beq.w	8021ab0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021900:	4b2c      	ldr	r3, [pc, #176]	@ (80219b4 <HAL_GPIO_Init+0x22c>)
 8021902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8021906:	4a2b      	ldr	r2, [pc, #172]	@ (80219b4 <HAL_GPIO_Init+0x22c>)
 8021908:	f043 0302 	orr.w	r3, r3, #2
 802190c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8021910:	4b28      	ldr	r3, [pc, #160]	@ (80219b4 <HAL_GPIO_Init+0x22c>)
 8021912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8021916:	f003 0302 	and.w	r3, r3, #2
 802191a:	60fb      	str	r3, [r7, #12]
 802191c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802191e:	4a26      	ldr	r2, [pc, #152]	@ (80219b8 <HAL_GPIO_Init+0x230>)
 8021920:	69fb      	ldr	r3, [r7, #28]
 8021922:	089b      	lsrs	r3, r3, #2
 8021924:	3302      	adds	r3, #2
 8021926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 802192c:	69fb      	ldr	r3, [r7, #28]
 802192e:	f003 0303 	and.w	r3, r3, #3
 8021932:	009b      	lsls	r3, r3, #2
 8021934:	220f      	movs	r2, #15
 8021936:	fa02 f303 	lsl.w	r3, r2, r3
 802193a:	43db      	mvns	r3, r3
 802193c:	69ba      	ldr	r2, [r7, #24]
 802193e:	4013      	ands	r3, r2
 8021940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8021942:	687b      	ldr	r3, [r7, #4]
 8021944:	4a1d      	ldr	r2, [pc, #116]	@ (80219bc <HAL_GPIO_Init+0x234>)
 8021946:	4293      	cmp	r3, r2
 8021948:	d04a      	beq.n	80219e0 <HAL_GPIO_Init+0x258>
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	4a1c      	ldr	r2, [pc, #112]	@ (80219c0 <HAL_GPIO_Init+0x238>)
 802194e:	4293      	cmp	r3, r2
 8021950:	d02b      	beq.n	80219aa <HAL_GPIO_Init+0x222>
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	4a1b      	ldr	r2, [pc, #108]	@ (80219c4 <HAL_GPIO_Init+0x23c>)
 8021956:	4293      	cmp	r3, r2
 8021958:	d025      	beq.n	80219a6 <HAL_GPIO_Init+0x21e>
 802195a:	687b      	ldr	r3, [r7, #4]
 802195c:	4a1a      	ldr	r2, [pc, #104]	@ (80219c8 <HAL_GPIO_Init+0x240>)
 802195e:	4293      	cmp	r3, r2
 8021960:	d01f      	beq.n	80219a2 <HAL_GPIO_Init+0x21a>
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	4a19      	ldr	r2, [pc, #100]	@ (80219cc <HAL_GPIO_Init+0x244>)
 8021966:	4293      	cmp	r3, r2
 8021968:	d019      	beq.n	802199e <HAL_GPIO_Init+0x216>
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	4a18      	ldr	r2, [pc, #96]	@ (80219d0 <HAL_GPIO_Init+0x248>)
 802196e:	4293      	cmp	r3, r2
 8021970:	d013      	beq.n	802199a <HAL_GPIO_Init+0x212>
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	4a17      	ldr	r2, [pc, #92]	@ (80219d4 <HAL_GPIO_Init+0x24c>)
 8021976:	4293      	cmp	r3, r2
 8021978:	d00d      	beq.n	8021996 <HAL_GPIO_Init+0x20e>
 802197a:	687b      	ldr	r3, [r7, #4]
 802197c:	4a16      	ldr	r2, [pc, #88]	@ (80219d8 <HAL_GPIO_Init+0x250>)
 802197e:	4293      	cmp	r3, r2
 8021980:	d007      	beq.n	8021992 <HAL_GPIO_Init+0x20a>
 8021982:	687b      	ldr	r3, [r7, #4]
 8021984:	4a15      	ldr	r2, [pc, #84]	@ (80219dc <HAL_GPIO_Init+0x254>)
 8021986:	4293      	cmp	r3, r2
 8021988:	d101      	bne.n	802198e <HAL_GPIO_Init+0x206>
 802198a:	2309      	movs	r3, #9
 802198c:	e029      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 802198e:	230a      	movs	r3, #10
 8021990:	e027      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 8021992:	2307      	movs	r3, #7
 8021994:	e025      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 8021996:	2306      	movs	r3, #6
 8021998:	e023      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 802199a:	2305      	movs	r3, #5
 802199c:	e021      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 802199e:	2304      	movs	r3, #4
 80219a0:	e01f      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 80219a2:	2303      	movs	r3, #3
 80219a4:	e01d      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 80219a6:	2302      	movs	r3, #2
 80219a8:	e01b      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 80219aa:	2301      	movs	r3, #1
 80219ac:	e019      	b.n	80219e2 <HAL_GPIO_Init+0x25a>
 80219ae:	bf00      	nop
 80219b0:	58000080 	.word	0x58000080
 80219b4:	58024400 	.word	0x58024400
 80219b8:	58000400 	.word	0x58000400
 80219bc:	58020000 	.word	0x58020000
 80219c0:	58020400 	.word	0x58020400
 80219c4:	58020800 	.word	0x58020800
 80219c8:	58020c00 	.word	0x58020c00
 80219cc:	58021000 	.word	0x58021000
 80219d0:	58021400 	.word	0x58021400
 80219d4:	58021800 	.word	0x58021800
 80219d8:	58021c00 	.word	0x58021c00
 80219dc:	58022400 	.word	0x58022400
 80219e0:	2300      	movs	r3, #0
 80219e2:	69fa      	ldr	r2, [r7, #28]
 80219e4:	f002 0203 	and.w	r2, r2, #3
 80219e8:	0092      	lsls	r2, r2, #2
 80219ea:	4093      	lsls	r3, r2
 80219ec:	69ba      	ldr	r2, [r7, #24]
 80219ee:	4313      	orrs	r3, r2
 80219f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80219f2:	4938      	ldr	r1, [pc, #224]	@ (8021ad4 <HAL_GPIO_Init+0x34c>)
 80219f4:	69fb      	ldr	r3, [r7, #28]
 80219f6:	089b      	lsrs	r3, r3, #2
 80219f8:	3302      	adds	r3, #2
 80219fa:	69ba      	ldr	r2, [r7, #24]
 80219fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8021a00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a04:	681b      	ldr	r3, [r3, #0]
 8021a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021a08:	693b      	ldr	r3, [r7, #16]
 8021a0a:	43db      	mvns	r3, r3
 8021a0c:	69ba      	ldr	r2, [r7, #24]
 8021a0e:	4013      	ands	r3, r2
 8021a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8021a12:	683b      	ldr	r3, [r7, #0]
 8021a14:	685b      	ldr	r3, [r3, #4]
 8021a16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d003      	beq.n	8021a26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8021a1e:	69ba      	ldr	r2, [r7, #24]
 8021a20:	693b      	ldr	r3, [r7, #16]
 8021a22:	4313      	orrs	r3, r2
 8021a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8021a26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021a2a:	69bb      	ldr	r3, [r7, #24]
 8021a2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8021a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a32:	685b      	ldr	r3, [r3, #4]
 8021a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021a36:	693b      	ldr	r3, [r7, #16]
 8021a38:	43db      	mvns	r3, r3
 8021a3a:	69ba      	ldr	r2, [r7, #24]
 8021a3c:	4013      	ands	r3, r2
 8021a3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8021a40:	683b      	ldr	r3, [r7, #0]
 8021a42:	685b      	ldr	r3, [r3, #4]
 8021a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d003      	beq.n	8021a54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8021a4c:	69ba      	ldr	r2, [r7, #24]
 8021a4e:	693b      	ldr	r3, [r7, #16]
 8021a50:	4313      	orrs	r3, r2
 8021a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8021a54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021a58:	69bb      	ldr	r3, [r7, #24]
 8021a5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8021a5c:	697b      	ldr	r3, [r7, #20]
 8021a5e:	685b      	ldr	r3, [r3, #4]
 8021a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021a62:	693b      	ldr	r3, [r7, #16]
 8021a64:	43db      	mvns	r3, r3
 8021a66:	69ba      	ldr	r2, [r7, #24]
 8021a68:	4013      	ands	r3, r2
 8021a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8021a6c:	683b      	ldr	r3, [r7, #0]
 8021a6e:	685b      	ldr	r3, [r3, #4]
 8021a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d003      	beq.n	8021a80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8021a78:	69ba      	ldr	r2, [r7, #24]
 8021a7a:	693b      	ldr	r3, [r7, #16]
 8021a7c:	4313      	orrs	r3, r2
 8021a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8021a80:	697b      	ldr	r3, [r7, #20]
 8021a82:	69ba      	ldr	r2, [r7, #24]
 8021a84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8021a86:	697b      	ldr	r3, [r7, #20]
 8021a88:	681b      	ldr	r3, [r3, #0]
 8021a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8021a8c:	693b      	ldr	r3, [r7, #16]
 8021a8e:	43db      	mvns	r3, r3
 8021a90:	69ba      	ldr	r2, [r7, #24]
 8021a92:	4013      	ands	r3, r2
 8021a94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8021a96:	683b      	ldr	r3, [r7, #0]
 8021a98:	685b      	ldr	r3, [r3, #4]
 8021a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021a9e:	2b00      	cmp	r3, #0
 8021aa0:	d003      	beq.n	8021aaa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8021aa2:	69ba      	ldr	r2, [r7, #24]
 8021aa4:	693b      	ldr	r3, [r7, #16]
 8021aa6:	4313      	orrs	r3, r2
 8021aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8021aaa:	697b      	ldr	r3, [r7, #20]
 8021aac:	69ba      	ldr	r2, [r7, #24]
 8021aae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8021ab0:	69fb      	ldr	r3, [r7, #28]
 8021ab2:	3301      	adds	r3, #1
 8021ab4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8021ab6:	683b      	ldr	r3, [r7, #0]
 8021ab8:	681a      	ldr	r2, [r3, #0]
 8021aba:	69fb      	ldr	r3, [r7, #28]
 8021abc:	fa22 f303 	lsr.w	r3, r2, r3
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	f47f ae6b 	bne.w	802179c <HAL_GPIO_Init+0x14>
  }
}
 8021ac6:	bf00      	nop
 8021ac8:	bf00      	nop
 8021aca:	3724      	adds	r7, #36	@ 0x24
 8021acc:	46bd      	mov	sp, r7
 8021ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ad2:	4770      	bx	lr
 8021ad4:	58000400 	.word	0x58000400

08021ad8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8021ad8:	b480      	push	{r7}
 8021ada:	b087      	sub	sp, #28
 8021adc:	af00      	add	r7, sp, #0
 8021ade:	6078      	str	r0, [r7, #4]
 8021ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8021ae2:	2300      	movs	r3, #0
 8021ae4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8021ae6:	4b72      	ldr	r3, [pc, #456]	@ (8021cb0 <HAL_GPIO_DeInit+0x1d8>)
 8021ae8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8021aea:	e0d3      	b.n	8021c94 <HAL_GPIO_DeInit+0x1bc>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8021aec:	2201      	movs	r2, #1
 8021aee:	697b      	ldr	r3, [r7, #20]
 8021af0:	fa02 f303 	lsl.w	r3, r2, r3
 8021af4:	683a      	ldr	r2, [r7, #0]
 8021af6:	4013      	ands	r3, r2
 8021af8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8021afa:	68fb      	ldr	r3, [r7, #12]
 8021afc:	2b00      	cmp	r3, #0
 8021afe:	f000 80c6 	beq.w	8021c8e <HAL_GPIO_DeInit+0x1b6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8021b02:	4a6c      	ldr	r2, [pc, #432]	@ (8021cb4 <HAL_GPIO_DeInit+0x1dc>)
 8021b04:	697b      	ldr	r3, [r7, #20]
 8021b06:	089b      	lsrs	r3, r3, #2
 8021b08:	3302      	adds	r3, #2
 8021b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021b0e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8021b10:	697b      	ldr	r3, [r7, #20]
 8021b12:	f003 0303 	and.w	r3, r3, #3
 8021b16:	009b      	lsls	r3, r3, #2
 8021b18:	220f      	movs	r2, #15
 8021b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8021b1e:	68ba      	ldr	r2, [r7, #8]
 8021b20:	4013      	ands	r3, r2
 8021b22:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8021b24:	687b      	ldr	r3, [r7, #4]
 8021b26:	4a64      	ldr	r2, [pc, #400]	@ (8021cb8 <HAL_GPIO_DeInit+0x1e0>)
 8021b28:	4293      	cmp	r3, r2
 8021b2a:	d031      	beq.n	8021b90 <HAL_GPIO_DeInit+0xb8>
 8021b2c:	687b      	ldr	r3, [r7, #4]
 8021b2e:	4a63      	ldr	r2, [pc, #396]	@ (8021cbc <HAL_GPIO_DeInit+0x1e4>)
 8021b30:	4293      	cmp	r3, r2
 8021b32:	d02b      	beq.n	8021b8c <HAL_GPIO_DeInit+0xb4>
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	4a62      	ldr	r2, [pc, #392]	@ (8021cc0 <HAL_GPIO_DeInit+0x1e8>)
 8021b38:	4293      	cmp	r3, r2
 8021b3a:	d025      	beq.n	8021b88 <HAL_GPIO_DeInit+0xb0>
 8021b3c:	687b      	ldr	r3, [r7, #4]
 8021b3e:	4a61      	ldr	r2, [pc, #388]	@ (8021cc4 <HAL_GPIO_DeInit+0x1ec>)
 8021b40:	4293      	cmp	r3, r2
 8021b42:	d01f      	beq.n	8021b84 <HAL_GPIO_DeInit+0xac>
 8021b44:	687b      	ldr	r3, [r7, #4]
 8021b46:	4a60      	ldr	r2, [pc, #384]	@ (8021cc8 <HAL_GPIO_DeInit+0x1f0>)
 8021b48:	4293      	cmp	r3, r2
 8021b4a:	d019      	beq.n	8021b80 <HAL_GPIO_DeInit+0xa8>
 8021b4c:	687b      	ldr	r3, [r7, #4]
 8021b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8021ccc <HAL_GPIO_DeInit+0x1f4>)
 8021b50:	4293      	cmp	r3, r2
 8021b52:	d013      	beq.n	8021b7c <HAL_GPIO_DeInit+0xa4>
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	4a5e      	ldr	r2, [pc, #376]	@ (8021cd0 <HAL_GPIO_DeInit+0x1f8>)
 8021b58:	4293      	cmp	r3, r2
 8021b5a:	d00d      	beq.n	8021b78 <HAL_GPIO_DeInit+0xa0>
 8021b5c:	687b      	ldr	r3, [r7, #4]
 8021b5e:	4a5d      	ldr	r2, [pc, #372]	@ (8021cd4 <HAL_GPIO_DeInit+0x1fc>)
 8021b60:	4293      	cmp	r3, r2
 8021b62:	d007      	beq.n	8021b74 <HAL_GPIO_DeInit+0x9c>
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	4a5c      	ldr	r2, [pc, #368]	@ (8021cd8 <HAL_GPIO_DeInit+0x200>)
 8021b68:	4293      	cmp	r3, r2
 8021b6a:	d101      	bne.n	8021b70 <HAL_GPIO_DeInit+0x98>
 8021b6c:	2309      	movs	r3, #9
 8021b6e:	e010      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b70:	230a      	movs	r3, #10
 8021b72:	e00e      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b74:	2307      	movs	r3, #7
 8021b76:	e00c      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b78:	2306      	movs	r3, #6
 8021b7a:	e00a      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b7c:	2305      	movs	r3, #5
 8021b7e:	e008      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b80:	2304      	movs	r3, #4
 8021b82:	e006      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b84:	2303      	movs	r3, #3
 8021b86:	e004      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b88:	2302      	movs	r3, #2
 8021b8a:	e002      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b8c:	2301      	movs	r3, #1
 8021b8e:	e000      	b.n	8021b92 <HAL_GPIO_DeInit+0xba>
 8021b90:	2300      	movs	r3, #0
 8021b92:	697a      	ldr	r2, [r7, #20]
 8021b94:	f002 0203 	and.w	r2, r2, #3
 8021b98:	0092      	lsls	r2, r2, #2
 8021b9a:	4093      	lsls	r3, r2
 8021b9c:	68ba      	ldr	r2, [r7, #8]
 8021b9e:	429a      	cmp	r2, r3
 8021ba0:	d136      	bne.n	8021c10 <HAL_GPIO_DeInit+0x138>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8021ba2:	693b      	ldr	r3, [r7, #16]
 8021ba4:	681a      	ldr	r2, [r3, #0]
 8021ba6:	68fb      	ldr	r3, [r7, #12]
 8021ba8:	43db      	mvns	r3, r3
 8021baa:	401a      	ands	r2, r3
 8021bac:	693b      	ldr	r3, [r7, #16]
 8021bae:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8021bb0:	693b      	ldr	r3, [r7, #16]
 8021bb2:	685a      	ldr	r2, [r3, #4]
 8021bb4:	68fb      	ldr	r3, [r7, #12]
 8021bb6:	43db      	mvns	r3, r3
 8021bb8:	401a      	ands	r2, r3
 8021bba:	693b      	ldr	r3, [r7, #16]
 8021bbc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8021bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021bc2:	685a      	ldr	r2, [r3, #4]
 8021bc4:	68fb      	ldr	r3, [r7, #12]
 8021bc6:	43db      	mvns	r3, r3
 8021bc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8021bcc:	4013      	ands	r3, r2
 8021bce:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8021bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021bd4:	681a      	ldr	r2, [r3, #0]
 8021bd6:	68fb      	ldr	r3, [r7, #12]
 8021bd8:	43db      	mvns	r3, r3
 8021bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8021bde:	4013      	ands	r3, r2
 8021be0:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8021be2:	697b      	ldr	r3, [r7, #20]
 8021be4:	f003 0303 	and.w	r3, r3, #3
 8021be8:	009b      	lsls	r3, r3, #2
 8021bea:	220f      	movs	r2, #15
 8021bec:	fa02 f303 	lsl.w	r3, r2, r3
 8021bf0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8021bf2:	4a30      	ldr	r2, [pc, #192]	@ (8021cb4 <HAL_GPIO_DeInit+0x1dc>)
 8021bf4:	697b      	ldr	r3, [r7, #20]
 8021bf6:	089b      	lsrs	r3, r3, #2
 8021bf8:	3302      	adds	r3, #2
 8021bfa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8021bfe:	68bb      	ldr	r3, [r7, #8]
 8021c00:	43da      	mvns	r2, r3
 8021c02:	482c      	ldr	r0, [pc, #176]	@ (8021cb4 <HAL_GPIO_DeInit+0x1dc>)
 8021c04:	697b      	ldr	r3, [r7, #20]
 8021c06:	089b      	lsrs	r3, r3, #2
 8021c08:	400a      	ands	r2, r1
 8021c0a:	3302      	adds	r3, #2
 8021c0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	681a      	ldr	r2, [r3, #0]
 8021c14:	697b      	ldr	r3, [r7, #20]
 8021c16:	005b      	lsls	r3, r3, #1
 8021c18:	2103      	movs	r1, #3
 8021c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8021c1e:	431a      	orrs	r2, r3
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8021c24:	697b      	ldr	r3, [r7, #20]
 8021c26:	08da      	lsrs	r2, r3, #3
 8021c28:	687b      	ldr	r3, [r7, #4]
 8021c2a:	3208      	adds	r2, #8
 8021c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021c30:	697b      	ldr	r3, [r7, #20]
 8021c32:	f003 0307 	and.w	r3, r3, #7
 8021c36:	009b      	lsls	r3, r3, #2
 8021c38:	220f      	movs	r2, #15
 8021c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8021c3e:	43db      	mvns	r3, r3
 8021c40:	697a      	ldr	r2, [r7, #20]
 8021c42:	08d2      	lsrs	r2, r2, #3
 8021c44:	4019      	ands	r1, r3
 8021c46:	687b      	ldr	r3, [r7, #4]
 8021c48:	3208      	adds	r2, #8
 8021c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	68da      	ldr	r2, [r3, #12]
 8021c52:	697b      	ldr	r3, [r7, #20]
 8021c54:	005b      	lsls	r3, r3, #1
 8021c56:	2103      	movs	r1, #3
 8021c58:	fa01 f303 	lsl.w	r3, r1, r3
 8021c5c:	43db      	mvns	r3, r3
 8021c5e:	401a      	ands	r2, r3
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8021c64:	687b      	ldr	r3, [r7, #4]
 8021c66:	685a      	ldr	r2, [r3, #4]
 8021c68:	2101      	movs	r1, #1
 8021c6a:	697b      	ldr	r3, [r7, #20]
 8021c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8021c70:	43db      	mvns	r3, r3
 8021c72:	401a      	ands	r2, r3
 8021c74:	687b      	ldr	r3, [r7, #4]
 8021c76:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8021c78:	687b      	ldr	r3, [r7, #4]
 8021c7a:	689a      	ldr	r2, [r3, #8]
 8021c7c:	697b      	ldr	r3, [r7, #20]
 8021c7e:	005b      	lsls	r3, r3, #1
 8021c80:	2103      	movs	r1, #3
 8021c82:	fa01 f303 	lsl.w	r3, r1, r3
 8021c86:	43db      	mvns	r3, r3
 8021c88:	401a      	ands	r2, r3
 8021c8a:	687b      	ldr	r3, [r7, #4]
 8021c8c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8021c8e:	697b      	ldr	r3, [r7, #20]
 8021c90:	3301      	adds	r3, #1
 8021c92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8021c94:	683a      	ldr	r2, [r7, #0]
 8021c96:	697b      	ldr	r3, [r7, #20]
 8021c98:	fa22 f303 	lsr.w	r3, r2, r3
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	f47f af25 	bne.w	8021aec <HAL_GPIO_DeInit+0x14>
  }
}
 8021ca2:	bf00      	nop
 8021ca4:	bf00      	nop
 8021ca6:	371c      	adds	r7, #28
 8021ca8:	46bd      	mov	sp, r7
 8021caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cae:	4770      	bx	lr
 8021cb0:	58000080 	.word	0x58000080
 8021cb4:	58000400 	.word	0x58000400
 8021cb8:	58020000 	.word	0x58020000
 8021cbc:	58020400 	.word	0x58020400
 8021cc0:	58020800 	.word	0x58020800
 8021cc4:	58020c00 	.word	0x58020c00
 8021cc8:	58021000 	.word	0x58021000
 8021ccc:	58021400 	.word	0x58021400
 8021cd0:	58021800 	.word	0x58021800
 8021cd4:	58021c00 	.word	0x58021c00
 8021cd8:	58022400 	.word	0x58022400

08021cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8021cdc:	b480      	push	{r7}
 8021cde:	b083      	sub	sp, #12
 8021ce0:	af00      	add	r7, sp, #0
 8021ce2:	6078      	str	r0, [r7, #4]
 8021ce4:	460b      	mov	r3, r1
 8021ce6:	807b      	strh	r3, [r7, #2]
 8021ce8:	4613      	mov	r3, r2
 8021cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8021cec:	787b      	ldrb	r3, [r7, #1]
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d003      	beq.n	8021cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8021cf2:	887a      	ldrh	r2, [r7, #2]
 8021cf4:	687b      	ldr	r3, [r7, #4]
 8021cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8021cf8:	e003      	b.n	8021d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8021cfa:	887b      	ldrh	r3, [r7, #2]
 8021cfc:	041a      	lsls	r2, r3, #16
 8021cfe:	687b      	ldr	r3, [r7, #4]
 8021d00:	619a      	str	r2, [r3, #24]
}
 8021d02:	bf00      	nop
 8021d04:	370c      	adds	r7, #12
 8021d06:	46bd      	mov	sp, r7
 8021d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d0c:	4770      	bx	lr

08021d0e <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8021d0e:	b580      	push	{r7, lr}
 8021d10:	b084      	sub	sp, #16
 8021d12:	af00      	add	r7, sp, #0
 8021d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 8021d16:	f7ff fbcf 	bl	80214b8 <HAL_GetTick>
 8021d1a:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	d101      	bne.n	8021d26 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 8021d22:	2301      	movs	r3, #1
 8021d24:	e04a      	b.n	8021dbc <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8021d26:	687b      	ldr	r3, [r7, #4]
 8021d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8021d2c:	b2db      	uxtb	r3, r3
 8021d2e:	2b02      	cmp	r3, #2
 8021d30:	d008      	beq.n	8021d44 <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8021d32:	687b      	ldr	r3, [r7, #4]
 8021d34:	2280      	movs	r2, #128	@ 0x80
 8021d36:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8021d38:	687b      	ldr	r3, [r7, #4]
 8021d3a:	2200      	movs	r2, #0
 8021d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8021d40:	2301      	movs	r3, #1
 8021d42:	e03b      	b.n	8021dbc <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	681b      	ldr	r3, [r3, #0]
 8021d48:	68da      	ldr	r2, [r3, #12]
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	681b      	ldr	r3, [r3, #0]
 8021d4e:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8021d52:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	681b      	ldr	r3, [r3, #0]
 8021d58:	68da      	ldr	r2, [r3, #12]
 8021d5a:	687b      	ldr	r3, [r7, #4]
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	f022 0201 	bic.w	r2, r2, #1
 8021d62:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8021d64:	e016      	b.n	8021d94 <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8021d66:	f7ff fba7 	bl	80214b8 <HAL_GetTick>
 8021d6a:	4602      	mov	r2, r0
 8021d6c:	68fb      	ldr	r3, [r7, #12]
 8021d6e:	1ad3      	subs	r3, r2, r3
 8021d70:	2b05      	cmp	r3, #5
 8021d72:	d90f      	bls.n	8021d94 <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8021d74:	687b      	ldr	r3, [r7, #4]
 8021d76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8021d78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	2200      	movs	r2, #0
 8021d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	2203      	movs	r2, #3
 8021d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 8021d90:	2301      	movs	r3, #1
 8021d92:	e013      	b.n	8021dbc <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8021d94:	687b      	ldr	r3, [r7, #4]
 8021d96:	681b      	ldr	r3, [r3, #0]
 8021d98:	68db      	ldr	r3, [r3, #12]
 8021d9a:	f003 0301 	and.w	r3, r3, #1
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d1e1      	bne.n	8021d66 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	681b      	ldr	r3, [r3, #0]
 8021da6:	221f      	movs	r2, #31
 8021da8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	2200      	movs	r2, #0
 8021dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 8021db2:	687b      	ldr	r3, [r7, #4]
 8021db4:	2201      	movs	r2, #1
 8021db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 8021dba:	2300      	movs	r3, #0
}
 8021dbc:	4618      	mov	r0, r3
 8021dbe:	3710      	adds	r7, #16
 8021dc0:	46bd      	mov	sp, r7
 8021dc2:	bd80      	pop	{r7, pc}

08021dc4 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8021dc4:	b580      	push	{r7, lr}
 8021dc6:	b084      	sub	sp, #16
 8021dc8:	af00      	add	r7, sp, #0
 8021dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8021dcc:	2300      	movs	r3, #0
 8021dce:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d102      	bne.n	8021ddc <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8021dd6:	2301      	movs	r3, #1
 8021dd8:	73fb      	strb	r3, [r7, #15]
 8021dda:	e015      	b.n	8021e08 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 8021ddc:	687b      	ldr	r3, [r7, #4]
 8021dde:	681b      	ldr	r3, [r3, #0]
 8021de0:	681a      	ldr	r2, [r3, #0]
 8021de2:	687b      	ldr	r3, [r7, #4]
 8021de4:	681b      	ldr	r3, [r3, #0]
 8021de6:	f022 0201 	bic.w	r2, r2, #1
 8021dea:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8021dec:	687b      	ldr	r3, [r7, #4]
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	689a      	ldr	r2, [r3, #8]
 8021df2:	687b      	ldr	r3, [r7, #4]
 8021df4:	681b      	ldr	r3, [r3, #0]
 8021df6:	f022 0202 	bic.w	r2, r2, #2
 8021dfa:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8021dfc:	6878      	ldr	r0, [r7, #4]
 8021dfe:	f7ff f809 	bl	8020e14 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8021e02:	687b      	ldr	r3, [r7, #4]
 8021e04:	2200      	movs	r2, #0
 8021e06:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  return status;
 8021e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8021e0a:	4618      	mov	r0, r3
 8021e0c:	3710      	adds	r7, #16
 8021e0e:	46bd      	mov	sp, r7
 8021e10:	bd80      	pop	{r7, pc}

08021e12 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8021e12:	b580      	push	{r7, lr}
 8021e14:	b088      	sub	sp, #32
 8021e16:	af02      	add	r7, sp, #8
 8021e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8021e1a:	2300      	movs	r3, #0
 8021e1c:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8021e1e:	f7ff fb4b 	bl	80214b8 <HAL_GetTick>
 8021e22:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8021e28:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8021e2a:	68fb      	ldr	r3, [r7, #12]
 8021e2c:	f003 0308 	and.w	r3, r3, #8
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d104      	bne.n	8021e3e <HAL_OSPI_Abort+0x2c>
 8021e34:	68fb      	ldr	r3, [r7, #12]
 8021e36:	f003 0304 	and.w	r3, r3, #4
 8021e3a:	2b00      	cmp	r3, #0
 8021e3c:	d052      	beq.n	8021ee4 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8021e3e:	687b      	ldr	r3, [r7, #4]
 8021e40:	681b      	ldr	r3, [r3, #0]
 8021e42:	681b      	ldr	r3, [r3, #0]
 8021e44:	f003 0304 	and.w	r3, r3, #4
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d014      	beq.n	8021e76 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	681b      	ldr	r3, [r3, #0]
 8021e50:	681a      	ldr	r2, [r3, #0]
 8021e52:	687b      	ldr	r3, [r7, #4]
 8021e54:	681b      	ldr	r3, [r3, #0]
 8021e56:	f022 0204 	bic.w	r2, r2, #4
 8021e5a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_MDMA_Abort(hospi->hmdma);
 8021e5c:	687b      	ldr	r3, [r7, #4]
 8021e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8021e60:	4618      	mov	r0, r3
 8021e62:	f7ff ff54 	bl	8021d0e <HAL_MDMA_Abort>
 8021e66:	4603      	mov	r3, r0
 8021e68:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8021e6a:	7dfb      	ldrb	r3, [r7, #23]
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	d002      	beq.n	8021e76 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	2204      	movs	r2, #4
 8021e74:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	681b      	ldr	r3, [r3, #0]
 8021e7a:	6a1b      	ldr	r3, [r3, #32]
 8021e7c:	f003 0320 	and.w	r3, r3, #32
 8021e80:	2b00      	cmp	r3, #0
 8021e82:	d02b      	beq.n	8021edc <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	681b      	ldr	r3, [r3, #0]
 8021e88:	681a      	ldr	r2, [r3, #0]
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	681b      	ldr	r3, [r3, #0]
 8021e8e:	f042 0202 	orr.w	r2, r2, #2
 8021e92:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021e98:	9300      	str	r3, [sp, #0]
 8021e9a:	693b      	ldr	r3, [r7, #16]
 8021e9c:	2201      	movs	r2, #1
 8021e9e:	2102      	movs	r1, #2
 8021ea0:	6878      	ldr	r0, [r7, #4]
 8021ea2:	f000 f82b 	bl	8021efc <OSPI_WaitFlagStateUntilTimeout>
 8021ea6:	4603      	mov	r3, r0
 8021ea8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8021eaa:	7dfb      	ldrb	r3, [r7, #23]
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	d11f      	bne.n	8021ef0 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	2202      	movs	r2, #2
 8021eb6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8021eb8:	687b      	ldr	r3, [r7, #4]
 8021eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021ebc:	9300      	str	r3, [sp, #0]
 8021ebe:	693b      	ldr	r3, [r7, #16]
 8021ec0:	2200      	movs	r2, #0
 8021ec2:	2120      	movs	r1, #32
 8021ec4:	6878      	ldr	r0, [r7, #4]
 8021ec6:	f000 f819 	bl	8021efc <OSPI_WaitFlagStateUntilTimeout>
 8021eca:	4603      	mov	r3, r0
 8021ecc:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8021ece:	7dfb      	ldrb	r3, [r7, #23]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	d10d      	bne.n	8021ef0 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8021ed4:	687b      	ldr	r3, [r7, #4]
 8021ed6:	2202      	movs	r2, #2
 8021ed8:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8021eda:	e009      	b.n	8021ef0 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8021edc:	687b      	ldr	r3, [r7, #4]
 8021ede:	2202      	movs	r2, #2
 8021ee0:	651a      	str	r2, [r3, #80]	@ 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8021ee2:	e005      	b.n	8021ef0 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8021ee4:	2301      	movs	r3, #1
 8021ee6:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8021ee8:	687b      	ldr	r3, [r7, #4]
 8021eea:	2210      	movs	r2, #16
 8021eec:	655a      	str	r2, [r3, #84]	@ 0x54
 8021eee:	e000      	b.n	8021ef2 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8021ef0:	bf00      	nop
  }

  /* Return function status */
  return status;
 8021ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8021ef4:	4618      	mov	r0, r3
 8021ef6:	3718      	adds	r7, #24
 8021ef8:	46bd      	mov	sp, r7
 8021efa:	bd80      	pop	{r7, pc}

08021efc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8021efc:	b580      	push	{r7, lr}
 8021efe:	b084      	sub	sp, #16
 8021f00:	af00      	add	r7, sp, #0
 8021f02:	60f8      	str	r0, [r7, #12]
 8021f04:	60b9      	str	r1, [r7, #8]
 8021f06:	603b      	str	r3, [r7, #0]
 8021f08:	4613      	mov	r3, r2
 8021f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8021f0c:	e01a      	b.n	8021f44 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021f0e:	69bb      	ldr	r3, [r7, #24]
 8021f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021f14:	d016      	beq.n	8021f44 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8021f16:	f7ff facf 	bl	80214b8 <HAL_GetTick>
 8021f1a:	4602      	mov	r2, r0
 8021f1c:	683b      	ldr	r3, [r7, #0]
 8021f1e:	1ad3      	subs	r3, r2, r3
 8021f20:	69ba      	ldr	r2, [r7, #24]
 8021f22:	429a      	cmp	r2, r3
 8021f24:	d302      	bcc.n	8021f2c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8021f26:	69bb      	ldr	r3, [r7, #24]
 8021f28:	2b00      	cmp	r3, #0
 8021f2a:	d10b      	bne.n	8021f44 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8021f2c:	68fb      	ldr	r3, [r7, #12]
 8021f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8021f32:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8021f34:	68fb      	ldr	r3, [r7, #12]
 8021f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021f38:	f043 0201 	orr.w	r2, r3, #1
 8021f3c:	68fb      	ldr	r3, [r7, #12]
 8021f3e:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8021f40:	2301      	movs	r3, #1
 8021f42:	e00e      	b.n	8021f62 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8021f44:	68fb      	ldr	r3, [r7, #12]
 8021f46:	681b      	ldr	r3, [r3, #0]
 8021f48:	6a1a      	ldr	r2, [r3, #32]
 8021f4a:	68bb      	ldr	r3, [r7, #8]
 8021f4c:	4013      	ands	r3, r2
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	bf14      	ite	ne
 8021f52:	2301      	movne	r3, #1
 8021f54:	2300      	moveq	r3, #0
 8021f56:	b2db      	uxtb	r3, r3
 8021f58:	461a      	mov	r2, r3
 8021f5a:	79fb      	ldrb	r3, [r7, #7]
 8021f5c:	429a      	cmp	r2, r3
 8021f5e:	d1d6      	bne.n	8021f0e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8021f60:	2300      	movs	r3, #0
}
 8021f62:	4618      	mov	r0, r3
 8021f64:	3710      	adds	r7, #16
 8021f66:	46bd      	mov	sp, r7
 8021f68:	bd80      	pop	{r7, pc}
	...

08021f6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8021f6c:	b580      	push	{r7, lr}
 8021f6e:	b084      	sub	sp, #16
 8021f70:	af00      	add	r7, sp, #0
 8021f72:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8021f74:	4b29      	ldr	r3, [pc, #164]	@ (802201c <HAL_PWREx_ConfigSupply+0xb0>)
 8021f76:	68db      	ldr	r3, [r3, #12]
 8021f78:	f003 0307 	and.w	r3, r3, #7
 8021f7c:	2b06      	cmp	r3, #6
 8021f7e:	d00a      	beq.n	8021f96 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8021f80:	4b26      	ldr	r3, [pc, #152]	@ (802201c <HAL_PWREx_ConfigSupply+0xb0>)
 8021f82:	68db      	ldr	r3, [r3, #12]
 8021f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8021f88:	687a      	ldr	r2, [r7, #4]
 8021f8a:	429a      	cmp	r2, r3
 8021f8c:	d001      	beq.n	8021f92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8021f8e:	2301      	movs	r3, #1
 8021f90:	e03f      	b.n	8022012 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8021f92:	2300      	movs	r3, #0
 8021f94:	e03d      	b.n	8022012 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8021f96:	4b21      	ldr	r3, [pc, #132]	@ (802201c <HAL_PWREx_ConfigSupply+0xb0>)
 8021f98:	68db      	ldr	r3, [r3, #12]
 8021f9a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8021f9e:	491f      	ldr	r1, [pc, #124]	@ (802201c <HAL_PWREx_ConfigSupply+0xb0>)
 8021fa0:	687b      	ldr	r3, [r7, #4]
 8021fa2:	4313      	orrs	r3, r2
 8021fa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8021fa6:	f7ff fa87 	bl	80214b8 <HAL_GetTick>
 8021faa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8021fac:	e009      	b.n	8021fc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8021fae:	f7ff fa83 	bl	80214b8 <HAL_GetTick>
 8021fb2:	4602      	mov	r2, r0
 8021fb4:	68fb      	ldr	r3, [r7, #12]
 8021fb6:	1ad3      	subs	r3, r2, r3
 8021fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021fbc:	d901      	bls.n	8021fc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8021fbe:	2301      	movs	r3, #1
 8021fc0:	e027      	b.n	8022012 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8021fc2:	4b16      	ldr	r3, [pc, #88]	@ (802201c <HAL_PWREx_ConfigSupply+0xb0>)
 8021fc4:	685b      	ldr	r3, [r3, #4]
 8021fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8021fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021fce:	d1ee      	bne.n	8021fae <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8021fd0:	687b      	ldr	r3, [r7, #4]
 8021fd2:	2b1e      	cmp	r3, #30
 8021fd4:	d008      	beq.n	8021fe8 <HAL_PWREx_ConfigSupply+0x7c>
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8021fda:	d005      	beq.n	8021fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8021fdc:	687b      	ldr	r3, [r7, #4]
 8021fde:	2b1d      	cmp	r3, #29
 8021fe0:	d002      	beq.n	8021fe8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8021fe2:	687b      	ldr	r3, [r7, #4]
 8021fe4:	2b2d      	cmp	r3, #45	@ 0x2d
 8021fe6:	d113      	bne.n	8022010 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8021fe8:	f7ff fa66 	bl	80214b8 <HAL_GetTick>
 8021fec:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8021fee:	e009      	b.n	8022004 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8021ff0:	f7ff fa62 	bl	80214b8 <HAL_GetTick>
 8021ff4:	4602      	mov	r2, r0
 8021ff6:	68fb      	ldr	r3, [r7, #12]
 8021ff8:	1ad3      	subs	r3, r2, r3
 8021ffa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021ffe:	d901      	bls.n	8022004 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8022000:	2301      	movs	r3, #1
 8022002:	e006      	b.n	8022012 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8022004:	4b05      	ldr	r3, [pc, #20]	@ (802201c <HAL_PWREx_ConfigSupply+0xb0>)
 8022006:	68db      	ldr	r3, [r3, #12]
 8022008:	f003 0311 	and.w	r3, r3, #17
 802200c:	2b11      	cmp	r3, #17
 802200e:	d1ef      	bne.n	8021ff0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8022010:	2300      	movs	r3, #0
}
 8022012:	4618      	mov	r0, r3
 8022014:	3710      	adds	r7, #16
 8022016:	46bd      	mov	sp, r7
 8022018:	bd80      	pop	{r7, pc}
 802201a:	bf00      	nop
 802201c:	58024800 	.word	0x58024800

08022020 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8022020:	b580      	push	{r7, lr}
 8022022:	b08c      	sub	sp, #48	@ 0x30
 8022024:	af00      	add	r7, sp, #0
 8022026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	2b00      	cmp	r3, #0
 802202c:	d101      	bne.n	8022032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802202e:	2301      	movs	r3, #1
 8022030:	e3c8      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8022032:	687b      	ldr	r3, [r7, #4]
 8022034:	681b      	ldr	r3, [r3, #0]
 8022036:	f003 0301 	and.w	r3, r3, #1
 802203a:	2b00      	cmp	r3, #0
 802203c:	f000 8087 	beq.w	802214e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022040:	4b88      	ldr	r3, [pc, #544]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022042:	691b      	ldr	r3, [r3, #16]
 8022044:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8022048:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802204a:	4b86      	ldr	r3, [pc, #536]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 802204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802204e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8022050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022052:	2b10      	cmp	r3, #16
 8022054:	d007      	beq.n	8022066 <HAL_RCC_OscConfig+0x46>
 8022056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022058:	2b18      	cmp	r3, #24
 802205a:	d110      	bne.n	802207e <HAL_RCC_OscConfig+0x5e>
 802205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802205e:	f003 0303 	and.w	r3, r3, #3
 8022062:	2b02      	cmp	r3, #2
 8022064:	d10b      	bne.n	802207e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022066:	4b7f      	ldr	r3, [pc, #508]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022068:	681b      	ldr	r3, [r3, #0]
 802206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802206e:	2b00      	cmp	r3, #0
 8022070:	d06c      	beq.n	802214c <HAL_RCC_OscConfig+0x12c>
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	685b      	ldr	r3, [r3, #4]
 8022076:	2b00      	cmp	r3, #0
 8022078:	d168      	bne.n	802214c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 802207a:	2301      	movs	r3, #1
 802207c:	e3a2      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	685b      	ldr	r3, [r3, #4]
 8022082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8022086:	d106      	bne.n	8022096 <HAL_RCC_OscConfig+0x76>
 8022088:	4b76      	ldr	r3, [pc, #472]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	4a75      	ldr	r2, [pc, #468]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 802208e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8022092:	6013      	str	r3, [r2, #0]
 8022094:	e02e      	b.n	80220f4 <HAL_RCC_OscConfig+0xd4>
 8022096:	687b      	ldr	r3, [r7, #4]
 8022098:	685b      	ldr	r3, [r3, #4]
 802209a:	2b00      	cmp	r3, #0
 802209c:	d10c      	bne.n	80220b8 <HAL_RCC_OscConfig+0x98>
 802209e:	4b71      	ldr	r3, [pc, #452]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	4a70      	ldr	r2, [pc, #448]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80220a8:	6013      	str	r3, [r2, #0]
 80220aa:	4b6e      	ldr	r3, [pc, #440]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220ac:	681b      	ldr	r3, [r3, #0]
 80220ae:	4a6d      	ldr	r2, [pc, #436]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80220b4:	6013      	str	r3, [r2, #0]
 80220b6:	e01d      	b.n	80220f4 <HAL_RCC_OscConfig+0xd4>
 80220b8:	687b      	ldr	r3, [r7, #4]
 80220ba:	685b      	ldr	r3, [r3, #4]
 80220bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80220c0:	d10c      	bne.n	80220dc <HAL_RCC_OscConfig+0xbc>
 80220c2:	4b68      	ldr	r3, [pc, #416]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220c4:	681b      	ldr	r3, [r3, #0]
 80220c6:	4a67      	ldr	r2, [pc, #412]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80220cc:	6013      	str	r3, [r2, #0]
 80220ce:	4b65      	ldr	r3, [pc, #404]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	4a64      	ldr	r2, [pc, #400]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80220d8:	6013      	str	r3, [r2, #0]
 80220da:	e00b      	b.n	80220f4 <HAL_RCC_OscConfig+0xd4>
 80220dc:	4b61      	ldr	r3, [pc, #388]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220de:	681b      	ldr	r3, [r3, #0]
 80220e0:	4a60      	ldr	r2, [pc, #384]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80220e6:	6013      	str	r3, [r2, #0]
 80220e8:	4b5e      	ldr	r3, [pc, #376]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220ea:	681b      	ldr	r3, [r3, #0]
 80220ec:	4a5d      	ldr	r2, [pc, #372]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80220ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80220f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	685b      	ldr	r3, [r3, #4]
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	d013      	beq.n	8022124 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80220fc:	f7ff f9dc 	bl	80214b8 <HAL_GetTick>
 8022100:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8022102:	e008      	b.n	8022116 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8022104:	f7ff f9d8 	bl	80214b8 <HAL_GetTick>
 8022108:	4602      	mov	r2, r0
 802210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802210c:	1ad3      	subs	r3, r2, r3
 802210e:	2b64      	cmp	r3, #100	@ 0x64
 8022110:	d901      	bls.n	8022116 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8022112:	2303      	movs	r3, #3
 8022114:	e356      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8022116:	4b53      	ldr	r3, [pc, #332]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022118:	681b      	ldr	r3, [r3, #0]
 802211a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802211e:	2b00      	cmp	r3, #0
 8022120:	d0f0      	beq.n	8022104 <HAL_RCC_OscConfig+0xe4>
 8022122:	e014      	b.n	802214e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022124:	f7ff f9c8 	bl	80214b8 <HAL_GetTick>
 8022128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802212a:	e008      	b.n	802213e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 802212c:	f7ff f9c4 	bl	80214b8 <HAL_GetTick>
 8022130:	4602      	mov	r2, r0
 8022132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022134:	1ad3      	subs	r3, r2, r3
 8022136:	2b64      	cmp	r3, #100	@ 0x64
 8022138:	d901      	bls.n	802213e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 802213a:	2303      	movs	r3, #3
 802213c:	e342      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 802213e:	4b49      	ldr	r3, [pc, #292]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022140:	681b      	ldr	r3, [r3, #0]
 8022142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022146:	2b00      	cmp	r3, #0
 8022148:	d1f0      	bne.n	802212c <HAL_RCC_OscConfig+0x10c>
 802214a:	e000      	b.n	802214e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 802214c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 802214e:	687b      	ldr	r3, [r7, #4]
 8022150:	681b      	ldr	r3, [r3, #0]
 8022152:	f003 0302 	and.w	r3, r3, #2
 8022156:	2b00      	cmp	r3, #0
 8022158:	f000 808c 	beq.w	8022274 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 802215c:	4b41      	ldr	r3, [pc, #260]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 802215e:	691b      	ldr	r3, [r3, #16]
 8022160:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8022164:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8022166:	4b3f      	ldr	r3, [pc, #252]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802216a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 802216c:	6a3b      	ldr	r3, [r7, #32]
 802216e:	2b00      	cmp	r3, #0
 8022170:	d007      	beq.n	8022182 <HAL_RCC_OscConfig+0x162>
 8022172:	6a3b      	ldr	r3, [r7, #32]
 8022174:	2b18      	cmp	r3, #24
 8022176:	d137      	bne.n	80221e8 <HAL_RCC_OscConfig+0x1c8>
 8022178:	69fb      	ldr	r3, [r7, #28]
 802217a:	f003 0303 	and.w	r3, r3, #3
 802217e:	2b00      	cmp	r3, #0
 8022180:	d132      	bne.n	80221e8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8022182:	4b38      	ldr	r3, [pc, #224]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	f003 0304 	and.w	r3, r3, #4
 802218a:	2b00      	cmp	r3, #0
 802218c:	d005      	beq.n	802219a <HAL_RCC_OscConfig+0x17a>
 802218e:	687b      	ldr	r3, [r7, #4]
 8022190:	68db      	ldr	r3, [r3, #12]
 8022192:	2b00      	cmp	r3, #0
 8022194:	d101      	bne.n	802219a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8022196:	2301      	movs	r3, #1
 8022198:	e314      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 802219a:	4b32      	ldr	r3, [pc, #200]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	f023 0219 	bic.w	r2, r3, #25
 80221a2:	687b      	ldr	r3, [r7, #4]
 80221a4:	68db      	ldr	r3, [r3, #12]
 80221a6:	492f      	ldr	r1, [pc, #188]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80221a8:	4313      	orrs	r3, r2
 80221aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80221ac:	f7ff f984 	bl	80214b8 <HAL_GetTick>
 80221b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80221b2:	e008      	b.n	80221c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80221b4:	f7ff f980 	bl	80214b8 <HAL_GetTick>
 80221b8:	4602      	mov	r2, r0
 80221ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80221bc:	1ad3      	subs	r3, r2, r3
 80221be:	2b02      	cmp	r3, #2
 80221c0:	d901      	bls.n	80221c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80221c2:	2303      	movs	r3, #3
 80221c4:	e2fe      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80221c6:	4b27      	ldr	r3, [pc, #156]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80221c8:	681b      	ldr	r3, [r3, #0]
 80221ca:	f003 0304 	and.w	r3, r3, #4
 80221ce:	2b00      	cmp	r3, #0
 80221d0:	d0f0      	beq.n	80221b4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80221d2:	4b24      	ldr	r3, [pc, #144]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80221d4:	685b      	ldr	r3, [r3, #4]
 80221d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80221da:	687b      	ldr	r3, [r7, #4]
 80221dc:	691b      	ldr	r3, [r3, #16]
 80221de:	061b      	lsls	r3, r3, #24
 80221e0:	4920      	ldr	r1, [pc, #128]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80221e2:	4313      	orrs	r3, r2
 80221e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80221e6:	e045      	b.n	8022274 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80221e8:	687b      	ldr	r3, [r7, #4]
 80221ea:	68db      	ldr	r3, [r3, #12]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d026      	beq.n	802223e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80221f0:	4b1c      	ldr	r3, [pc, #112]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80221f2:	681b      	ldr	r3, [r3, #0]
 80221f4:	f023 0219 	bic.w	r2, r3, #25
 80221f8:	687b      	ldr	r3, [r7, #4]
 80221fa:	68db      	ldr	r3, [r3, #12]
 80221fc:	4919      	ldr	r1, [pc, #100]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 80221fe:	4313      	orrs	r3, r2
 8022200:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022202:	f7ff f959 	bl	80214b8 <HAL_GetTick>
 8022206:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8022208:	e008      	b.n	802221c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 802220a:	f7ff f955 	bl	80214b8 <HAL_GetTick>
 802220e:	4602      	mov	r2, r0
 8022210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022212:	1ad3      	subs	r3, r2, r3
 8022214:	2b02      	cmp	r3, #2
 8022216:	d901      	bls.n	802221c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8022218:	2303      	movs	r3, #3
 802221a:	e2d3      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 802221c:	4b11      	ldr	r3, [pc, #68]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 802221e:	681b      	ldr	r3, [r3, #0]
 8022220:	f003 0304 	and.w	r3, r3, #4
 8022224:	2b00      	cmp	r3, #0
 8022226:	d0f0      	beq.n	802220a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022228:	4b0e      	ldr	r3, [pc, #56]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 802222a:	685b      	ldr	r3, [r3, #4]
 802222c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	691b      	ldr	r3, [r3, #16]
 8022234:	061b      	lsls	r3, r3, #24
 8022236:	490b      	ldr	r1, [pc, #44]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022238:	4313      	orrs	r3, r2
 802223a:	604b      	str	r3, [r1, #4]
 802223c:	e01a      	b.n	8022274 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 802223e:	4b09      	ldr	r3, [pc, #36]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022240:	681b      	ldr	r3, [r3, #0]
 8022242:	4a08      	ldr	r2, [pc, #32]	@ (8022264 <HAL_RCC_OscConfig+0x244>)
 8022244:	f023 0301 	bic.w	r3, r3, #1
 8022248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 802224a:	f7ff f935 	bl	80214b8 <HAL_GetTick>
 802224e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8022250:	e00a      	b.n	8022268 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8022252:	f7ff f931 	bl	80214b8 <HAL_GetTick>
 8022256:	4602      	mov	r2, r0
 8022258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802225a:	1ad3      	subs	r3, r2, r3
 802225c:	2b02      	cmp	r3, #2
 802225e:	d903      	bls.n	8022268 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8022260:	2303      	movs	r3, #3
 8022262:	e2af      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
 8022264:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8022268:	4b96      	ldr	r3, [pc, #600]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	f003 0304 	and.w	r3, r3, #4
 8022270:	2b00      	cmp	r3, #0
 8022272:	d1ee      	bne.n	8022252 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8022274:	687b      	ldr	r3, [r7, #4]
 8022276:	681b      	ldr	r3, [r3, #0]
 8022278:	f003 0310 	and.w	r3, r3, #16
 802227c:	2b00      	cmp	r3, #0
 802227e:	d06a      	beq.n	8022356 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022280:	4b90      	ldr	r3, [pc, #576]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022282:	691b      	ldr	r3, [r3, #16]
 8022284:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8022288:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 802228a:	4b8e      	ldr	r3, [pc, #568]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802228e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8022290:	69bb      	ldr	r3, [r7, #24]
 8022292:	2b08      	cmp	r3, #8
 8022294:	d007      	beq.n	80222a6 <HAL_RCC_OscConfig+0x286>
 8022296:	69bb      	ldr	r3, [r7, #24]
 8022298:	2b18      	cmp	r3, #24
 802229a:	d11b      	bne.n	80222d4 <HAL_RCC_OscConfig+0x2b4>
 802229c:	697b      	ldr	r3, [r7, #20]
 802229e:	f003 0303 	and.w	r3, r3, #3
 80222a2:	2b01      	cmp	r3, #1
 80222a4:	d116      	bne.n	80222d4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80222a6:	4b87      	ldr	r3, [pc, #540]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80222a8:	681b      	ldr	r3, [r3, #0]
 80222aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d005      	beq.n	80222be <HAL_RCC_OscConfig+0x29e>
 80222b2:	687b      	ldr	r3, [r7, #4]
 80222b4:	69db      	ldr	r3, [r3, #28]
 80222b6:	2b80      	cmp	r3, #128	@ 0x80
 80222b8:	d001      	beq.n	80222be <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80222ba:	2301      	movs	r3, #1
 80222bc:	e282      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80222be:	4b81      	ldr	r3, [pc, #516]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80222c0:	68db      	ldr	r3, [r3, #12]
 80222c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80222c6:	687b      	ldr	r3, [r7, #4]
 80222c8:	6a1b      	ldr	r3, [r3, #32]
 80222ca:	061b      	lsls	r3, r3, #24
 80222cc:	497d      	ldr	r1, [pc, #500]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80222ce:	4313      	orrs	r3, r2
 80222d0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80222d2:	e040      	b.n	8022356 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	69db      	ldr	r3, [r3, #28]
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d023      	beq.n	8022324 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80222dc:	4b79      	ldr	r3, [pc, #484]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80222de:	681b      	ldr	r3, [r3, #0]
 80222e0:	4a78      	ldr	r2, [pc, #480]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80222e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80222e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80222e8:	f7ff f8e6 	bl	80214b8 <HAL_GetTick>
 80222ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80222ee:	e008      	b.n	8022302 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80222f0:	f7ff f8e2 	bl	80214b8 <HAL_GetTick>
 80222f4:	4602      	mov	r2, r0
 80222f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222f8:	1ad3      	subs	r3, r2, r3
 80222fa:	2b02      	cmp	r3, #2
 80222fc:	d901      	bls.n	8022302 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80222fe:	2303      	movs	r3, #3
 8022300:	e260      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8022302:	4b70      	ldr	r3, [pc, #448]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802230a:	2b00      	cmp	r3, #0
 802230c:	d0f0      	beq.n	80222f0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 802230e:	4b6d      	ldr	r3, [pc, #436]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022310:	68db      	ldr	r3, [r3, #12]
 8022312:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8022316:	687b      	ldr	r3, [r7, #4]
 8022318:	6a1b      	ldr	r3, [r3, #32]
 802231a:	061b      	lsls	r3, r3, #24
 802231c:	4969      	ldr	r1, [pc, #420]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802231e:	4313      	orrs	r3, r2
 8022320:	60cb      	str	r3, [r1, #12]
 8022322:	e018      	b.n	8022356 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8022324:	4b67      	ldr	r3, [pc, #412]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	4a66      	ldr	r2, [pc, #408]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802232a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802232e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022330:	f7ff f8c2 	bl	80214b8 <HAL_GetTick>
 8022334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8022336:	e008      	b.n	802234a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8022338:	f7ff f8be 	bl	80214b8 <HAL_GetTick>
 802233c:	4602      	mov	r2, r0
 802233e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022340:	1ad3      	subs	r3, r2, r3
 8022342:	2b02      	cmp	r3, #2
 8022344:	d901      	bls.n	802234a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8022346:	2303      	movs	r3, #3
 8022348:	e23c      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 802234a:	4b5e      	ldr	r3, [pc, #376]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022352:	2b00      	cmp	r3, #0
 8022354:	d1f0      	bne.n	8022338 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022356:	687b      	ldr	r3, [r7, #4]
 8022358:	681b      	ldr	r3, [r3, #0]
 802235a:	f003 0308 	and.w	r3, r3, #8
 802235e:	2b00      	cmp	r3, #0
 8022360:	d036      	beq.n	80223d0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8022362:	687b      	ldr	r3, [r7, #4]
 8022364:	695b      	ldr	r3, [r3, #20]
 8022366:	2b00      	cmp	r3, #0
 8022368:	d019      	beq.n	802239e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 802236a:	4b56      	ldr	r3, [pc, #344]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802236c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802236e:	4a55      	ldr	r2, [pc, #340]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022370:	f043 0301 	orr.w	r3, r3, #1
 8022374:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022376:	f7ff f89f 	bl	80214b8 <HAL_GetTick>
 802237a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 802237c:	e008      	b.n	8022390 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 802237e:	f7ff f89b 	bl	80214b8 <HAL_GetTick>
 8022382:	4602      	mov	r2, r0
 8022384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022386:	1ad3      	subs	r3, r2, r3
 8022388:	2b02      	cmp	r3, #2
 802238a:	d901      	bls.n	8022390 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 802238c:	2303      	movs	r3, #3
 802238e:	e219      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8022390:	4b4c      	ldr	r3, [pc, #304]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8022394:	f003 0302 	and.w	r3, r3, #2
 8022398:	2b00      	cmp	r3, #0
 802239a:	d0f0      	beq.n	802237e <HAL_RCC_OscConfig+0x35e>
 802239c:	e018      	b.n	80223d0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 802239e:	4b49      	ldr	r3, [pc, #292]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80223a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80223a2:	4a48      	ldr	r2, [pc, #288]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80223a4:	f023 0301 	bic.w	r3, r3, #1
 80223a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80223aa:	f7ff f885 	bl	80214b8 <HAL_GetTick>
 80223ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80223b0:	e008      	b.n	80223c4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80223b2:	f7ff f881 	bl	80214b8 <HAL_GetTick>
 80223b6:	4602      	mov	r2, r0
 80223b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80223ba:	1ad3      	subs	r3, r2, r3
 80223bc:	2b02      	cmp	r3, #2
 80223be:	d901      	bls.n	80223c4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80223c0:	2303      	movs	r3, #3
 80223c2:	e1ff      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80223c4:	4b3f      	ldr	r3, [pc, #252]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80223c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80223c8:	f003 0302 	and.w	r3, r3, #2
 80223cc:	2b00      	cmp	r3, #0
 80223ce:	d1f0      	bne.n	80223b2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	681b      	ldr	r3, [r3, #0]
 80223d4:	f003 0320 	and.w	r3, r3, #32
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d036      	beq.n	802244a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80223dc:	687b      	ldr	r3, [r7, #4]
 80223de:	699b      	ldr	r3, [r3, #24]
 80223e0:	2b00      	cmp	r3, #0
 80223e2:	d019      	beq.n	8022418 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80223e4:	4b37      	ldr	r3, [pc, #220]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80223e6:	681b      	ldr	r3, [r3, #0]
 80223e8:	4a36      	ldr	r2, [pc, #216]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80223ea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80223ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80223f0:	f7ff f862 	bl	80214b8 <HAL_GetTick>
 80223f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80223f6:	e008      	b.n	802240a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80223f8:	f7ff f85e 	bl	80214b8 <HAL_GetTick>
 80223fc:	4602      	mov	r2, r0
 80223fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022400:	1ad3      	subs	r3, r2, r3
 8022402:	2b02      	cmp	r3, #2
 8022404:	d901      	bls.n	802240a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8022406:	2303      	movs	r3, #3
 8022408:	e1dc      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 802240a:	4b2e      	ldr	r3, [pc, #184]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802240c:	681b      	ldr	r3, [r3, #0]
 802240e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022412:	2b00      	cmp	r3, #0
 8022414:	d0f0      	beq.n	80223f8 <HAL_RCC_OscConfig+0x3d8>
 8022416:	e018      	b.n	802244a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8022418:	4b2a      	ldr	r3, [pc, #168]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	4a29      	ldr	r2, [pc, #164]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 802241e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022422:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8022424:	f7ff f848 	bl	80214b8 <HAL_GetTick>
 8022428:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802242a:	e008      	b.n	802243e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 802242c:	f7ff f844 	bl	80214b8 <HAL_GetTick>
 8022430:	4602      	mov	r2, r0
 8022432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022434:	1ad3      	subs	r3, r2, r3
 8022436:	2b02      	cmp	r3, #2
 8022438:	d901      	bls.n	802243e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 802243a:	2303      	movs	r3, #3
 802243c:	e1c2      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 802243e:	4b21      	ldr	r3, [pc, #132]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022440:	681b      	ldr	r3, [r3, #0]
 8022442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022446:	2b00      	cmp	r3, #0
 8022448:	d1f0      	bne.n	802242c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	681b      	ldr	r3, [r3, #0]
 802244e:	f003 0304 	and.w	r3, r3, #4
 8022452:	2b00      	cmp	r3, #0
 8022454:	f000 8086 	beq.w	8022564 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8022458:	4b1b      	ldr	r3, [pc, #108]	@ (80224c8 <HAL_RCC_OscConfig+0x4a8>)
 802245a:	681b      	ldr	r3, [r3, #0]
 802245c:	4a1a      	ldr	r2, [pc, #104]	@ (80224c8 <HAL_RCC_OscConfig+0x4a8>)
 802245e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8022462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8022464:	f7ff f828 	bl	80214b8 <HAL_GetTick>
 8022468:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802246a:	e008      	b.n	802247e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 802246c:	f7ff f824 	bl	80214b8 <HAL_GetTick>
 8022470:	4602      	mov	r2, r0
 8022472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022474:	1ad3      	subs	r3, r2, r3
 8022476:	2b64      	cmp	r3, #100	@ 0x64
 8022478:	d901      	bls.n	802247e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 802247a:	2303      	movs	r3, #3
 802247c:	e1a2      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 802247e:	4b12      	ldr	r3, [pc, #72]	@ (80224c8 <HAL_RCC_OscConfig+0x4a8>)
 8022480:	681b      	ldr	r3, [r3, #0]
 8022482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022486:	2b00      	cmp	r3, #0
 8022488:	d0f0      	beq.n	802246c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	689b      	ldr	r3, [r3, #8]
 802248e:	2b01      	cmp	r3, #1
 8022490:	d106      	bne.n	80224a0 <HAL_RCC_OscConfig+0x480>
 8022492:	4b0c      	ldr	r3, [pc, #48]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022496:	4a0b      	ldr	r2, [pc, #44]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 8022498:	f043 0301 	orr.w	r3, r3, #1
 802249c:	6713      	str	r3, [r2, #112]	@ 0x70
 802249e:	e032      	b.n	8022506 <HAL_RCC_OscConfig+0x4e6>
 80224a0:	687b      	ldr	r3, [r7, #4]
 80224a2:	689b      	ldr	r3, [r3, #8]
 80224a4:	2b00      	cmp	r3, #0
 80224a6:	d111      	bne.n	80224cc <HAL_RCC_OscConfig+0x4ac>
 80224a8:	4b06      	ldr	r3, [pc, #24]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80224aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80224ac:	4a05      	ldr	r2, [pc, #20]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80224ae:	f023 0301 	bic.w	r3, r3, #1
 80224b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80224b4:	4b03      	ldr	r3, [pc, #12]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80224b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80224b8:	4a02      	ldr	r2, [pc, #8]	@ (80224c4 <HAL_RCC_OscConfig+0x4a4>)
 80224ba:	f023 0304 	bic.w	r3, r3, #4
 80224be:	6713      	str	r3, [r2, #112]	@ 0x70
 80224c0:	e021      	b.n	8022506 <HAL_RCC_OscConfig+0x4e6>
 80224c2:	bf00      	nop
 80224c4:	58024400 	.word	0x58024400
 80224c8:	58024800 	.word	0x58024800
 80224cc:	687b      	ldr	r3, [r7, #4]
 80224ce:	689b      	ldr	r3, [r3, #8]
 80224d0:	2b05      	cmp	r3, #5
 80224d2:	d10c      	bne.n	80224ee <HAL_RCC_OscConfig+0x4ce>
 80224d4:	4b83      	ldr	r3, [pc, #524]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80224d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80224d8:	4a82      	ldr	r2, [pc, #520]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80224da:	f043 0304 	orr.w	r3, r3, #4
 80224de:	6713      	str	r3, [r2, #112]	@ 0x70
 80224e0:	4b80      	ldr	r3, [pc, #512]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80224e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80224e4:	4a7f      	ldr	r2, [pc, #508]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80224e6:	f043 0301 	orr.w	r3, r3, #1
 80224ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80224ec:	e00b      	b.n	8022506 <HAL_RCC_OscConfig+0x4e6>
 80224ee:	4b7d      	ldr	r3, [pc, #500]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80224f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80224f2:	4a7c      	ldr	r2, [pc, #496]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80224f4:	f023 0301 	bic.w	r3, r3, #1
 80224f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80224fa:	4b7a      	ldr	r3, [pc, #488]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80224fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80224fe:	4a79      	ldr	r2, [pc, #484]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022500:	f023 0304 	bic.w	r3, r3, #4
 8022504:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8022506:	687b      	ldr	r3, [r7, #4]
 8022508:	689b      	ldr	r3, [r3, #8]
 802250a:	2b00      	cmp	r3, #0
 802250c:	d015      	beq.n	802253a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802250e:	f7fe ffd3 	bl	80214b8 <HAL_GetTick>
 8022512:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8022514:	e00a      	b.n	802252c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022516:	f7fe ffcf 	bl	80214b8 <HAL_GetTick>
 802251a:	4602      	mov	r2, r0
 802251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802251e:	1ad3      	subs	r3, r2, r3
 8022520:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022524:	4293      	cmp	r3, r2
 8022526:	d901      	bls.n	802252c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8022528:	2303      	movs	r3, #3
 802252a:	e14b      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 802252c:	4b6d      	ldr	r3, [pc, #436]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802252e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8022530:	f003 0302 	and.w	r3, r3, #2
 8022534:	2b00      	cmp	r3, #0
 8022536:	d0ee      	beq.n	8022516 <HAL_RCC_OscConfig+0x4f6>
 8022538:	e014      	b.n	8022564 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802253a:	f7fe ffbd 	bl	80214b8 <HAL_GetTick>
 802253e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8022540:	e00a      	b.n	8022558 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022542:	f7fe ffb9 	bl	80214b8 <HAL_GetTick>
 8022546:	4602      	mov	r2, r0
 8022548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802254a:	1ad3      	subs	r3, r2, r3
 802254c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022550:	4293      	cmp	r3, r2
 8022552:	d901      	bls.n	8022558 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8022554:	2303      	movs	r3, #3
 8022556:	e135      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8022558:	4b62      	ldr	r3, [pc, #392]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802255a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802255c:	f003 0302 	and.w	r3, r3, #2
 8022560:	2b00      	cmp	r3, #0
 8022562:	d1ee      	bne.n	8022542 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022568:	2b00      	cmp	r3, #0
 802256a:	f000 812a 	beq.w	80227c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 802256e:	4b5d      	ldr	r3, [pc, #372]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022570:	691b      	ldr	r3, [r3, #16]
 8022572:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8022576:	2b18      	cmp	r3, #24
 8022578:	f000 80ba 	beq.w	80226f0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022580:	2b02      	cmp	r3, #2
 8022582:	f040 8095 	bne.w	80226b0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022586:	4b57      	ldr	r3, [pc, #348]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022588:	681b      	ldr	r3, [r3, #0]
 802258a:	4a56      	ldr	r2, [pc, #344]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802258c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8022590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022592:	f7fe ff91 	bl	80214b8 <HAL_GetTick>
 8022596:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8022598:	e008      	b.n	80225ac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802259a:	f7fe ff8d 	bl	80214b8 <HAL_GetTick>
 802259e:	4602      	mov	r2, r0
 80225a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225a2:	1ad3      	subs	r3, r2, r3
 80225a4:	2b02      	cmp	r3, #2
 80225a6:	d901      	bls.n	80225ac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80225a8:	2303      	movs	r3, #3
 80225aa:	e10b      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80225ac:	4b4d      	ldr	r3, [pc, #308]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	d1f0      	bne.n	802259a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80225b8:	4b4a      	ldr	r3, [pc, #296]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80225ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80225bc:	4b4a      	ldr	r3, [pc, #296]	@ (80226e8 <HAL_RCC_OscConfig+0x6c8>)
 80225be:	4013      	ands	r3, r2
 80225c0:	687a      	ldr	r2, [r7, #4]
 80225c2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80225c4:	687a      	ldr	r2, [r7, #4]
 80225c6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80225c8:	0112      	lsls	r2, r2, #4
 80225ca:	430a      	orrs	r2, r1
 80225cc:	4945      	ldr	r1, [pc, #276]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80225ce:	4313      	orrs	r3, r2
 80225d0:	628b      	str	r3, [r1, #40]	@ 0x28
 80225d2:	687b      	ldr	r3, [r7, #4]
 80225d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80225d6:	3b01      	subs	r3, #1
 80225d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80225e0:	3b01      	subs	r3, #1
 80225e2:	025b      	lsls	r3, r3, #9
 80225e4:	b29b      	uxth	r3, r3
 80225e6:	431a      	orrs	r2, r3
 80225e8:	687b      	ldr	r3, [r7, #4]
 80225ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80225ec:	3b01      	subs	r3, #1
 80225ee:	041b      	lsls	r3, r3, #16
 80225f0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80225f4:	431a      	orrs	r2, r3
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80225fa:	3b01      	subs	r3, #1
 80225fc:	061b      	lsls	r3, r3, #24
 80225fe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8022602:	4938      	ldr	r1, [pc, #224]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022604:	4313      	orrs	r3, r2
 8022606:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8022608:	4b36      	ldr	r3, [pc, #216]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802260c:	4a35      	ldr	r2, [pc, #212]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802260e:	f023 0301 	bic.w	r3, r3, #1
 8022612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8022614:	4b33      	ldr	r3, [pc, #204]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8022618:	4b34      	ldr	r3, [pc, #208]	@ (80226ec <HAL_RCC_OscConfig+0x6cc>)
 802261a:	4013      	ands	r3, r2
 802261c:	687a      	ldr	r2, [r7, #4]
 802261e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8022620:	00d2      	lsls	r2, r2, #3
 8022622:	4930      	ldr	r1, [pc, #192]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022624:	4313      	orrs	r3, r2
 8022626:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8022628:	4b2e      	ldr	r3, [pc, #184]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802262c:	f023 020c 	bic.w	r2, r3, #12
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022634:	492b      	ldr	r1, [pc, #172]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022636:	4313      	orrs	r3, r2
 8022638:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 802263a:	4b2a      	ldr	r3, [pc, #168]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802263e:	f023 0202 	bic.w	r2, r3, #2
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022646:	4927      	ldr	r1, [pc, #156]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022648:	4313      	orrs	r3, r2
 802264a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 802264c:	4b25      	ldr	r3, [pc, #148]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022650:	4a24      	ldr	r2, [pc, #144]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8022656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022658:	4b22      	ldr	r3, [pc, #136]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802265a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802265c:	4a21      	ldr	r2, [pc, #132]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802265e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8022664:	4b1f      	ldr	r3, [pc, #124]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022668:	4a1e      	ldr	r2, [pc, #120]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802266a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 802266e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8022670:	4b1c      	ldr	r3, [pc, #112]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022674:	4a1b      	ldr	r2, [pc, #108]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022676:	f043 0301 	orr.w	r3, r3, #1
 802267a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 802267c:	4b19      	ldr	r3, [pc, #100]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 802267e:	681b      	ldr	r3, [r3, #0]
 8022680:	4a18      	ldr	r2, [pc, #96]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 8022682:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022688:	f7fe ff16 	bl	80214b8 <HAL_GetTick>
 802268c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802268e:	e008      	b.n	80226a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8022690:	f7fe ff12 	bl	80214b8 <HAL_GetTick>
 8022694:	4602      	mov	r2, r0
 8022696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022698:	1ad3      	subs	r3, r2, r3
 802269a:	2b02      	cmp	r3, #2
 802269c:	d901      	bls.n	80226a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 802269e:	2303      	movs	r3, #3
 80226a0:	e090      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80226a2:	4b10      	ldr	r3, [pc, #64]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80226a4:	681b      	ldr	r3, [r3, #0]
 80226a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80226aa:	2b00      	cmp	r3, #0
 80226ac:	d0f0      	beq.n	8022690 <HAL_RCC_OscConfig+0x670>
 80226ae:	e088      	b.n	80227c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80226b0:	4b0c      	ldr	r3, [pc, #48]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80226b2:	681b      	ldr	r3, [r3, #0]
 80226b4:	4a0b      	ldr	r2, [pc, #44]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80226b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80226ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80226bc:	f7fe fefc 	bl	80214b8 <HAL_GetTick>
 80226c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80226c2:	e008      	b.n	80226d6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80226c4:	f7fe fef8 	bl	80214b8 <HAL_GetTick>
 80226c8:	4602      	mov	r2, r0
 80226ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80226cc:	1ad3      	subs	r3, r2, r3
 80226ce:	2b02      	cmp	r3, #2
 80226d0:	d901      	bls.n	80226d6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80226d2:	2303      	movs	r3, #3
 80226d4:	e076      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80226d6:	4b03      	ldr	r3, [pc, #12]	@ (80226e4 <HAL_RCC_OscConfig+0x6c4>)
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80226de:	2b00      	cmp	r3, #0
 80226e0:	d1f0      	bne.n	80226c4 <HAL_RCC_OscConfig+0x6a4>
 80226e2:	e06e      	b.n	80227c2 <HAL_RCC_OscConfig+0x7a2>
 80226e4:	58024400 	.word	0x58024400
 80226e8:	fffffc0c 	.word	0xfffffc0c
 80226ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80226f0:	4b36      	ldr	r3, [pc, #216]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 80226f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80226f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80226f6:	4b35      	ldr	r3, [pc, #212]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 80226f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80226fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022700:	2b01      	cmp	r3, #1
 8022702:	d031      	beq.n	8022768 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022704:	693b      	ldr	r3, [r7, #16]
 8022706:	f003 0203 	and.w	r2, r3, #3
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802270e:	429a      	cmp	r2, r3
 8022710:	d12a      	bne.n	8022768 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8022712:	693b      	ldr	r3, [r7, #16]
 8022714:	091b      	lsrs	r3, r3, #4
 8022716:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 802271a:	687b      	ldr	r3, [r7, #4]
 802271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 802271e:	429a      	cmp	r2, r3
 8022720:	d122      	bne.n	8022768 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8022722:	68fb      	ldr	r3, [r7, #12]
 8022724:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802272c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 802272e:	429a      	cmp	r2, r3
 8022730:	d11a      	bne.n	8022768 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8022732:	68fb      	ldr	r3, [r7, #12]
 8022734:	0a5b      	lsrs	r3, r3, #9
 8022736:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 802273a:	687b      	ldr	r3, [r7, #4]
 802273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802273e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8022740:	429a      	cmp	r2, r3
 8022742:	d111      	bne.n	8022768 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8022744:	68fb      	ldr	r3, [r7, #12]
 8022746:	0c1b      	lsrs	r3, r3, #16
 8022748:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022750:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8022752:	429a      	cmp	r2, r3
 8022754:	d108      	bne.n	8022768 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8022756:	68fb      	ldr	r3, [r7, #12]
 8022758:	0e1b      	lsrs	r3, r3, #24
 802275a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022762:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8022764:	429a      	cmp	r2, r3
 8022766:	d001      	beq.n	802276c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8022768:	2301      	movs	r3, #1
 802276a:	e02b      	b.n	80227c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 802276c:	4b17      	ldr	r3, [pc, #92]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 802276e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022770:	08db      	lsrs	r3, r3, #3
 8022772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022776:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8022778:	687b      	ldr	r3, [r7, #4]
 802277a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802277c:	693a      	ldr	r2, [r7, #16]
 802277e:	429a      	cmp	r2, r3
 8022780:	d01f      	beq.n	80227c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8022782:	4b12      	ldr	r3, [pc, #72]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 8022784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022786:	4a11      	ldr	r2, [pc, #68]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 8022788:	f023 0301 	bic.w	r3, r3, #1
 802278c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 802278e:	f7fe fe93 	bl	80214b8 <HAL_GetTick>
 8022792:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8022794:	bf00      	nop
 8022796:	f7fe fe8f 	bl	80214b8 <HAL_GetTick>
 802279a:	4602      	mov	r2, r0
 802279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802279e:	4293      	cmp	r3, r2
 80227a0:	d0f9      	beq.n	8022796 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80227a2:	4b0a      	ldr	r3, [pc, #40]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 80227a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80227a6:	4b0a      	ldr	r3, [pc, #40]	@ (80227d0 <HAL_RCC_OscConfig+0x7b0>)
 80227a8:	4013      	ands	r3, r2
 80227aa:	687a      	ldr	r2, [r7, #4]
 80227ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80227ae:	00d2      	lsls	r2, r2, #3
 80227b0:	4906      	ldr	r1, [pc, #24]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 80227b2:	4313      	orrs	r3, r2
 80227b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80227b6:	4b05      	ldr	r3, [pc, #20]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 80227b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80227ba:	4a04      	ldr	r2, [pc, #16]	@ (80227cc <HAL_RCC_OscConfig+0x7ac>)
 80227bc:	f043 0301 	orr.w	r3, r3, #1
 80227c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80227c2:	2300      	movs	r3, #0
}
 80227c4:	4618      	mov	r0, r3
 80227c6:	3730      	adds	r7, #48	@ 0x30
 80227c8:	46bd      	mov	sp, r7
 80227ca:	bd80      	pop	{r7, pc}
 80227cc:	58024400 	.word	0x58024400
 80227d0:	ffff0007 	.word	0xffff0007

080227d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80227d4:	b580      	push	{r7, lr}
 80227d6:	b086      	sub	sp, #24
 80227d8:	af00      	add	r7, sp, #0
 80227da:	6078      	str	r0, [r7, #4]
 80227dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80227de:	687b      	ldr	r3, [r7, #4]
 80227e0:	2b00      	cmp	r3, #0
 80227e2:	d101      	bne.n	80227e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80227e4:	2301      	movs	r3, #1
 80227e6:	e19c      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80227e8:	4b8a      	ldr	r3, [pc, #552]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 80227ea:	681b      	ldr	r3, [r3, #0]
 80227ec:	f003 030f 	and.w	r3, r3, #15
 80227f0:	683a      	ldr	r2, [r7, #0]
 80227f2:	429a      	cmp	r2, r3
 80227f4:	d910      	bls.n	8022818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80227f6:	4b87      	ldr	r3, [pc, #540]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 80227f8:	681b      	ldr	r3, [r3, #0]
 80227fa:	f023 020f 	bic.w	r2, r3, #15
 80227fe:	4985      	ldr	r1, [pc, #532]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 8022800:	683b      	ldr	r3, [r7, #0]
 8022802:	4313      	orrs	r3, r2
 8022804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022806:	4b83      	ldr	r3, [pc, #524]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 8022808:	681b      	ldr	r3, [r3, #0]
 802280a:	f003 030f 	and.w	r3, r3, #15
 802280e:	683a      	ldr	r2, [r7, #0]
 8022810:	429a      	cmp	r2, r3
 8022812:	d001      	beq.n	8022818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8022814:	2301      	movs	r3, #1
 8022816:	e184      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8022818:	687b      	ldr	r3, [r7, #4]
 802281a:	681b      	ldr	r3, [r3, #0]
 802281c:	f003 0304 	and.w	r3, r3, #4
 8022820:	2b00      	cmp	r3, #0
 8022822:	d010      	beq.n	8022846 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8022824:	687b      	ldr	r3, [r7, #4]
 8022826:	691a      	ldr	r2, [r3, #16]
 8022828:	4b7b      	ldr	r3, [pc, #492]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 802282a:	699b      	ldr	r3, [r3, #24]
 802282c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022830:	429a      	cmp	r2, r3
 8022832:	d908      	bls.n	8022846 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8022834:	4b78      	ldr	r3, [pc, #480]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022836:	699b      	ldr	r3, [r3, #24]
 8022838:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 802283c:	687b      	ldr	r3, [r7, #4]
 802283e:	691b      	ldr	r3, [r3, #16]
 8022840:	4975      	ldr	r1, [pc, #468]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022842:	4313      	orrs	r3, r2
 8022844:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022846:	687b      	ldr	r3, [r7, #4]
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	f003 0308 	and.w	r3, r3, #8
 802284e:	2b00      	cmp	r3, #0
 8022850:	d010      	beq.n	8022874 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	695a      	ldr	r2, [r3, #20]
 8022856:	4b70      	ldr	r3, [pc, #448]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022858:	69db      	ldr	r3, [r3, #28]
 802285a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 802285e:	429a      	cmp	r2, r3
 8022860:	d908      	bls.n	8022874 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8022862:	4b6d      	ldr	r3, [pc, #436]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022864:	69db      	ldr	r3, [r3, #28]
 8022866:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	695b      	ldr	r3, [r3, #20]
 802286e:	496a      	ldr	r1, [pc, #424]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022870:	4313      	orrs	r3, r2
 8022872:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	681b      	ldr	r3, [r3, #0]
 8022878:	f003 0310 	and.w	r3, r3, #16
 802287c:	2b00      	cmp	r3, #0
 802287e:	d010      	beq.n	80228a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8022880:	687b      	ldr	r3, [r7, #4]
 8022882:	699a      	ldr	r2, [r3, #24]
 8022884:	4b64      	ldr	r3, [pc, #400]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022886:	69db      	ldr	r3, [r3, #28]
 8022888:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 802288c:	429a      	cmp	r2, r3
 802288e:	d908      	bls.n	80228a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8022890:	4b61      	ldr	r3, [pc, #388]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022892:	69db      	ldr	r3, [r3, #28]
 8022894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	699b      	ldr	r3, [r3, #24]
 802289c:	495e      	ldr	r1, [pc, #376]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 802289e:	4313      	orrs	r3, r2
 80228a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80228a2:	687b      	ldr	r3, [r7, #4]
 80228a4:	681b      	ldr	r3, [r3, #0]
 80228a6:	f003 0320 	and.w	r3, r3, #32
 80228aa:	2b00      	cmp	r3, #0
 80228ac:	d010      	beq.n	80228d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	69da      	ldr	r2, [r3, #28]
 80228b2:	4b59      	ldr	r3, [pc, #356]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80228b4:	6a1b      	ldr	r3, [r3, #32]
 80228b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80228ba:	429a      	cmp	r2, r3
 80228bc:	d908      	bls.n	80228d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80228be:	4b56      	ldr	r3, [pc, #344]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80228c0:	6a1b      	ldr	r3, [r3, #32]
 80228c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80228c6:	687b      	ldr	r3, [r7, #4]
 80228c8:	69db      	ldr	r3, [r3, #28]
 80228ca:	4953      	ldr	r1, [pc, #332]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80228cc:	4313      	orrs	r3, r2
 80228ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	f003 0302 	and.w	r3, r3, #2
 80228d8:	2b00      	cmp	r3, #0
 80228da:	d010      	beq.n	80228fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80228dc:	687b      	ldr	r3, [r7, #4]
 80228de:	68da      	ldr	r2, [r3, #12]
 80228e0:	4b4d      	ldr	r3, [pc, #308]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80228e2:	699b      	ldr	r3, [r3, #24]
 80228e4:	f003 030f 	and.w	r3, r3, #15
 80228e8:	429a      	cmp	r2, r3
 80228ea:	d908      	bls.n	80228fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80228ec:	4b4a      	ldr	r3, [pc, #296]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80228ee:	699b      	ldr	r3, [r3, #24]
 80228f0:	f023 020f 	bic.w	r2, r3, #15
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	68db      	ldr	r3, [r3, #12]
 80228f8:	4947      	ldr	r1, [pc, #284]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80228fa:	4313      	orrs	r3, r2
 80228fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	681b      	ldr	r3, [r3, #0]
 8022902:	f003 0301 	and.w	r3, r3, #1
 8022906:	2b00      	cmp	r3, #0
 8022908:	d055      	beq.n	80229b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 802290a:	4b43      	ldr	r3, [pc, #268]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 802290c:	699b      	ldr	r3, [r3, #24]
 802290e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	689b      	ldr	r3, [r3, #8]
 8022916:	4940      	ldr	r1, [pc, #256]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022918:	4313      	orrs	r3, r2
 802291a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 802291c:	687b      	ldr	r3, [r7, #4]
 802291e:	685b      	ldr	r3, [r3, #4]
 8022920:	2b02      	cmp	r3, #2
 8022922:	d107      	bne.n	8022934 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8022924:	4b3c      	ldr	r3, [pc, #240]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022926:	681b      	ldr	r3, [r3, #0]
 8022928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 802292c:	2b00      	cmp	r3, #0
 802292e:	d121      	bne.n	8022974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022930:	2301      	movs	r3, #1
 8022932:	e0f6      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	685b      	ldr	r3, [r3, #4]
 8022938:	2b03      	cmp	r3, #3
 802293a:	d107      	bne.n	802294c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 802293c:	4b36      	ldr	r3, [pc, #216]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 802293e:	681b      	ldr	r3, [r3, #0]
 8022940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022944:	2b00      	cmp	r3, #0
 8022946:	d115      	bne.n	8022974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022948:	2301      	movs	r3, #1
 802294a:	e0ea      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 802294c:	687b      	ldr	r3, [r7, #4]
 802294e:	685b      	ldr	r3, [r3, #4]
 8022950:	2b01      	cmp	r3, #1
 8022952:	d107      	bne.n	8022964 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8022954:	4b30      	ldr	r3, [pc, #192]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022956:	681b      	ldr	r3, [r3, #0]
 8022958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802295c:	2b00      	cmp	r3, #0
 802295e:	d109      	bne.n	8022974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022960:	2301      	movs	r3, #1
 8022962:	e0de      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8022964:	4b2c      	ldr	r3, [pc, #176]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022966:	681b      	ldr	r3, [r3, #0]
 8022968:	f003 0304 	and.w	r3, r3, #4
 802296c:	2b00      	cmp	r3, #0
 802296e:	d101      	bne.n	8022974 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8022970:	2301      	movs	r3, #1
 8022972:	e0d6      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8022974:	4b28      	ldr	r3, [pc, #160]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022976:	691b      	ldr	r3, [r3, #16]
 8022978:	f023 0207 	bic.w	r2, r3, #7
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	685b      	ldr	r3, [r3, #4]
 8022980:	4925      	ldr	r1, [pc, #148]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 8022982:	4313      	orrs	r3, r2
 8022984:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022986:	f7fe fd97 	bl	80214b8 <HAL_GetTick>
 802298a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802298c:	e00a      	b.n	80229a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802298e:	f7fe fd93 	bl	80214b8 <HAL_GetTick>
 8022992:	4602      	mov	r2, r0
 8022994:	697b      	ldr	r3, [r7, #20]
 8022996:	1ad3      	subs	r3, r2, r3
 8022998:	f241 3288 	movw	r2, #5000	@ 0x1388
 802299c:	4293      	cmp	r3, r2
 802299e:	d901      	bls.n	80229a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80229a0:	2303      	movs	r3, #3
 80229a2:	e0be      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80229a4:	4b1c      	ldr	r3, [pc, #112]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80229a6:	691b      	ldr	r3, [r3, #16]
 80229a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	685b      	ldr	r3, [r3, #4]
 80229b0:	00db      	lsls	r3, r3, #3
 80229b2:	429a      	cmp	r2, r3
 80229b4:	d1eb      	bne.n	802298e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80229b6:	687b      	ldr	r3, [r7, #4]
 80229b8:	681b      	ldr	r3, [r3, #0]
 80229ba:	f003 0302 	and.w	r3, r3, #2
 80229be:	2b00      	cmp	r3, #0
 80229c0:	d010      	beq.n	80229e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80229c2:	687b      	ldr	r3, [r7, #4]
 80229c4:	68da      	ldr	r2, [r3, #12]
 80229c6:	4b14      	ldr	r3, [pc, #80]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80229c8:	699b      	ldr	r3, [r3, #24]
 80229ca:	f003 030f 	and.w	r3, r3, #15
 80229ce:	429a      	cmp	r2, r3
 80229d0:	d208      	bcs.n	80229e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80229d2:	4b11      	ldr	r3, [pc, #68]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80229d4:	699b      	ldr	r3, [r3, #24]
 80229d6:	f023 020f 	bic.w	r2, r3, #15
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	68db      	ldr	r3, [r3, #12]
 80229de:	490e      	ldr	r1, [pc, #56]	@ (8022a18 <HAL_RCC_ClockConfig+0x244>)
 80229e0:	4313      	orrs	r3, r2
 80229e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80229e4:	4b0b      	ldr	r3, [pc, #44]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 80229e6:	681b      	ldr	r3, [r3, #0]
 80229e8:	f003 030f 	and.w	r3, r3, #15
 80229ec:	683a      	ldr	r2, [r7, #0]
 80229ee:	429a      	cmp	r2, r3
 80229f0:	d214      	bcs.n	8022a1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80229f2:	4b08      	ldr	r3, [pc, #32]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 80229f4:	681b      	ldr	r3, [r3, #0]
 80229f6:	f023 020f 	bic.w	r2, r3, #15
 80229fa:	4906      	ldr	r1, [pc, #24]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 80229fc:	683b      	ldr	r3, [r7, #0]
 80229fe:	4313      	orrs	r3, r2
 8022a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022a02:	4b04      	ldr	r3, [pc, #16]	@ (8022a14 <HAL_RCC_ClockConfig+0x240>)
 8022a04:	681b      	ldr	r3, [r3, #0]
 8022a06:	f003 030f 	and.w	r3, r3, #15
 8022a0a:	683a      	ldr	r2, [r7, #0]
 8022a0c:	429a      	cmp	r2, r3
 8022a0e:	d005      	beq.n	8022a1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8022a10:	2301      	movs	r3, #1
 8022a12:	e086      	b.n	8022b22 <HAL_RCC_ClockConfig+0x34e>
 8022a14:	52002000 	.word	0x52002000
 8022a18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8022a1c:	687b      	ldr	r3, [r7, #4]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	f003 0304 	and.w	r3, r3, #4
 8022a24:	2b00      	cmp	r3, #0
 8022a26:	d010      	beq.n	8022a4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8022a28:	687b      	ldr	r3, [r7, #4]
 8022a2a:	691a      	ldr	r2, [r3, #16]
 8022a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a2e:	699b      	ldr	r3, [r3, #24]
 8022a30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022a34:	429a      	cmp	r2, r3
 8022a36:	d208      	bcs.n	8022a4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8022a38:	4b3c      	ldr	r3, [pc, #240]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a3a:	699b      	ldr	r3, [r3, #24]
 8022a3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8022a40:	687b      	ldr	r3, [r7, #4]
 8022a42:	691b      	ldr	r3, [r3, #16]
 8022a44:	4939      	ldr	r1, [pc, #228]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a46:	4313      	orrs	r3, r2
 8022a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022a4a:	687b      	ldr	r3, [r7, #4]
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	f003 0308 	and.w	r3, r3, #8
 8022a52:	2b00      	cmp	r3, #0
 8022a54:	d010      	beq.n	8022a78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8022a56:	687b      	ldr	r3, [r7, #4]
 8022a58:	695a      	ldr	r2, [r3, #20]
 8022a5a:	4b34      	ldr	r3, [pc, #208]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a5c:	69db      	ldr	r3, [r3, #28]
 8022a5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022a62:	429a      	cmp	r2, r3
 8022a64:	d208      	bcs.n	8022a78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8022a66:	4b31      	ldr	r3, [pc, #196]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a68:	69db      	ldr	r3, [r3, #28]
 8022a6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8022a6e:	687b      	ldr	r3, [r7, #4]
 8022a70:	695b      	ldr	r3, [r3, #20]
 8022a72:	492e      	ldr	r1, [pc, #184]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a74:	4313      	orrs	r3, r2
 8022a76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022a78:	687b      	ldr	r3, [r7, #4]
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	f003 0310 	and.w	r3, r3, #16
 8022a80:	2b00      	cmp	r3, #0
 8022a82:	d010      	beq.n	8022aa6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8022a84:	687b      	ldr	r3, [r7, #4]
 8022a86:	699a      	ldr	r2, [r3, #24]
 8022a88:	4b28      	ldr	r3, [pc, #160]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a8a:	69db      	ldr	r3, [r3, #28]
 8022a8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8022a90:	429a      	cmp	r2, r3
 8022a92:	d208      	bcs.n	8022aa6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8022a94:	4b25      	ldr	r3, [pc, #148]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022a96:	69db      	ldr	r3, [r3, #28]
 8022a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8022a9c:	687b      	ldr	r3, [r7, #4]
 8022a9e:	699b      	ldr	r3, [r3, #24]
 8022aa0:	4922      	ldr	r1, [pc, #136]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022aa2:	4313      	orrs	r3, r2
 8022aa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8022aa6:	687b      	ldr	r3, [r7, #4]
 8022aa8:	681b      	ldr	r3, [r3, #0]
 8022aaa:	f003 0320 	and.w	r3, r3, #32
 8022aae:	2b00      	cmp	r3, #0
 8022ab0:	d010      	beq.n	8022ad4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8022ab2:	687b      	ldr	r3, [r7, #4]
 8022ab4:	69da      	ldr	r2, [r3, #28]
 8022ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022ab8:	6a1b      	ldr	r3, [r3, #32]
 8022aba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8022abe:	429a      	cmp	r2, r3
 8022ac0:	d208      	bcs.n	8022ad4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8022ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022ac4:	6a1b      	ldr	r3, [r3, #32]
 8022ac6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8022aca:	687b      	ldr	r3, [r7, #4]
 8022acc:	69db      	ldr	r3, [r3, #28]
 8022ace:	4917      	ldr	r1, [pc, #92]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022ad0:	4313      	orrs	r3, r2
 8022ad2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8022ad4:	f000 f834 	bl	8022b40 <HAL_RCC_GetSysClockFreq>
 8022ad8:	4602      	mov	r2, r0
 8022ada:	4b14      	ldr	r3, [pc, #80]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022adc:	699b      	ldr	r3, [r3, #24]
 8022ade:	0a1b      	lsrs	r3, r3, #8
 8022ae0:	f003 030f 	and.w	r3, r3, #15
 8022ae4:	4912      	ldr	r1, [pc, #72]	@ (8022b30 <HAL_RCC_ClockConfig+0x35c>)
 8022ae6:	5ccb      	ldrb	r3, [r1, r3]
 8022ae8:	f003 031f 	and.w	r3, r3, #31
 8022aec:	fa22 f303 	lsr.w	r3, r2, r3
 8022af0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8022af2:	4b0e      	ldr	r3, [pc, #56]	@ (8022b2c <HAL_RCC_ClockConfig+0x358>)
 8022af4:	699b      	ldr	r3, [r3, #24]
 8022af6:	f003 030f 	and.w	r3, r3, #15
 8022afa:	4a0d      	ldr	r2, [pc, #52]	@ (8022b30 <HAL_RCC_ClockConfig+0x35c>)
 8022afc:	5cd3      	ldrb	r3, [r2, r3]
 8022afe:	f003 031f 	and.w	r3, r3, #31
 8022b02:	693a      	ldr	r2, [r7, #16]
 8022b04:	fa22 f303 	lsr.w	r3, r2, r3
 8022b08:	4a0a      	ldr	r2, [pc, #40]	@ (8022b34 <HAL_RCC_ClockConfig+0x360>)
 8022b0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8022b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8022b38 <HAL_RCC_ClockConfig+0x364>)
 8022b0e:	693b      	ldr	r3, [r7, #16]
 8022b10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8022b12:	4b0a      	ldr	r3, [pc, #40]	@ (8022b3c <HAL_RCC_ClockConfig+0x368>)
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	4618      	mov	r0, r3
 8022b18:	f7fe fc84 	bl	8021424 <HAL_InitTick>
 8022b1c:	4603      	mov	r3, r0
 8022b1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8022b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8022b22:	4618      	mov	r0, r3
 8022b24:	3718      	adds	r7, #24
 8022b26:	46bd      	mov	sp, r7
 8022b28:	bd80      	pop	{r7, pc}
 8022b2a:	bf00      	nop
 8022b2c:	58024400 	.word	0x58024400
 8022b30:	080298a0 	.word	0x080298a0
 8022b34:	24000004 	.word	0x24000004
 8022b38:	24000000 	.word	0x24000000
 8022b3c:	24000008 	.word	0x24000008

08022b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8022b40:	b480      	push	{r7}
 8022b42:	b089      	sub	sp, #36	@ 0x24
 8022b44:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8022b46:	4bb3      	ldr	r3, [pc, #716]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022b48:	691b      	ldr	r3, [r3, #16]
 8022b4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8022b4e:	2b18      	cmp	r3, #24
 8022b50:	f200 8155 	bhi.w	8022dfe <HAL_RCC_GetSysClockFreq+0x2be>
 8022b54:	a201      	add	r2, pc, #4	@ (adr r2, 8022b5c <HAL_RCC_GetSysClockFreq+0x1c>)
 8022b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022b5a:	bf00      	nop
 8022b5c:	08022bc1 	.word	0x08022bc1
 8022b60:	08022dff 	.word	0x08022dff
 8022b64:	08022dff 	.word	0x08022dff
 8022b68:	08022dff 	.word	0x08022dff
 8022b6c:	08022dff 	.word	0x08022dff
 8022b70:	08022dff 	.word	0x08022dff
 8022b74:	08022dff 	.word	0x08022dff
 8022b78:	08022dff 	.word	0x08022dff
 8022b7c:	08022be7 	.word	0x08022be7
 8022b80:	08022dff 	.word	0x08022dff
 8022b84:	08022dff 	.word	0x08022dff
 8022b88:	08022dff 	.word	0x08022dff
 8022b8c:	08022dff 	.word	0x08022dff
 8022b90:	08022dff 	.word	0x08022dff
 8022b94:	08022dff 	.word	0x08022dff
 8022b98:	08022dff 	.word	0x08022dff
 8022b9c:	08022bed 	.word	0x08022bed
 8022ba0:	08022dff 	.word	0x08022dff
 8022ba4:	08022dff 	.word	0x08022dff
 8022ba8:	08022dff 	.word	0x08022dff
 8022bac:	08022dff 	.word	0x08022dff
 8022bb0:	08022dff 	.word	0x08022dff
 8022bb4:	08022dff 	.word	0x08022dff
 8022bb8:	08022dff 	.word	0x08022dff
 8022bbc:	08022bf3 	.word	0x08022bf3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022bc0:	4b94      	ldr	r3, [pc, #592]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022bc2:	681b      	ldr	r3, [r3, #0]
 8022bc4:	f003 0320 	and.w	r3, r3, #32
 8022bc8:	2b00      	cmp	r3, #0
 8022bca:	d009      	beq.n	8022be0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8022bcc:	4b91      	ldr	r3, [pc, #580]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022bce:	681b      	ldr	r3, [r3, #0]
 8022bd0:	08db      	lsrs	r3, r3, #3
 8022bd2:	f003 0303 	and.w	r3, r3, #3
 8022bd6:	4a90      	ldr	r2, [pc, #576]	@ (8022e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8022bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8022bdc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8022bde:	e111      	b.n	8022e04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8022be0:	4b8d      	ldr	r3, [pc, #564]	@ (8022e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8022be2:	61bb      	str	r3, [r7, #24]
      break;
 8022be4:	e10e      	b.n	8022e04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8022be6:	4b8d      	ldr	r3, [pc, #564]	@ (8022e1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8022be8:	61bb      	str	r3, [r7, #24]
      break;
 8022bea:	e10b      	b.n	8022e04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8022bec:	4b8c      	ldr	r3, [pc, #560]	@ (8022e20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8022bee:	61bb      	str	r3, [r7, #24]
      break;
 8022bf0:	e108      	b.n	8022e04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8022bf2:	4b88      	ldr	r3, [pc, #544]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022bf6:	f003 0303 	and.w	r3, r3, #3
 8022bfa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8022bfc:	4b85      	ldr	r3, [pc, #532]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022c00:	091b      	lsrs	r3, r3, #4
 8022c02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8022c06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8022c08:	4b82      	ldr	r3, [pc, #520]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c0c:	f003 0301 	and.w	r3, r3, #1
 8022c10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8022c12:	4b80      	ldr	r3, [pc, #512]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c16:	08db      	lsrs	r3, r3, #3
 8022c18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022c1c:	68fa      	ldr	r2, [r7, #12]
 8022c1e:	fb02 f303 	mul.w	r3, r2, r3
 8022c22:	ee07 3a90 	vmov	s15, r3
 8022c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022c2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8022c2e:	693b      	ldr	r3, [r7, #16]
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	f000 80e1 	beq.w	8022df8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8022c36:	697b      	ldr	r3, [r7, #20]
 8022c38:	2b02      	cmp	r3, #2
 8022c3a:	f000 8083 	beq.w	8022d44 <HAL_RCC_GetSysClockFreq+0x204>
 8022c3e:	697b      	ldr	r3, [r7, #20]
 8022c40:	2b02      	cmp	r3, #2
 8022c42:	f200 80a1 	bhi.w	8022d88 <HAL_RCC_GetSysClockFreq+0x248>
 8022c46:	697b      	ldr	r3, [r7, #20]
 8022c48:	2b00      	cmp	r3, #0
 8022c4a:	d003      	beq.n	8022c54 <HAL_RCC_GetSysClockFreq+0x114>
 8022c4c:	697b      	ldr	r3, [r7, #20]
 8022c4e:	2b01      	cmp	r3, #1
 8022c50:	d056      	beq.n	8022d00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8022c52:	e099      	b.n	8022d88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8022c54:	4b6f      	ldr	r3, [pc, #444]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022c56:	681b      	ldr	r3, [r3, #0]
 8022c58:	f003 0320 	and.w	r3, r3, #32
 8022c5c:	2b00      	cmp	r3, #0
 8022c5e:	d02d      	beq.n	8022cbc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8022c60:	4b6c      	ldr	r3, [pc, #432]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022c62:	681b      	ldr	r3, [r3, #0]
 8022c64:	08db      	lsrs	r3, r3, #3
 8022c66:	f003 0303 	and.w	r3, r3, #3
 8022c6a:	4a6b      	ldr	r2, [pc, #428]	@ (8022e18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8022c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8022c70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022c72:	687b      	ldr	r3, [r7, #4]
 8022c74:	ee07 3a90 	vmov	s15, r3
 8022c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022c7c:	693b      	ldr	r3, [r7, #16]
 8022c7e:	ee07 3a90 	vmov	s15, r3
 8022c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022c8a:	4b62      	ldr	r3, [pc, #392]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022c92:	ee07 3a90 	vmov	s15, r3
 8022c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8022c9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8022e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8022ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8022cba:	e087      	b.n	8022dcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022cbc:	693b      	ldr	r3, [r7, #16]
 8022cbe:	ee07 3a90 	vmov	s15, r3
 8022cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022cc6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8022e28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8022cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022cce:	4b51      	ldr	r3, [pc, #324]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022cd6:	ee07 3a90 	vmov	s15, r3
 8022cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8022ce2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8022e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8022ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022cfe:	e065      	b.n	8022dcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022d00:	693b      	ldr	r3, [r7, #16]
 8022d02:	ee07 3a90 	vmov	s15, r3
 8022d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022d0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8022e2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8022d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022d12:	4b40      	ldr	r3, [pc, #256]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022d1a:	ee07 3a90 	vmov	s15, r3
 8022d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8022d26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8022e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8022d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022d42:	e043      	b.n	8022dcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022d44:	693b      	ldr	r3, [r7, #16]
 8022d46:	ee07 3a90 	vmov	s15, r3
 8022d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022d4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8022e30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8022d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022d56:	4b2f      	ldr	r3, [pc, #188]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022d5e:	ee07 3a90 	vmov	s15, r3
 8022d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022d66:	ed97 6a02 	vldr	s12, [r7, #8]
 8022d6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8022e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8022d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022d82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022d86:	e021      	b.n	8022dcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8022d88:	693b      	ldr	r3, [r7, #16]
 8022d8a:	ee07 3a90 	vmov	s15, r3
 8022d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8022d92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8022e2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8022d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8022d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8022da2:	ee07 3a90 	vmov	s15, r3
 8022da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8022daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8022dae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8022e24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8022db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8022db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8022dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8022dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8022dca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8022dcc:	4b11      	ldr	r3, [pc, #68]	@ (8022e14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8022dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022dd0:	0a5b      	lsrs	r3, r3, #9
 8022dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8022dd6:	3301      	adds	r3, #1
 8022dd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8022dda:	683b      	ldr	r3, [r7, #0]
 8022ddc:	ee07 3a90 	vmov	s15, r3
 8022de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8022de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8022de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022df0:	ee17 3a90 	vmov	r3, s15
 8022df4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8022df6:	e005      	b.n	8022e04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8022df8:	2300      	movs	r3, #0
 8022dfa:	61bb      	str	r3, [r7, #24]
      break;
 8022dfc:	e002      	b.n	8022e04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8022dfe:	4b07      	ldr	r3, [pc, #28]	@ (8022e1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8022e00:	61bb      	str	r3, [r7, #24]
      break;
 8022e02:	bf00      	nop
  }

  return sysclockfreq;
 8022e04:	69bb      	ldr	r3, [r7, #24]
}
 8022e06:	4618      	mov	r0, r3
 8022e08:	3724      	adds	r7, #36	@ 0x24
 8022e0a:	46bd      	mov	sp, r7
 8022e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022e10:	4770      	bx	lr
 8022e12:	bf00      	nop
 8022e14:	58024400 	.word	0x58024400
 8022e18:	03d09000 	.word	0x03d09000
 8022e1c:	003d0900 	.word	0x003d0900
 8022e20:	017d7840 	.word	0x017d7840
 8022e24:	46000000 	.word	0x46000000
 8022e28:	4c742400 	.word	0x4c742400
 8022e2c:	4a742400 	.word	0x4a742400
 8022e30:	4bbebc20 	.word	0x4bbebc20

08022e34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8022e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022e38:	b0c6      	sub	sp, #280	@ 0x118
 8022e3a:	af00      	add	r7, sp, #0
 8022e3c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8022e40:	2300      	movs	r3, #0
 8022e42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8022e46:	2300      	movs	r3, #0
 8022e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8022e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e54:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8022e58:	2500      	movs	r5, #0
 8022e5a:	ea54 0305 	orrs.w	r3, r4, r5
 8022e5e:	d049      	beq.n	8022ef4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8022e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022e64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022e66:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8022e6a:	d02f      	beq.n	8022ecc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8022e6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8022e70:	d828      	bhi.n	8022ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8022e72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8022e76:	d01a      	beq.n	8022eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8022e78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8022e7c:	d822      	bhi.n	8022ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d003      	beq.n	8022e8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8022e82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8022e86:	d007      	beq.n	8022e98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8022e88:	e01c      	b.n	8022ec4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022e8a:	4bab      	ldr	r3, [pc, #684]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022e8e:	4aaa      	ldr	r2, [pc, #680]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022e94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8022e96:	e01a      	b.n	8022ece <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8022e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022e9c:	3308      	adds	r3, #8
 8022e9e:	2102      	movs	r1, #2
 8022ea0:	4618      	mov	r0, r3
 8022ea2:	f001 f967 	bl	8024174 <RCCEx_PLL2_Config>
 8022ea6:	4603      	mov	r3, r0
 8022ea8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8022eac:	e00f      	b.n	8022ece <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8022eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022eb2:	3328      	adds	r3, #40	@ 0x28
 8022eb4:	2102      	movs	r1, #2
 8022eb6:	4618      	mov	r0, r3
 8022eb8:	f001 fa0e 	bl	80242d8 <RCCEx_PLL3_Config>
 8022ebc:	4603      	mov	r3, r0
 8022ebe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8022ec2:	e004      	b.n	8022ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8022ec4:	2301      	movs	r3, #1
 8022ec6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8022eca:	e000      	b.n	8022ece <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8022ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022ece:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	d10a      	bne.n	8022eec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8022ed6:	4b98      	ldr	r3, [pc, #608]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022eda:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8022ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022ee2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8022ee4:	4a94      	ldr	r2, [pc, #592]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022ee6:	430b      	orrs	r3, r1
 8022ee8:	6513      	str	r3, [r2, #80]	@ 0x50
 8022eea:	e003      	b.n	8022ef4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022eec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022ef0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8022ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022efc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8022f00:	f04f 0900 	mov.w	r9, #0
 8022f04:	ea58 0309 	orrs.w	r3, r8, r9
 8022f08:	d047      	beq.n	8022f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8022f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022f10:	2b04      	cmp	r3, #4
 8022f12:	d82a      	bhi.n	8022f6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8022f14:	a201      	add	r2, pc, #4	@ (adr r2, 8022f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8022f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022f1a:	bf00      	nop
 8022f1c:	08022f31 	.word	0x08022f31
 8022f20:	08022f3f 	.word	0x08022f3f
 8022f24:	08022f55 	.word	0x08022f55
 8022f28:	08022f73 	.word	0x08022f73
 8022f2c:	08022f73 	.word	0x08022f73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022f30:	4b81      	ldr	r3, [pc, #516]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022f34:	4a80      	ldr	r2, [pc, #512]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022f3c:	e01a      	b.n	8022f74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8022f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f42:	3308      	adds	r3, #8
 8022f44:	2100      	movs	r1, #0
 8022f46:	4618      	mov	r0, r3
 8022f48:	f001 f914 	bl	8024174 <RCCEx_PLL2_Config>
 8022f4c:	4603      	mov	r3, r0
 8022f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022f52:	e00f      	b.n	8022f74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8022f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f58:	3328      	adds	r3, #40	@ 0x28
 8022f5a:	2100      	movs	r1, #0
 8022f5c:	4618      	mov	r0, r3
 8022f5e:	f001 f9bb 	bl	80242d8 <RCCEx_PLL3_Config>
 8022f62:	4603      	mov	r3, r0
 8022f64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8022f68:	e004      	b.n	8022f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8022f6a:	2301      	movs	r3, #1
 8022f6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8022f70:	e000      	b.n	8022f74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8022f72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022f74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022f78:	2b00      	cmp	r3, #0
 8022f7a:	d10a      	bne.n	8022f92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8022f7c:	4b6e      	ldr	r3, [pc, #440]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022f80:	f023 0107 	bic.w	r1, r3, #7
 8022f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8022f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022f8c:	430b      	orrs	r3, r1
 8022f8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8022f90:	e003      	b.n	8022f9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022f92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8022f96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8022f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fa2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8022fa6:	f04f 0b00 	mov.w	fp, #0
 8022faa:	ea5a 030b 	orrs.w	r3, sl, fp
 8022fae:	d05b      	beq.n	8023068 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8022fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8022fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8022fb8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8022fbc:	d03b      	beq.n	8023036 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8022fbe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8022fc2:	d834      	bhi.n	802302e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022fc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8022fc8:	d037      	beq.n	802303a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8022fca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8022fce:	d82e      	bhi.n	802302e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022fd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8022fd4:	d033      	beq.n	802303e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8022fd6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8022fda:	d828      	bhi.n	802302e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8022fe0:	d01a      	beq.n	8023018 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8022fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8022fe6:	d822      	bhi.n	802302e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8022fe8:	2b00      	cmp	r3, #0
 8022fea:	d003      	beq.n	8022ff4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8022fec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8022ff0:	d007      	beq.n	8023002 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8022ff2:	e01c      	b.n	802302e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8022ff4:	4b50      	ldr	r3, [pc, #320]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8022ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8022ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8023000:	e01e      	b.n	8023040 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023006:	3308      	adds	r3, #8
 8023008:	2100      	movs	r1, #0
 802300a:	4618      	mov	r0, r3
 802300c:	f001 f8b2 	bl	8024174 <RCCEx_PLL2_Config>
 8023010:	4603      	mov	r3, r0
 8023012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8023016:	e013      	b.n	8023040 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8023018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802301c:	3328      	adds	r3, #40	@ 0x28
 802301e:	2100      	movs	r1, #0
 8023020:	4618      	mov	r0, r3
 8023022:	f001 f959 	bl	80242d8 <RCCEx_PLL3_Config>
 8023026:	4603      	mov	r3, r0
 8023028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 802302c:	e008      	b.n	8023040 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 802302e:	2301      	movs	r3, #1
 8023030:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023034:	e004      	b.n	8023040 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8023036:	bf00      	nop
 8023038:	e002      	b.n	8023040 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 802303a:	bf00      	nop
 802303c:	e000      	b.n	8023040 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 802303e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023044:	2b00      	cmp	r3, #0
 8023046:	d10b      	bne.n	8023060 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8023048:	4b3b      	ldr	r3, [pc, #236]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 802304a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802304c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8023050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8023058:	4a37      	ldr	r2, [pc, #220]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 802305a:	430b      	orrs	r3, r1
 802305c:	6593      	str	r3, [r2, #88]	@ 0x58
 802305e:	e003      	b.n	8023068 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023060:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023064:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8023068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023070:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8023074:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8023078:	2300      	movs	r3, #0
 802307a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 802307e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8023082:	460b      	mov	r3, r1
 8023084:	4313      	orrs	r3, r2
 8023086:	d05d      	beq.n	8023144 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8023088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802308c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8023090:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8023094:	d03b      	beq.n	802310e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8023096:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 802309a:	d834      	bhi.n	8023106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 802309c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80230a0:	d037      	beq.n	8023112 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80230a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80230a6:	d82e      	bhi.n	8023106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80230a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80230ac:	d033      	beq.n	8023116 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80230ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80230b2:	d828      	bhi.n	8023106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80230b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80230b8:	d01a      	beq.n	80230f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80230ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80230be:	d822      	bhi.n	8023106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	d003      	beq.n	80230cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80230c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80230c8:	d007      	beq.n	80230da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80230ca:	e01c      	b.n	8023106 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80230cc:	4b1a      	ldr	r3, [pc, #104]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80230ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80230d0:	4a19      	ldr	r2, [pc, #100]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80230d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80230d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80230d8:	e01e      	b.n	8023118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80230da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80230de:	3308      	adds	r3, #8
 80230e0:	2100      	movs	r1, #0
 80230e2:	4618      	mov	r0, r3
 80230e4:	f001 f846 	bl	8024174 <RCCEx_PLL2_Config>
 80230e8:	4603      	mov	r3, r0
 80230ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80230ee:	e013      	b.n	8023118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80230f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80230f4:	3328      	adds	r3, #40	@ 0x28
 80230f6:	2100      	movs	r1, #0
 80230f8:	4618      	mov	r0, r3
 80230fa:	f001 f8ed 	bl	80242d8 <RCCEx_PLL3_Config>
 80230fe:	4603      	mov	r3, r0
 8023100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8023104:	e008      	b.n	8023118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8023106:	2301      	movs	r3, #1
 8023108:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802310c:	e004      	b.n	8023118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 802310e:	bf00      	nop
 8023110:	e002      	b.n	8023118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8023112:	bf00      	nop
 8023114:	e000      	b.n	8023118 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8023116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023118:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802311c:	2b00      	cmp	r3, #0
 802311e:	d10d      	bne.n	802313c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8023120:	4b05      	ldr	r3, [pc, #20]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8023122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023124:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8023128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802312c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8023130:	4a01      	ldr	r2, [pc, #4]	@ (8023138 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8023132:	430b      	orrs	r3, r1
 8023134:	6593      	str	r3, [r2, #88]	@ 0x58
 8023136:	e005      	b.n	8023144 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8023138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 802313c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023140:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8023144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023148:	e9d3 2300 	ldrd	r2, r3, [r3]
 802314c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8023150:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8023154:	2300      	movs	r3, #0
 8023156:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 802315a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 802315e:	460b      	mov	r3, r1
 8023160:	4313      	orrs	r3, r2
 8023162:	d03a      	beq.n	80231da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8023164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802316a:	2b30      	cmp	r3, #48	@ 0x30
 802316c:	d01f      	beq.n	80231ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 802316e:	2b30      	cmp	r3, #48	@ 0x30
 8023170:	d819      	bhi.n	80231a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8023172:	2b20      	cmp	r3, #32
 8023174:	d00c      	beq.n	8023190 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8023176:	2b20      	cmp	r3, #32
 8023178:	d815      	bhi.n	80231a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 802317a:	2b00      	cmp	r3, #0
 802317c:	d019      	beq.n	80231b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 802317e:	2b10      	cmp	r3, #16
 8023180:	d111      	bne.n	80231a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023182:	4baa      	ldr	r3, [pc, #680]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023186:	4aa9      	ldr	r2, [pc, #676]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802318c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 802318e:	e011      	b.n	80231b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8023190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023194:	3308      	adds	r3, #8
 8023196:	2102      	movs	r1, #2
 8023198:	4618      	mov	r0, r3
 802319a:	f000 ffeb 	bl	8024174 <RCCEx_PLL2_Config>
 802319e:	4603      	mov	r3, r0
 80231a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80231a4:	e006      	b.n	80231b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80231a6:	2301      	movs	r3, #1
 80231a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80231ac:	e002      	b.n	80231b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80231ae:	bf00      	nop
 80231b0:	e000      	b.n	80231b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80231b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80231b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	d10a      	bne.n	80231d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80231bc:	4b9b      	ldr	r3, [pc, #620]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80231be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80231c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80231c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80231c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80231ca:	4a98      	ldr	r2, [pc, #608]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80231cc:	430b      	orrs	r3, r1
 80231ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80231d0:	e003      	b.n	80231da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80231d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80231d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80231da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80231de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80231e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80231ea:	2300      	movs	r3, #0
 80231ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80231f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80231f4:	460b      	mov	r3, r1
 80231f6:	4313      	orrs	r3, r2
 80231f8:	d051      	beq.n	802329e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80231fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80231fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8023200:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023204:	d035      	beq.n	8023272 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8023206:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 802320a:	d82e      	bhi.n	802326a <HAL_RCCEx_PeriphCLKConfig+0x436>
 802320c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8023210:	d031      	beq.n	8023276 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8023212:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8023216:	d828      	bhi.n	802326a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8023218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802321c:	d01a      	beq.n	8023254 <HAL_RCCEx_PeriphCLKConfig+0x420>
 802321e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8023222:	d822      	bhi.n	802326a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8023224:	2b00      	cmp	r3, #0
 8023226:	d003      	beq.n	8023230 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8023228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802322c:	d007      	beq.n	802323e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 802322e:	e01c      	b.n	802326a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023230:	4b7e      	ldr	r3, [pc, #504]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023234:	4a7d      	ldr	r2, [pc, #500]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802323a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 802323c:	e01c      	b.n	8023278 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 802323e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023242:	3308      	adds	r3, #8
 8023244:	2100      	movs	r1, #0
 8023246:	4618      	mov	r0, r3
 8023248:	f000 ff94 	bl	8024174 <RCCEx_PLL2_Config>
 802324c:	4603      	mov	r3, r0
 802324e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8023252:	e011      	b.n	8023278 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8023254:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023258:	3328      	adds	r3, #40	@ 0x28
 802325a:	2100      	movs	r1, #0
 802325c:	4618      	mov	r0, r3
 802325e:	f001 f83b 	bl	80242d8 <RCCEx_PLL3_Config>
 8023262:	4603      	mov	r3, r0
 8023264:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8023268:	e006      	b.n	8023278 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802326a:	2301      	movs	r3, #1
 802326c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023270:	e002      	b.n	8023278 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8023272:	bf00      	nop
 8023274:	e000      	b.n	8023278 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8023276:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023278:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802327c:	2b00      	cmp	r3, #0
 802327e:	d10a      	bne.n	8023296 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8023280:	4b6a      	ldr	r3, [pc, #424]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023284:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8023288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802328c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802328e:	4a67      	ldr	r2, [pc, #412]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023290:	430b      	orrs	r3, r1
 8023292:	6513      	str	r3, [r2, #80]	@ 0x50
 8023294:	e003      	b.n	802329e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802329a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 802329e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80232a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80232aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80232ae:	2300      	movs	r3, #0
 80232b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80232b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80232b8:	460b      	mov	r3, r1
 80232ba:	4313      	orrs	r3, r2
 80232bc:	d053      	beq.n	8023366 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80232be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80232c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80232c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80232c8:	d033      	beq.n	8023332 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80232ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80232ce:	d82c      	bhi.n	802332a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80232d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80232d4:	d02f      	beq.n	8023336 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80232d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80232da:	d826      	bhi.n	802332a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80232dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80232e0:	d02b      	beq.n	802333a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80232e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80232e6:	d820      	bhi.n	802332a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80232e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80232ec:	d012      	beq.n	8023314 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80232ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80232f2:	d81a      	bhi.n	802332a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80232f4:	2b00      	cmp	r3, #0
 80232f6:	d022      	beq.n	802333e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80232f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80232fc:	d115      	bne.n	802332a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80232fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023302:	3308      	adds	r3, #8
 8023304:	2101      	movs	r1, #1
 8023306:	4618      	mov	r0, r3
 8023308:	f000 ff34 	bl	8024174 <RCCEx_PLL2_Config>
 802330c:	4603      	mov	r3, r0
 802330e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8023312:	e015      	b.n	8023340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8023314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023318:	3328      	adds	r3, #40	@ 0x28
 802331a:	2101      	movs	r1, #1
 802331c:	4618      	mov	r0, r3
 802331e:	f000 ffdb 	bl	80242d8 <RCCEx_PLL3_Config>
 8023322:	4603      	mov	r3, r0
 8023324:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8023328:	e00a      	b.n	8023340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802332a:	2301      	movs	r3, #1
 802332c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023330:	e006      	b.n	8023340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8023332:	bf00      	nop
 8023334:	e004      	b.n	8023340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8023336:	bf00      	nop
 8023338:	e002      	b.n	8023340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 802333a:	bf00      	nop
 802333c:	e000      	b.n	8023340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 802333e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023340:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023344:	2b00      	cmp	r3, #0
 8023346:	d10a      	bne.n	802335e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8023348:	4b38      	ldr	r3, [pc, #224]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 802334a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 802334c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8023350:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8023356:	4a35      	ldr	r2, [pc, #212]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023358:	430b      	orrs	r3, r1
 802335a:	6513      	str	r3, [r2, #80]	@ 0x50
 802335c:	e003      	b.n	8023366 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802335e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023362:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8023366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802336e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8023372:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8023376:	2300      	movs	r3, #0
 8023378:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802337c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8023380:	460b      	mov	r3, r1
 8023382:	4313      	orrs	r3, r2
 8023384:	d058      	beq.n	8023438 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8023386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802338a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 802338e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8023392:	d033      	beq.n	80233fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8023394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8023398:	d82c      	bhi.n	80233f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 802339a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802339e:	d02f      	beq.n	8023400 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80233a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80233a4:	d826      	bhi.n	80233f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80233a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80233aa:	d02b      	beq.n	8023404 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80233ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80233b0:	d820      	bhi.n	80233f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80233b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80233b6:	d012      	beq.n	80233de <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80233b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80233bc:	d81a      	bhi.n	80233f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80233be:	2b00      	cmp	r3, #0
 80233c0:	d022      	beq.n	8023408 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80233c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80233c6:	d115      	bne.n	80233f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80233c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80233cc:	3308      	adds	r3, #8
 80233ce:	2101      	movs	r1, #1
 80233d0:	4618      	mov	r0, r3
 80233d2:	f000 fecf 	bl	8024174 <RCCEx_PLL2_Config>
 80233d6:	4603      	mov	r3, r0
 80233d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80233dc:	e015      	b.n	802340a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80233de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80233e2:	3328      	adds	r3, #40	@ 0x28
 80233e4:	2101      	movs	r1, #1
 80233e6:	4618      	mov	r0, r3
 80233e8:	f000 ff76 	bl	80242d8 <RCCEx_PLL3_Config>
 80233ec:	4603      	mov	r3, r0
 80233ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80233f2:	e00a      	b.n	802340a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80233f4:	2301      	movs	r3, #1
 80233f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80233fa:	e006      	b.n	802340a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80233fc:	bf00      	nop
 80233fe:	e004      	b.n	802340a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8023400:	bf00      	nop
 8023402:	e002      	b.n	802340a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8023404:	bf00      	nop
 8023406:	e000      	b.n	802340a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8023408:	bf00      	nop
    }

    if (ret == HAL_OK)
 802340a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802340e:	2b00      	cmp	r3, #0
 8023410:	d10e      	bne.n	8023430 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8023412:	4b06      	ldr	r3, [pc, #24]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023416:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 802341a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802341e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8023422:	4a02      	ldr	r2, [pc, #8]	@ (802342c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8023424:	430b      	orrs	r3, r1
 8023426:	6593      	str	r3, [r2, #88]	@ 0x58
 8023428:	e006      	b.n	8023438 <HAL_RCCEx_PeriphCLKConfig+0x604>
 802342a:	bf00      	nop
 802342c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8023438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023440:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8023444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8023448:	2300      	movs	r3, #0
 802344a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 802344e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8023452:	460b      	mov	r3, r1
 8023454:	4313      	orrs	r3, r2
 8023456:	d037      	beq.n	80234c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8023458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802345c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802345e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8023462:	d00e      	beq.n	8023482 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8023464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8023468:	d816      	bhi.n	8023498 <HAL_RCCEx_PeriphCLKConfig+0x664>
 802346a:	2b00      	cmp	r3, #0
 802346c:	d018      	beq.n	80234a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 802346e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8023472:	d111      	bne.n	8023498 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023474:	4bc4      	ldr	r3, [pc, #784]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023478:	4ac3      	ldr	r2, [pc, #780]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802347a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 802347e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8023480:	e00f      	b.n	80234a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023486:	3308      	adds	r3, #8
 8023488:	2101      	movs	r1, #1
 802348a:	4618      	mov	r0, r3
 802348c:	f000 fe72 	bl	8024174 <RCCEx_PLL2_Config>
 8023490:	4603      	mov	r3, r0
 8023492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8023496:	e004      	b.n	80234a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023498:	2301      	movs	r3, #1
 802349a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802349e:	e000      	b.n	80234a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80234a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80234a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d10a      	bne.n	80234c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80234aa:	4bb7      	ldr	r3, [pc, #732]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80234ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80234ae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80234b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80234b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80234b8:	4ab3      	ldr	r2, [pc, #716]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80234ba:	430b      	orrs	r3, r1
 80234bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80234be:	e003      	b.n	80234c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80234c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80234c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80234c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80234cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234d0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80234d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80234d8:	2300      	movs	r3, #0
 80234da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80234de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80234e2:	460b      	mov	r3, r1
 80234e4:	4313      	orrs	r3, r2
 80234e6:	d039      	beq.n	802355c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80234e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80234ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80234ee:	2b03      	cmp	r3, #3
 80234f0:	d81c      	bhi.n	802352c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80234f2:	a201      	add	r2, pc, #4	@ (adr r2, 80234f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80234f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80234f8:	08023535 	.word	0x08023535
 80234fc:	08023509 	.word	0x08023509
 8023500:	08023517 	.word	0x08023517
 8023504:	08023535 	.word	0x08023535
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023508:	4b9f      	ldr	r3, [pc, #636]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802350c:	4a9e      	ldr	r2, [pc, #632]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802350e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8023512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8023514:	e00f      	b.n	8023536 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8023516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802351a:	3308      	adds	r3, #8
 802351c:	2102      	movs	r1, #2
 802351e:	4618      	mov	r0, r3
 8023520:	f000 fe28 	bl	8024174 <RCCEx_PLL2_Config>
 8023524:	4603      	mov	r3, r0
 8023526:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 802352a:	e004      	b.n	8023536 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 802352c:	2301      	movs	r3, #1
 802352e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023532:	e000      	b.n	8023536 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8023534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802353a:	2b00      	cmp	r3, #0
 802353c:	d10a      	bne.n	8023554 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 802353e:	4b92      	ldr	r3, [pc, #584]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023542:	f023 0103 	bic.w	r1, r3, #3
 8023546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802354a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802354c:	4a8e      	ldr	r2, [pc, #568]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802354e:	430b      	orrs	r3, r1
 8023550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8023552:	e003      	b.n	802355c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023554:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023558:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 802355c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023564:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8023568:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 802356c:	2300      	movs	r3, #0
 802356e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8023572:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8023576:	460b      	mov	r3, r1
 8023578:	4313      	orrs	r3, r2
 802357a:	f000 8099 	beq.w	80236b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 802357e:	4b83      	ldr	r3, [pc, #524]	@ (802378c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8023580:	681b      	ldr	r3, [r3, #0]
 8023582:	4a82      	ldr	r2, [pc, #520]	@ (802378c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8023584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8023588:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 802358a:	f7fd ff95 	bl	80214b8 <HAL_GetTick>
 802358e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8023592:	e00b      	b.n	80235ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8023594:	f7fd ff90 	bl	80214b8 <HAL_GetTick>
 8023598:	4602      	mov	r2, r0
 802359a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 802359e:	1ad3      	subs	r3, r2, r3
 80235a0:	2b64      	cmp	r3, #100	@ 0x64
 80235a2:	d903      	bls.n	80235ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80235a4:	2303      	movs	r3, #3
 80235a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80235aa:	e005      	b.n	80235b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80235ac:	4b77      	ldr	r3, [pc, #476]	@ (802378c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80235ae:	681b      	ldr	r3, [r3, #0]
 80235b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80235b4:	2b00      	cmp	r3, #0
 80235b6:	d0ed      	beq.n	8023594 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80235b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80235bc:	2b00      	cmp	r3, #0
 80235be:	d173      	bne.n	80236a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80235c0:	4b71      	ldr	r3, [pc, #452]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80235c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80235c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80235c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80235cc:	4053      	eors	r3, r2
 80235ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80235d2:	2b00      	cmp	r3, #0
 80235d4:	d015      	beq.n	8023602 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80235d6:	4b6c      	ldr	r3, [pc, #432]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80235d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80235da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80235de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80235e2:	4b69      	ldr	r3, [pc, #420]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80235e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80235e6:	4a68      	ldr	r2, [pc, #416]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80235e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80235ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80235ee:	4b66      	ldr	r3, [pc, #408]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80235f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80235f2:	4a65      	ldr	r2, [pc, #404]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80235f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80235f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80235fa:	4a63      	ldr	r2, [pc, #396]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80235fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8023600:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8023602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 802360a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 802360e:	d118      	bne.n	8023642 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8023610:	f7fd ff52 	bl	80214b8 <HAL_GetTick>
 8023614:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8023618:	e00d      	b.n	8023636 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 802361a:	f7fd ff4d 	bl	80214b8 <HAL_GetTick>
 802361e:	4602      	mov	r2, r0
 8023620:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8023624:	1ad2      	subs	r2, r2, r3
 8023626:	f241 3388 	movw	r3, #5000	@ 0x1388
 802362a:	429a      	cmp	r2, r3
 802362c:	d903      	bls.n	8023636 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 802362e:	2303      	movs	r3, #3
 8023630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8023634:	e005      	b.n	8023642 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8023636:	4b54      	ldr	r3, [pc, #336]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 802363a:	f003 0302 	and.w	r3, r3, #2
 802363e:	2b00      	cmp	r3, #0
 8023640:	d0eb      	beq.n	802361a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8023642:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023646:	2b00      	cmp	r3, #0
 8023648:	d129      	bne.n	802369e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 802364a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802364e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8023652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8023656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802365a:	d10e      	bne.n	802367a <HAL_RCCEx_PeriphCLKConfig+0x846>
 802365c:	4b4a      	ldr	r3, [pc, #296]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802365e:	691b      	ldr	r3, [r3, #16]
 8023660:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8023664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 802366c:	091a      	lsrs	r2, r3, #4
 802366e:	4b48      	ldr	r3, [pc, #288]	@ (8023790 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8023670:	4013      	ands	r3, r2
 8023672:	4a45      	ldr	r2, [pc, #276]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023674:	430b      	orrs	r3, r1
 8023676:	6113      	str	r3, [r2, #16]
 8023678:	e005      	b.n	8023686 <HAL_RCCEx_PeriphCLKConfig+0x852>
 802367a:	4b43      	ldr	r3, [pc, #268]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 802367c:	691b      	ldr	r3, [r3, #16]
 802367e:	4a42      	ldr	r2, [pc, #264]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023680:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8023684:	6113      	str	r3, [r2, #16]
 8023686:	4b40      	ldr	r3, [pc, #256]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023688:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 802368a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802368e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8023692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023696:	4a3c      	ldr	r2, [pc, #240]	@ (8023788 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8023698:	430b      	orrs	r3, r1
 802369a:	6713      	str	r3, [r2, #112]	@ 0x70
 802369c:	e008      	b.n	80236b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 802369e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80236a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80236a6:	e003      	b.n	80236b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80236a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80236ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80236b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80236b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236b8:	f002 0301 	and.w	r3, r2, #1
 80236bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80236c0:	2300      	movs	r3, #0
 80236c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80236c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80236ca:	460b      	mov	r3, r1
 80236cc:	4313      	orrs	r3, r2
 80236ce:	f000 808f 	beq.w	80237f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80236d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80236d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80236d8:	2b28      	cmp	r3, #40	@ 0x28
 80236da:	d871      	bhi.n	80237c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80236dc:	a201      	add	r2, pc, #4	@ (adr r2, 80236e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80236de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80236e2:	bf00      	nop
 80236e4:	080237c9 	.word	0x080237c9
 80236e8:	080237c1 	.word	0x080237c1
 80236ec:	080237c1 	.word	0x080237c1
 80236f0:	080237c1 	.word	0x080237c1
 80236f4:	080237c1 	.word	0x080237c1
 80236f8:	080237c1 	.word	0x080237c1
 80236fc:	080237c1 	.word	0x080237c1
 8023700:	080237c1 	.word	0x080237c1
 8023704:	08023795 	.word	0x08023795
 8023708:	080237c1 	.word	0x080237c1
 802370c:	080237c1 	.word	0x080237c1
 8023710:	080237c1 	.word	0x080237c1
 8023714:	080237c1 	.word	0x080237c1
 8023718:	080237c1 	.word	0x080237c1
 802371c:	080237c1 	.word	0x080237c1
 8023720:	080237c1 	.word	0x080237c1
 8023724:	080237ab 	.word	0x080237ab
 8023728:	080237c1 	.word	0x080237c1
 802372c:	080237c1 	.word	0x080237c1
 8023730:	080237c1 	.word	0x080237c1
 8023734:	080237c1 	.word	0x080237c1
 8023738:	080237c1 	.word	0x080237c1
 802373c:	080237c1 	.word	0x080237c1
 8023740:	080237c1 	.word	0x080237c1
 8023744:	080237c9 	.word	0x080237c9
 8023748:	080237c1 	.word	0x080237c1
 802374c:	080237c1 	.word	0x080237c1
 8023750:	080237c1 	.word	0x080237c1
 8023754:	080237c1 	.word	0x080237c1
 8023758:	080237c1 	.word	0x080237c1
 802375c:	080237c1 	.word	0x080237c1
 8023760:	080237c1 	.word	0x080237c1
 8023764:	080237c9 	.word	0x080237c9
 8023768:	080237c1 	.word	0x080237c1
 802376c:	080237c1 	.word	0x080237c1
 8023770:	080237c1 	.word	0x080237c1
 8023774:	080237c1 	.word	0x080237c1
 8023778:	080237c1 	.word	0x080237c1
 802377c:	080237c1 	.word	0x080237c1
 8023780:	080237c1 	.word	0x080237c1
 8023784:	080237c9 	.word	0x080237c9
 8023788:	58024400 	.word	0x58024400
 802378c:	58024800 	.word	0x58024800
 8023790:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023798:	3308      	adds	r3, #8
 802379a:	2101      	movs	r1, #1
 802379c:	4618      	mov	r0, r3
 802379e:	f000 fce9 	bl	8024174 <RCCEx_PLL2_Config>
 80237a2:	4603      	mov	r3, r0
 80237a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80237a8:	e00f      	b.n	80237ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80237aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80237ae:	3328      	adds	r3, #40	@ 0x28
 80237b0:	2101      	movs	r1, #1
 80237b2:	4618      	mov	r0, r3
 80237b4:	f000 fd90 	bl	80242d8 <RCCEx_PLL3_Config>
 80237b8:	4603      	mov	r3, r0
 80237ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80237be:	e004      	b.n	80237ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80237c0:	2301      	movs	r3, #1
 80237c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80237c6:	e000      	b.n	80237ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80237c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80237ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80237ce:	2b00      	cmp	r3, #0
 80237d0:	d10a      	bne.n	80237e8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80237d2:	4bbf      	ldr	r3, [pc, #764]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80237d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80237d6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80237da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80237de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80237e0:	4abb      	ldr	r2, [pc, #748]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80237e2:	430b      	orrs	r3, r1
 80237e4:	6553      	str	r3, [r2, #84]	@ 0x54
 80237e6:	e003      	b.n	80237f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80237e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80237ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80237f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80237f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237f8:	f002 0302 	and.w	r3, r2, #2
 80237fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8023800:	2300      	movs	r3, #0
 8023802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8023806:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 802380a:	460b      	mov	r3, r1
 802380c:	4313      	orrs	r3, r2
 802380e:	d041      	beq.n	8023894 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8023810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023816:	2b05      	cmp	r3, #5
 8023818:	d824      	bhi.n	8023864 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 802381a:	a201      	add	r2, pc, #4	@ (adr r2, 8023820 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 802381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023820:	0802386d 	.word	0x0802386d
 8023824:	08023839 	.word	0x08023839
 8023828:	0802384f 	.word	0x0802384f
 802382c:	0802386d 	.word	0x0802386d
 8023830:	0802386d 	.word	0x0802386d
 8023834:	0802386d 	.word	0x0802386d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8023838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802383c:	3308      	adds	r3, #8
 802383e:	2101      	movs	r1, #1
 8023840:	4618      	mov	r0, r3
 8023842:	f000 fc97 	bl	8024174 <RCCEx_PLL2_Config>
 8023846:	4603      	mov	r3, r0
 8023848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 802384c:	e00f      	b.n	802386e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 802384e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023852:	3328      	adds	r3, #40	@ 0x28
 8023854:	2101      	movs	r1, #1
 8023856:	4618      	mov	r0, r3
 8023858:	f000 fd3e 	bl	80242d8 <RCCEx_PLL3_Config>
 802385c:	4603      	mov	r3, r0
 802385e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8023862:	e004      	b.n	802386e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023864:	2301      	movs	r3, #1
 8023866:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 802386a:	e000      	b.n	802386e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 802386c:	bf00      	nop
    }

    if (ret == HAL_OK)
 802386e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023872:	2b00      	cmp	r3, #0
 8023874:	d10a      	bne.n	802388c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8023876:	4b96      	ldr	r3, [pc, #600]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802387a:	f023 0107 	bic.w	r1, r3, #7
 802387e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023884:	4a92      	ldr	r2, [pc, #584]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023886:	430b      	orrs	r3, r1
 8023888:	6553      	str	r3, [r2, #84]	@ 0x54
 802388a:	e003      	b.n	8023894 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 802388c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023890:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8023894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023898:	e9d3 2300 	ldrd	r2, r3, [r3]
 802389c:	f002 0304 	and.w	r3, r2, #4
 80238a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80238a4:	2300      	movs	r3, #0
 80238a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80238aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80238ae:	460b      	mov	r3, r1
 80238b0:	4313      	orrs	r3, r2
 80238b2:	d044      	beq.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80238b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80238b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80238bc:	2b05      	cmp	r3, #5
 80238be:	d825      	bhi.n	802390c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80238c0:	a201      	add	r2, pc, #4	@ (adr r2, 80238c8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80238c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80238c6:	bf00      	nop
 80238c8:	08023915 	.word	0x08023915
 80238cc:	080238e1 	.word	0x080238e1
 80238d0:	080238f7 	.word	0x080238f7
 80238d4:	08023915 	.word	0x08023915
 80238d8:	08023915 	.word	0x08023915
 80238dc:	08023915 	.word	0x08023915
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80238e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80238e4:	3308      	adds	r3, #8
 80238e6:	2101      	movs	r1, #1
 80238e8:	4618      	mov	r0, r3
 80238ea:	f000 fc43 	bl	8024174 <RCCEx_PLL2_Config>
 80238ee:	4603      	mov	r3, r0
 80238f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80238f4:	e00f      	b.n	8023916 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80238f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80238fa:	3328      	adds	r3, #40	@ 0x28
 80238fc:	2101      	movs	r1, #1
 80238fe:	4618      	mov	r0, r3
 8023900:	f000 fcea 	bl	80242d8 <RCCEx_PLL3_Config>
 8023904:	4603      	mov	r3, r0
 8023906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 802390a:	e004      	b.n	8023916 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 802390c:	2301      	movs	r3, #1
 802390e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023912:	e000      	b.n	8023916 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8023914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023916:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802391a:	2b00      	cmp	r3, #0
 802391c:	d10b      	bne.n	8023936 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 802391e:	4b6c      	ldr	r3, [pc, #432]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023922:	f023 0107 	bic.w	r1, r3, #7
 8023926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 802392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802392e:	4a68      	ldr	r2, [pc, #416]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023930:	430b      	orrs	r3, r1
 8023932:	6593      	str	r3, [r2, #88]	@ 0x58
 8023934:	e003      	b.n	802393e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023936:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 802393a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 802393e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023946:	f002 0320 	and.w	r3, r2, #32
 802394a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 802394e:	2300      	movs	r3, #0
 8023950:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8023954:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8023958:	460b      	mov	r3, r1
 802395a:	4313      	orrs	r3, r2
 802395c:	d055      	beq.n	8023a0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 802395e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8023966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802396a:	d033      	beq.n	80239d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 802396c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8023970:	d82c      	bhi.n	80239cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8023972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8023976:	d02f      	beq.n	80239d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8023978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802397c:	d826      	bhi.n	80239cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 802397e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8023982:	d02b      	beq.n	80239dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8023984:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8023988:	d820      	bhi.n	80239cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 802398a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 802398e:	d012      	beq.n	80239b6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8023990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8023994:	d81a      	bhi.n	80239cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8023996:	2b00      	cmp	r3, #0
 8023998:	d022      	beq.n	80239e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 802399a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802399e:	d115      	bne.n	80239cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80239a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80239a4:	3308      	adds	r3, #8
 80239a6:	2100      	movs	r1, #0
 80239a8:	4618      	mov	r0, r3
 80239aa:	f000 fbe3 	bl	8024174 <RCCEx_PLL2_Config>
 80239ae:	4603      	mov	r3, r0
 80239b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80239b4:	e015      	b.n	80239e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80239b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80239ba:	3328      	adds	r3, #40	@ 0x28
 80239bc:	2102      	movs	r1, #2
 80239be:	4618      	mov	r0, r3
 80239c0:	f000 fc8a 	bl	80242d8 <RCCEx_PLL3_Config>
 80239c4:	4603      	mov	r3, r0
 80239c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80239ca:	e00a      	b.n	80239e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80239cc:	2301      	movs	r3, #1
 80239ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80239d2:	e006      	b.n	80239e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80239d4:	bf00      	nop
 80239d6:	e004      	b.n	80239e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80239d8:	bf00      	nop
 80239da:	e002      	b.n	80239e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80239dc:	bf00      	nop
 80239de:	e000      	b.n	80239e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80239e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80239e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80239e6:	2b00      	cmp	r3, #0
 80239e8:	d10b      	bne.n	8023a02 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80239ea:	4b39      	ldr	r3, [pc, #228]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80239ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80239ee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80239f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80239f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80239fa:	4a35      	ldr	r2, [pc, #212]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80239fc:	430b      	orrs	r3, r1
 80239fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8023a00:	e003      	b.n	8023a0a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023a02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023a06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8023a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a12:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8023a16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8023a1a:	2300      	movs	r3, #0
 8023a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8023a20:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8023a24:	460b      	mov	r3, r1
 8023a26:	4313      	orrs	r3, r2
 8023a28:	d058      	beq.n	8023adc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8023a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8023a32:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8023a36:	d033      	beq.n	8023aa0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8023a38:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8023a3c:	d82c      	bhi.n	8023a98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8023a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023a42:	d02f      	beq.n	8023aa4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8023a44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023a48:	d826      	bhi.n	8023a98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8023a4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8023a4e:	d02b      	beq.n	8023aa8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8023a50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8023a54:	d820      	bhi.n	8023a98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8023a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8023a5a:	d012      	beq.n	8023a82 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8023a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8023a60:	d81a      	bhi.n	8023a98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8023a62:	2b00      	cmp	r3, #0
 8023a64:	d022      	beq.n	8023aac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8023a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8023a6a:	d115      	bne.n	8023a98 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a70:	3308      	adds	r3, #8
 8023a72:	2100      	movs	r1, #0
 8023a74:	4618      	mov	r0, r3
 8023a76:	f000 fb7d 	bl	8024174 <RCCEx_PLL2_Config>
 8023a7a:	4603      	mov	r3, r0
 8023a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8023a80:	e015      	b.n	8023aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8023a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023a86:	3328      	adds	r3, #40	@ 0x28
 8023a88:	2102      	movs	r1, #2
 8023a8a:	4618      	mov	r0, r3
 8023a8c:	f000 fc24 	bl	80242d8 <RCCEx_PLL3_Config>
 8023a90:	4603      	mov	r3, r0
 8023a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8023a96:	e00a      	b.n	8023aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023a98:	2301      	movs	r3, #1
 8023a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023a9e:	e006      	b.n	8023aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8023aa0:	bf00      	nop
 8023aa2:	e004      	b.n	8023aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8023aa4:	bf00      	nop
 8023aa6:	e002      	b.n	8023aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8023aa8:	bf00      	nop
 8023aaa:	e000      	b.n	8023aae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8023aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023aae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ab2:	2b00      	cmp	r3, #0
 8023ab4:	d10e      	bne.n	8023ad4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8023ab6:	4b06      	ldr	r3, [pc, #24]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023aba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8023abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8023ac6:	4a02      	ldr	r2, [pc, #8]	@ (8023ad0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8023ac8:	430b      	orrs	r3, r1
 8023aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8023acc:	e006      	b.n	8023adc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8023ace:	bf00      	nop
 8023ad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023ad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ad8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8023adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ae4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8023ae8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8023aec:	2300      	movs	r3, #0
 8023aee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8023af2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8023af6:	460b      	mov	r3, r1
 8023af8:	4313      	orrs	r3, r2
 8023afa:	d055      	beq.n	8023ba8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8023afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8023b04:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8023b08:	d033      	beq.n	8023b72 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8023b0a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8023b0e:	d82c      	bhi.n	8023b6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8023b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023b14:	d02f      	beq.n	8023b76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8023b16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023b1a:	d826      	bhi.n	8023b6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8023b1c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8023b20:	d02b      	beq.n	8023b7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8023b22:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8023b26:	d820      	bhi.n	8023b6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8023b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023b2c:	d012      	beq.n	8023b54 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8023b2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8023b32:	d81a      	bhi.n	8023b6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8023b34:	2b00      	cmp	r3, #0
 8023b36:	d022      	beq.n	8023b7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8023b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8023b3c:	d115      	bne.n	8023b6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b42:	3308      	adds	r3, #8
 8023b44:	2100      	movs	r1, #0
 8023b46:	4618      	mov	r0, r3
 8023b48:	f000 fb14 	bl	8024174 <RCCEx_PLL2_Config>
 8023b4c:	4603      	mov	r3, r0
 8023b4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8023b52:	e015      	b.n	8023b80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8023b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b58:	3328      	adds	r3, #40	@ 0x28
 8023b5a:	2102      	movs	r1, #2
 8023b5c:	4618      	mov	r0, r3
 8023b5e:	f000 fbbb 	bl	80242d8 <RCCEx_PLL3_Config>
 8023b62:	4603      	mov	r3, r0
 8023b64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8023b68:	e00a      	b.n	8023b80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023b6a:	2301      	movs	r3, #1
 8023b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023b70:	e006      	b.n	8023b80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023b72:	bf00      	nop
 8023b74:	e004      	b.n	8023b80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023b76:	bf00      	nop
 8023b78:	e002      	b.n	8023b80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023b7a:	bf00      	nop
 8023b7c:	e000      	b.n	8023b80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8023b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023b84:	2b00      	cmp	r3, #0
 8023b86:	d10b      	bne.n	8023ba0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8023b88:	4ba0      	ldr	r3, [pc, #640]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023b8c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8023b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8023b98:	4a9c      	ldr	r2, [pc, #624]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023b9a:	430b      	orrs	r3, r1
 8023b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8023b9e:	e003      	b.n	8023ba8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ba4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8023ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bb0:	f002 0308 	and.w	r3, r2, #8
 8023bb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8023bb8:	2300      	movs	r3, #0
 8023bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8023bbe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8023bc2:	460b      	mov	r3, r1
 8023bc4:	4313      	orrs	r3, r2
 8023bc6:	d01e      	beq.n	8023c06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8023bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8023bd4:	d10c      	bne.n	8023bf0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8023bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023bda:	3328      	adds	r3, #40	@ 0x28
 8023bdc:	2102      	movs	r1, #2
 8023bde:	4618      	mov	r0, r3
 8023be0:	f000 fb7a 	bl	80242d8 <RCCEx_PLL3_Config>
 8023be4:	4603      	mov	r3, r0
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d002      	beq.n	8023bf0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8023bea:	2301      	movs	r3, #1
 8023bec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8023bf0:	4b86      	ldr	r3, [pc, #536]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023bf4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8023bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023c00:	4a82      	ldr	r2, [pc, #520]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c02:	430b      	orrs	r3, r1
 8023c04:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8023c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c0e:	f002 0310 	and.w	r3, r2, #16
 8023c12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8023c16:	2300      	movs	r3, #0
 8023c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8023c1c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8023c20:	460b      	mov	r3, r1
 8023c22:	4313      	orrs	r3, r2
 8023c24:	d01e      	beq.n	8023c64 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8023c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8023c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023c32:	d10c      	bne.n	8023c4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8023c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c38:	3328      	adds	r3, #40	@ 0x28
 8023c3a:	2102      	movs	r1, #2
 8023c3c:	4618      	mov	r0, r3
 8023c3e:	f000 fb4b 	bl	80242d8 <RCCEx_PLL3_Config>
 8023c42:	4603      	mov	r3, r0
 8023c44:	2b00      	cmp	r3, #0
 8023c46:	d002      	beq.n	8023c4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8023c48:	2301      	movs	r3, #1
 8023c4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8023c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023c52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8023c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8023c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023c60:	430b      	orrs	r3, r1
 8023c62:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8023c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c6c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8023c70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8023c72:	2300      	movs	r3, #0
 8023c74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8023c76:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8023c7a:	460b      	mov	r3, r1
 8023c7c:	4313      	orrs	r3, r2
 8023c7e:	d03e      	beq.n	8023cfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8023c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023c84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8023c88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8023c8c:	d022      	beq.n	8023cd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8023c8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8023c92:	d81b      	bhi.n	8023ccc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8023c94:	2b00      	cmp	r3, #0
 8023c96:	d003      	beq.n	8023ca0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8023c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023c9c:	d00b      	beq.n	8023cb6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8023c9e:	e015      	b.n	8023ccc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ca4:	3308      	adds	r3, #8
 8023ca6:	2100      	movs	r1, #0
 8023ca8:	4618      	mov	r0, r3
 8023caa:	f000 fa63 	bl	8024174 <RCCEx_PLL2_Config>
 8023cae:	4603      	mov	r3, r0
 8023cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8023cb4:	e00f      	b.n	8023cd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8023cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023cba:	3328      	adds	r3, #40	@ 0x28
 8023cbc:	2102      	movs	r1, #2
 8023cbe:	4618      	mov	r0, r3
 8023cc0:	f000 fb0a 	bl	80242d8 <RCCEx_PLL3_Config>
 8023cc4:	4603      	mov	r3, r0
 8023cc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8023cca:	e004      	b.n	8023cd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023ccc:	2301      	movs	r3, #1
 8023cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023cd2:	e000      	b.n	8023cd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8023cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023cda:	2b00      	cmp	r3, #0
 8023cdc:	d10b      	bne.n	8023cf6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8023cde:	4b4b      	ldr	r3, [pc, #300]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8023ce2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8023ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023cea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8023cee:	4a47      	ldr	r2, [pc, #284]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023cf0:	430b      	orrs	r3, r1
 8023cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8023cf4:	e003      	b.n	8023cfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023cf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023cfa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8023cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d06:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8023d0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8023d0c:	2300      	movs	r3, #0
 8023d0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8023d10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8023d14:	460b      	mov	r3, r1
 8023d16:	4313      	orrs	r3, r2
 8023d18:	d03b      	beq.n	8023d92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8023d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8023d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8023d26:	d01f      	beq.n	8023d68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8023d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8023d2c:	d818      	bhi.n	8023d60 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8023d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8023d32:	d003      	beq.n	8023d3c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8023d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8023d38:	d007      	beq.n	8023d4a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8023d3a:	e011      	b.n	8023d60 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023d3c:	4b33      	ldr	r3, [pc, #204]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023d40:	4a32      	ldr	r2, [pc, #200]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8023d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8023d48:	e00f      	b.n	8023d6a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8023d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d4e:	3328      	adds	r3, #40	@ 0x28
 8023d50:	2101      	movs	r1, #1
 8023d52:	4618      	mov	r0, r3
 8023d54:	f000 fac0 	bl	80242d8 <RCCEx_PLL3_Config>
 8023d58:	4603      	mov	r3, r0
 8023d5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8023d5e:	e004      	b.n	8023d6a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023d60:	2301      	movs	r3, #1
 8023d62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023d66:	e000      	b.n	8023d6a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8023d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023d6e:	2b00      	cmp	r3, #0
 8023d70:	d10b      	bne.n	8023d8a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8023d72:	4b26      	ldr	r3, [pc, #152]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023d76:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8023d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8023d82:	4a22      	ldr	r2, [pc, #136]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023d84:	430b      	orrs	r3, r1
 8023d86:	6553      	str	r3, [r2, #84]	@ 0x54
 8023d88:	e003      	b.n	8023d92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023d8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8023d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d9a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8023d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8023da0:	2300      	movs	r3, #0
 8023da2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8023da4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8023da8:	460b      	mov	r3, r1
 8023daa:	4313      	orrs	r3, r2
 8023dac:	d034      	beq.n	8023e18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8023dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023db2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	d003      	beq.n	8023dc0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8023db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023dbc:	d007      	beq.n	8023dce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8023dbe:	e011      	b.n	8023de4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023dc0:	4b12      	ldr	r3, [pc, #72]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023dc4:	4a11      	ldr	r2, [pc, #68]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8023dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8023dcc:	e00e      	b.n	8023dec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8023dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023dd2:	3308      	adds	r3, #8
 8023dd4:	2102      	movs	r1, #2
 8023dd6:	4618      	mov	r0, r3
 8023dd8:	f000 f9cc 	bl	8024174 <RCCEx_PLL2_Config>
 8023ddc:	4603      	mov	r3, r0
 8023dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8023de2:	e003      	b.n	8023dec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8023de4:	2301      	movs	r3, #1
 8023de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	d10d      	bne.n	8023e10 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8023df4:	4b05      	ldr	r3, [pc, #20]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023df8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8023dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023e02:	4a02      	ldr	r2, [pc, #8]	@ (8023e0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8023e04:	430b      	orrs	r3, r1
 8023e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8023e08:	e006      	b.n	8023e18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8023e0a:	bf00      	nop
 8023e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023e14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8023e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e20:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8023e24:	663b      	str	r3, [r7, #96]	@ 0x60
 8023e26:	2300      	movs	r3, #0
 8023e28:	667b      	str	r3, [r7, #100]	@ 0x64
 8023e2a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8023e2e:	460b      	mov	r3, r1
 8023e30:	4313      	orrs	r3, r2
 8023e32:	d00c      	beq.n	8023e4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8023e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e38:	3328      	adds	r3, #40	@ 0x28
 8023e3a:	2102      	movs	r1, #2
 8023e3c:	4618      	mov	r0, r3
 8023e3e:	f000 fa4b 	bl	80242d8 <RCCEx_PLL3_Config>
 8023e42:	4603      	mov	r3, r0
 8023e44:	2b00      	cmp	r3, #0
 8023e46:	d002      	beq.n	8023e4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8023e48:	2301      	movs	r3, #1
 8023e4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8023e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e56:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8023e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8023e5c:	2300      	movs	r3, #0
 8023e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8023e60:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8023e64:	460b      	mov	r3, r1
 8023e66:	4313      	orrs	r3, r2
 8023e68:	d036      	beq.n	8023ed8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8023e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023e70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8023e74:	d018      	beq.n	8023ea8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8023e76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8023e7a:	d811      	bhi.n	8023ea0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8023e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023e80:	d014      	beq.n	8023eac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8023e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023e86:	d80b      	bhi.n	8023ea0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8023e88:	2b00      	cmp	r3, #0
 8023e8a:	d011      	beq.n	8023eb0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8023e8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8023e90:	d106      	bne.n	8023ea0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8023e92:	4bb7      	ldr	r3, [pc, #732]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023e96:	4ab6      	ldr	r2, [pc, #728]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8023e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8023e9e:	e008      	b.n	8023eb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8023ea0:	2301      	movs	r3, #1
 8023ea2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8023ea6:	e004      	b.n	8023eb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8023ea8:	bf00      	nop
 8023eaa:	e002      	b.n	8023eb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8023eac:	bf00      	nop
 8023eae:	e000      	b.n	8023eb2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8023eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8023eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023eb6:	2b00      	cmp	r3, #0
 8023eb8:	d10a      	bne.n	8023ed0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8023eba:	4bad      	ldr	r3, [pc, #692]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023ebe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8023ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ec6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8023ec8:	4aa9      	ldr	r2, [pc, #676]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023eca:	430b      	orrs	r3, r1
 8023ecc:	6553      	str	r3, [r2, #84]	@ 0x54
 8023ece:	e003      	b.n	8023ed8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8023ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8023ed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8023ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ee0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8023ee4:	653b      	str	r3, [r7, #80]	@ 0x50
 8023ee6:	2300      	movs	r3, #0
 8023ee8:	657b      	str	r3, [r7, #84]	@ 0x54
 8023eea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8023eee:	460b      	mov	r3, r1
 8023ef0:	4313      	orrs	r3, r2
 8023ef2:	d009      	beq.n	8023f08 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8023ef4:	4b9e      	ldr	r3, [pc, #632]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023ef6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023ef8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8023efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8023f02:	4a9b      	ldr	r2, [pc, #620]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f04:	430b      	orrs	r3, r1
 8023f06:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8023f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f10:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8023f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023f16:	2300      	movs	r3, #0
 8023f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023f1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8023f1e:	460b      	mov	r3, r1
 8023f20:	4313      	orrs	r3, r2
 8023f22:	d009      	beq.n	8023f38 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8023f24:	4b92      	ldr	r3, [pc, #584]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8023f28:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8023f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8023f32:	4a8f      	ldr	r2, [pc, #572]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f34:	430b      	orrs	r3, r1
 8023f36:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8023f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f40:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8023f44:	643b      	str	r3, [r7, #64]	@ 0x40
 8023f46:	2300      	movs	r3, #0
 8023f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8023f4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8023f4e:	460b      	mov	r3, r1
 8023f50:	4313      	orrs	r3, r2
 8023f52:	d00e      	beq.n	8023f72 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8023f54:	4b86      	ldr	r3, [pc, #536]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f56:	691b      	ldr	r3, [r3, #16]
 8023f58:	4a85      	ldr	r2, [pc, #532]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8023f5e:	6113      	str	r3, [r2, #16]
 8023f60:	4b83      	ldr	r3, [pc, #524]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f62:	6919      	ldr	r1, [r3, #16]
 8023f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8023f6c:	4a80      	ldr	r2, [pc, #512]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f6e:	430b      	orrs	r3, r1
 8023f70:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8023f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f7a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8023f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8023f80:	2300      	movs	r3, #0
 8023f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8023f84:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8023f88:	460b      	mov	r3, r1
 8023f8a:	4313      	orrs	r3, r2
 8023f8c:	d009      	beq.n	8023fa2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8023f8e:	4b78      	ldr	r3, [pc, #480]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8023f92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8023f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023f9c:	4a74      	ldr	r2, [pc, #464]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023f9e:	430b      	orrs	r3, r1
 8023fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8023fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023faa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8023fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8023fb0:	2300      	movs	r3, #0
 8023fb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8023fb4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8023fb8:	460b      	mov	r3, r1
 8023fba:	4313      	orrs	r3, r2
 8023fbc:	d00a      	beq.n	8023fd4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8023fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8023fc2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8023fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023fce:	4a68      	ldr	r2, [pc, #416]	@ (8024170 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8023fd0:	430b      	orrs	r3, r1
 8023fd2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8023fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fdc:	2100      	movs	r1, #0
 8023fde:	62b9      	str	r1, [r7, #40]	@ 0x28
 8023fe0:	f003 0301 	and.w	r3, r3, #1
 8023fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023fe6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8023fea:	460b      	mov	r3, r1
 8023fec:	4313      	orrs	r3, r2
 8023fee:	d011      	beq.n	8024014 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8023ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8023ff4:	3308      	adds	r3, #8
 8023ff6:	2100      	movs	r1, #0
 8023ff8:	4618      	mov	r0, r3
 8023ffa:	f000 f8bb 	bl	8024174 <RCCEx_PLL2_Config>
 8023ffe:	4603      	mov	r3, r0
 8024000:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8024004:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024008:	2b00      	cmp	r3, #0
 802400a:	d003      	beq.n	8024014 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802400c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8024014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024018:	e9d3 2300 	ldrd	r2, r3, [r3]
 802401c:	2100      	movs	r1, #0
 802401e:	6239      	str	r1, [r7, #32]
 8024020:	f003 0302 	and.w	r3, r3, #2
 8024024:	627b      	str	r3, [r7, #36]	@ 0x24
 8024026:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 802402a:	460b      	mov	r3, r1
 802402c:	4313      	orrs	r3, r2
 802402e:	d011      	beq.n	8024054 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8024030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024034:	3308      	adds	r3, #8
 8024036:	2101      	movs	r1, #1
 8024038:	4618      	mov	r0, r3
 802403a:	f000 f89b 	bl	8024174 <RCCEx_PLL2_Config>
 802403e:	4603      	mov	r3, r0
 8024040:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8024044:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024048:	2b00      	cmp	r3, #0
 802404a:	d003      	beq.n	8024054 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802404c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8024054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024058:	e9d3 2300 	ldrd	r2, r3, [r3]
 802405c:	2100      	movs	r1, #0
 802405e:	61b9      	str	r1, [r7, #24]
 8024060:	f003 0304 	and.w	r3, r3, #4
 8024064:	61fb      	str	r3, [r7, #28]
 8024066:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 802406a:	460b      	mov	r3, r1
 802406c:	4313      	orrs	r3, r2
 802406e:	d011      	beq.n	8024094 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8024070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024074:	3308      	adds	r3, #8
 8024076:	2102      	movs	r1, #2
 8024078:	4618      	mov	r0, r3
 802407a:	f000 f87b 	bl	8024174 <RCCEx_PLL2_Config>
 802407e:	4603      	mov	r3, r0
 8024080:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8024084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024088:	2b00      	cmp	r3, #0
 802408a:	d003      	beq.n	8024094 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802408c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024090:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8024094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024098:	e9d3 2300 	ldrd	r2, r3, [r3]
 802409c:	2100      	movs	r1, #0
 802409e:	6139      	str	r1, [r7, #16]
 80240a0:	f003 0308 	and.w	r3, r3, #8
 80240a4:	617b      	str	r3, [r7, #20]
 80240a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80240aa:	460b      	mov	r3, r1
 80240ac:	4313      	orrs	r3, r2
 80240ae:	d011      	beq.n	80240d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80240b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80240b4:	3328      	adds	r3, #40	@ 0x28
 80240b6:	2100      	movs	r1, #0
 80240b8:	4618      	mov	r0, r3
 80240ba:	f000 f90d 	bl	80242d8 <RCCEx_PLL3_Config>
 80240be:	4603      	mov	r3, r0
 80240c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80240c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80240c8:	2b00      	cmp	r3, #0
 80240ca:	d003      	beq.n	80240d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80240cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80240d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80240d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80240d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240dc:	2100      	movs	r1, #0
 80240de:	60b9      	str	r1, [r7, #8]
 80240e0:	f003 0310 	and.w	r3, r3, #16
 80240e4:	60fb      	str	r3, [r7, #12]
 80240e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80240ea:	460b      	mov	r3, r1
 80240ec:	4313      	orrs	r3, r2
 80240ee:	d011      	beq.n	8024114 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80240f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80240f4:	3328      	adds	r3, #40	@ 0x28
 80240f6:	2101      	movs	r1, #1
 80240f8:	4618      	mov	r0, r3
 80240fa:	f000 f8ed 	bl	80242d8 <RCCEx_PLL3_Config>
 80240fe:	4603      	mov	r3, r0
 8024100:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8024104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024108:	2b00      	cmp	r3, #0
 802410a:	d003      	beq.n	8024114 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802410c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024110:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8024114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024118:	e9d3 2300 	ldrd	r2, r3, [r3]
 802411c:	2100      	movs	r1, #0
 802411e:	6039      	str	r1, [r7, #0]
 8024120:	f003 0320 	and.w	r3, r3, #32
 8024124:	607b      	str	r3, [r7, #4]
 8024126:	e9d7 1200 	ldrd	r1, r2, [r7]
 802412a:	460b      	mov	r3, r1
 802412c:	4313      	orrs	r3, r2
 802412e:	d011      	beq.n	8024154 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8024130:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8024134:	3328      	adds	r3, #40	@ 0x28
 8024136:	2102      	movs	r1, #2
 8024138:	4618      	mov	r0, r3
 802413a:	f000 f8cd 	bl	80242d8 <RCCEx_PLL3_Config>
 802413e:	4603      	mov	r3, r0
 8024140:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8024144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024148:	2b00      	cmp	r3, #0
 802414a:	d003      	beq.n	8024154 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 802414c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8024150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8024154:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8024158:	2b00      	cmp	r3, #0
 802415a:	d101      	bne.n	8024160 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 802415c:	2300      	movs	r3, #0
 802415e:	e000      	b.n	8024162 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8024160:	2301      	movs	r3, #1
}
 8024162:	4618      	mov	r0, r3
 8024164:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8024168:	46bd      	mov	sp, r7
 802416a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 802416e:	bf00      	nop
 8024170:	58024400 	.word	0x58024400

08024174 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8024174:	b580      	push	{r7, lr}
 8024176:	b084      	sub	sp, #16
 8024178:	af00      	add	r7, sp, #0
 802417a:	6078      	str	r0, [r7, #4]
 802417c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 802417e:	2300      	movs	r3, #0
 8024180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8024182:	4b53      	ldr	r3, [pc, #332]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024186:	f003 0303 	and.w	r3, r3, #3
 802418a:	2b03      	cmp	r3, #3
 802418c:	d101      	bne.n	8024192 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 802418e:	2301      	movs	r3, #1
 8024190:	e099      	b.n	80242c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8024192:	4b4f      	ldr	r3, [pc, #316]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024194:	681b      	ldr	r3, [r3, #0]
 8024196:	4a4e      	ldr	r2, [pc, #312]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024198:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 802419c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802419e:	f7fd f98b 	bl	80214b8 <HAL_GetTick>
 80241a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80241a4:	e008      	b.n	80241b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80241a6:	f7fd f987 	bl	80214b8 <HAL_GetTick>
 80241aa:	4602      	mov	r2, r0
 80241ac:	68bb      	ldr	r3, [r7, #8]
 80241ae:	1ad3      	subs	r3, r2, r3
 80241b0:	2b02      	cmp	r3, #2
 80241b2:	d901      	bls.n	80241b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80241b4:	2303      	movs	r3, #3
 80241b6:	e086      	b.n	80242c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80241b8:	4b45      	ldr	r3, [pc, #276]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 80241ba:	681b      	ldr	r3, [r3, #0]
 80241bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80241c0:	2b00      	cmp	r3, #0
 80241c2:	d1f0      	bne.n	80241a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80241c4:	4b42      	ldr	r3, [pc, #264]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 80241c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80241c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80241cc:	687b      	ldr	r3, [r7, #4]
 80241ce:	681b      	ldr	r3, [r3, #0]
 80241d0:	031b      	lsls	r3, r3, #12
 80241d2:	493f      	ldr	r1, [pc, #252]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 80241d4:	4313      	orrs	r3, r2
 80241d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80241d8:	687b      	ldr	r3, [r7, #4]
 80241da:	685b      	ldr	r3, [r3, #4]
 80241dc:	3b01      	subs	r3, #1
 80241de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	689b      	ldr	r3, [r3, #8]
 80241e6:	3b01      	subs	r3, #1
 80241e8:	025b      	lsls	r3, r3, #9
 80241ea:	b29b      	uxth	r3, r3
 80241ec:	431a      	orrs	r2, r3
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	68db      	ldr	r3, [r3, #12]
 80241f2:	3b01      	subs	r3, #1
 80241f4:	041b      	lsls	r3, r3, #16
 80241f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80241fa:	431a      	orrs	r2, r3
 80241fc:	687b      	ldr	r3, [r7, #4]
 80241fe:	691b      	ldr	r3, [r3, #16]
 8024200:	3b01      	subs	r3, #1
 8024202:	061b      	lsls	r3, r3, #24
 8024204:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8024208:	4931      	ldr	r1, [pc, #196]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802420a:	4313      	orrs	r3, r2
 802420c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 802420e:	4b30      	ldr	r3, [pc, #192]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8024216:	687b      	ldr	r3, [r7, #4]
 8024218:	695b      	ldr	r3, [r3, #20]
 802421a:	492d      	ldr	r1, [pc, #180]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802421c:	4313      	orrs	r3, r2
 802421e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8024220:	4b2b      	ldr	r3, [pc, #172]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024224:	f023 0220 	bic.w	r2, r3, #32
 8024228:	687b      	ldr	r3, [r7, #4]
 802422a:	699b      	ldr	r3, [r3, #24]
 802422c:	4928      	ldr	r1, [pc, #160]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802422e:	4313      	orrs	r3, r2
 8024230:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8024232:	4b27      	ldr	r3, [pc, #156]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024236:	4a26      	ldr	r2, [pc, #152]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024238:	f023 0310 	bic.w	r3, r3, #16
 802423c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 802423e:	4b24      	ldr	r3, [pc, #144]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024242:	4b24      	ldr	r3, [pc, #144]	@ (80242d4 <RCCEx_PLL2_Config+0x160>)
 8024244:	4013      	ands	r3, r2
 8024246:	687a      	ldr	r2, [r7, #4]
 8024248:	69d2      	ldr	r2, [r2, #28]
 802424a:	00d2      	lsls	r2, r2, #3
 802424c:	4920      	ldr	r1, [pc, #128]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802424e:	4313      	orrs	r3, r2
 8024250:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8024252:	4b1f      	ldr	r3, [pc, #124]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024256:	4a1e      	ldr	r2, [pc, #120]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024258:	f043 0310 	orr.w	r3, r3, #16
 802425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 802425e:	683b      	ldr	r3, [r7, #0]
 8024260:	2b00      	cmp	r3, #0
 8024262:	d106      	bne.n	8024272 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8024264:	4b1a      	ldr	r3, [pc, #104]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024268:	4a19      	ldr	r2, [pc, #100]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802426a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 802426e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8024270:	e00f      	b.n	8024292 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8024272:	683b      	ldr	r3, [r7, #0]
 8024274:	2b01      	cmp	r3, #1
 8024276:	d106      	bne.n	8024286 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8024278:	4b15      	ldr	r3, [pc, #84]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802427c:	4a14      	ldr	r2, [pc, #80]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802427e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8024282:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8024284:	e005      	b.n	8024292 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8024286:	4b12      	ldr	r3, [pc, #72]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802428a:	4a11      	ldr	r2, [pc, #68]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 802428c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8024290:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8024292:	4b0f      	ldr	r3, [pc, #60]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024294:	681b      	ldr	r3, [r3, #0]
 8024296:	4a0e      	ldr	r2, [pc, #56]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 8024298:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 802429c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 802429e:	f7fd f90b 	bl	80214b8 <HAL_GetTick>
 80242a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80242a4:	e008      	b.n	80242b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80242a6:	f7fd f907 	bl	80214b8 <HAL_GetTick>
 80242aa:	4602      	mov	r2, r0
 80242ac:	68bb      	ldr	r3, [r7, #8]
 80242ae:	1ad3      	subs	r3, r2, r3
 80242b0:	2b02      	cmp	r3, #2
 80242b2:	d901      	bls.n	80242b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80242b4:	2303      	movs	r3, #3
 80242b6:	e006      	b.n	80242c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80242b8:	4b05      	ldr	r3, [pc, #20]	@ (80242d0 <RCCEx_PLL2_Config+0x15c>)
 80242ba:	681b      	ldr	r3, [r3, #0]
 80242bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80242c0:	2b00      	cmp	r3, #0
 80242c2:	d0f0      	beq.n	80242a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80242c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80242c6:	4618      	mov	r0, r3
 80242c8:	3710      	adds	r7, #16
 80242ca:	46bd      	mov	sp, r7
 80242cc:	bd80      	pop	{r7, pc}
 80242ce:	bf00      	nop
 80242d0:	58024400 	.word	0x58024400
 80242d4:	ffff0007 	.word	0xffff0007

080242d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80242d8:	b580      	push	{r7, lr}
 80242da:	b084      	sub	sp, #16
 80242dc:	af00      	add	r7, sp, #0
 80242de:	6078      	str	r0, [r7, #4]
 80242e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80242e2:	2300      	movs	r3, #0
 80242e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80242e6:	4b53      	ldr	r3, [pc, #332]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80242e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80242ea:	f003 0303 	and.w	r3, r3, #3
 80242ee:	2b03      	cmp	r3, #3
 80242f0:	d101      	bne.n	80242f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80242f2:	2301      	movs	r3, #1
 80242f4:	e099      	b.n	802442a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80242f6:	4b4f      	ldr	r3, [pc, #316]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	4a4e      	ldr	r2, [pc, #312]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80242fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8024300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8024302:	f7fd f8d9 	bl	80214b8 <HAL_GetTick>
 8024306:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8024308:	e008      	b.n	802431c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802430a:	f7fd f8d5 	bl	80214b8 <HAL_GetTick>
 802430e:	4602      	mov	r2, r0
 8024310:	68bb      	ldr	r3, [r7, #8]
 8024312:	1ad3      	subs	r3, r2, r3
 8024314:	2b02      	cmp	r3, #2
 8024316:	d901      	bls.n	802431c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8024318:	2303      	movs	r3, #3
 802431a:	e086      	b.n	802442a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 802431c:	4b45      	ldr	r3, [pc, #276]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 802431e:	681b      	ldr	r3, [r3, #0]
 8024320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8024324:	2b00      	cmp	r3, #0
 8024326:	d1f0      	bne.n	802430a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8024328:	4b42      	ldr	r3, [pc, #264]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 802432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802432c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8024330:	687b      	ldr	r3, [r7, #4]
 8024332:	681b      	ldr	r3, [r3, #0]
 8024334:	051b      	lsls	r3, r3, #20
 8024336:	493f      	ldr	r1, [pc, #252]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 8024338:	4313      	orrs	r3, r2
 802433a:	628b      	str	r3, [r1, #40]	@ 0x28
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	685b      	ldr	r3, [r3, #4]
 8024340:	3b01      	subs	r3, #1
 8024342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8024346:	687b      	ldr	r3, [r7, #4]
 8024348:	689b      	ldr	r3, [r3, #8]
 802434a:	3b01      	subs	r3, #1
 802434c:	025b      	lsls	r3, r3, #9
 802434e:	b29b      	uxth	r3, r3
 8024350:	431a      	orrs	r2, r3
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	68db      	ldr	r3, [r3, #12]
 8024356:	3b01      	subs	r3, #1
 8024358:	041b      	lsls	r3, r3, #16
 802435a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 802435e:	431a      	orrs	r2, r3
 8024360:	687b      	ldr	r3, [r7, #4]
 8024362:	691b      	ldr	r3, [r3, #16]
 8024364:	3b01      	subs	r3, #1
 8024366:	061b      	lsls	r3, r3, #24
 8024368:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 802436c:	4931      	ldr	r1, [pc, #196]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 802436e:	4313      	orrs	r3, r2
 8024370:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8024372:	4b30      	ldr	r3, [pc, #192]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 8024374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024376:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	695b      	ldr	r3, [r3, #20]
 802437e:	492d      	ldr	r1, [pc, #180]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 8024380:	4313      	orrs	r3, r2
 8024382:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8024384:	4b2b      	ldr	r3, [pc, #172]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 8024386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024388:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 802438c:	687b      	ldr	r3, [r7, #4]
 802438e:	699b      	ldr	r3, [r3, #24]
 8024390:	4928      	ldr	r1, [pc, #160]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 8024392:	4313      	orrs	r3, r2
 8024394:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8024396:	4b27      	ldr	r3, [pc, #156]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 8024398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802439a:	4a26      	ldr	r2, [pc, #152]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 802439c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80243a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80243a2:	4b24      	ldr	r3, [pc, #144]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80243a6:	4b24      	ldr	r3, [pc, #144]	@ (8024438 <RCCEx_PLL3_Config+0x160>)
 80243a8:	4013      	ands	r3, r2
 80243aa:	687a      	ldr	r2, [r7, #4]
 80243ac:	69d2      	ldr	r2, [r2, #28]
 80243ae:	00d2      	lsls	r2, r2, #3
 80243b0:	4920      	ldr	r1, [pc, #128]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243b2:	4313      	orrs	r3, r2
 80243b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80243b6:	4b1f      	ldr	r3, [pc, #124]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80243ba:	4a1e      	ldr	r2, [pc, #120]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80243c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80243c2:	683b      	ldr	r3, [r7, #0]
 80243c4:	2b00      	cmp	r3, #0
 80243c6:	d106      	bne.n	80243d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80243c8:	4b1a      	ldr	r3, [pc, #104]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80243cc:	4a19      	ldr	r2, [pc, #100]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80243d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80243d4:	e00f      	b.n	80243f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80243d6:	683b      	ldr	r3, [r7, #0]
 80243d8:	2b01      	cmp	r3, #1
 80243da:	d106      	bne.n	80243ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80243dc:	4b15      	ldr	r3, [pc, #84]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80243e0:	4a14      	ldr	r2, [pc, #80]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80243e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80243e8:	e005      	b.n	80243f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80243ea:	4b12      	ldr	r3, [pc, #72]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80243ee:	4a11      	ldr	r2, [pc, #68]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80243f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80243f6:	4b0f      	ldr	r3, [pc, #60]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243f8:	681b      	ldr	r3, [r3, #0]
 80243fa:	4a0e      	ldr	r2, [pc, #56]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 80243fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8024400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8024402:	f7fd f859 	bl	80214b8 <HAL_GetTick>
 8024406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8024408:	e008      	b.n	802441c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 802440a:	f7fd f855 	bl	80214b8 <HAL_GetTick>
 802440e:	4602      	mov	r2, r0
 8024410:	68bb      	ldr	r3, [r7, #8]
 8024412:	1ad3      	subs	r3, r2, r3
 8024414:	2b02      	cmp	r3, #2
 8024416:	d901      	bls.n	802441c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8024418:	2303      	movs	r3, #3
 802441a:	e006      	b.n	802442a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 802441c:	4b05      	ldr	r3, [pc, #20]	@ (8024434 <RCCEx_PLL3_Config+0x15c>)
 802441e:	681b      	ldr	r3, [r3, #0]
 8024420:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8024424:	2b00      	cmp	r3, #0
 8024426:	d0f0      	beq.n	802440a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8024428:	7bfb      	ldrb	r3, [r7, #15]
}
 802442a:	4618      	mov	r0, r3
 802442c:	3710      	adds	r7, #16
 802442e:	46bd      	mov	sp, r7
 8024430:	bd80      	pop	{r7, pc}
 8024432:	bf00      	nop
 8024434:	58024400 	.word	0x58024400
 8024438:	ffff0007 	.word	0xffff0007

0802443c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 802443c:	b580      	push	{r7, lr}
 802443e:	b084      	sub	sp, #16
 8024440:	af00      	add	r7, sp, #0
 8024442:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8024444:	687b      	ldr	r3, [r7, #4]
 8024446:	2b00      	cmp	r3, #0
 8024448:	d101      	bne.n	802444e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 802444a:	2301      	movs	r3, #1
 802444c:	e10f      	b.n	802466e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 802444e:	687b      	ldr	r3, [r7, #4]
 8024450:	2200      	movs	r2, #0
 8024452:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	681b      	ldr	r3, [r3, #0]
 8024458:	4a87      	ldr	r2, [pc, #540]	@ (8024678 <HAL_SPI_Init+0x23c>)
 802445a:	4293      	cmp	r3, r2
 802445c:	d00f      	beq.n	802447e <HAL_SPI_Init+0x42>
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	681b      	ldr	r3, [r3, #0]
 8024462:	4a86      	ldr	r2, [pc, #536]	@ (802467c <HAL_SPI_Init+0x240>)
 8024464:	4293      	cmp	r3, r2
 8024466:	d00a      	beq.n	802447e <HAL_SPI_Init+0x42>
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	681b      	ldr	r3, [r3, #0]
 802446c:	4a84      	ldr	r2, [pc, #528]	@ (8024680 <HAL_SPI_Init+0x244>)
 802446e:	4293      	cmp	r3, r2
 8024470:	d005      	beq.n	802447e <HAL_SPI_Init+0x42>
 8024472:	687b      	ldr	r3, [r7, #4]
 8024474:	68db      	ldr	r3, [r3, #12]
 8024476:	2b0f      	cmp	r3, #15
 8024478:	d901      	bls.n	802447e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 802447a:	2301      	movs	r3, #1
 802447c:	e0f7      	b.n	802466e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 802447e:	6878      	ldr	r0, [r7, #4]
 8024480:	f000 fef6 	bl	8025270 <SPI_GetPacketSize>
 8024484:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8024486:	687b      	ldr	r3, [r7, #4]
 8024488:	681b      	ldr	r3, [r3, #0]
 802448a:	4a7b      	ldr	r2, [pc, #492]	@ (8024678 <HAL_SPI_Init+0x23c>)
 802448c:	4293      	cmp	r3, r2
 802448e:	d00c      	beq.n	80244aa <HAL_SPI_Init+0x6e>
 8024490:	687b      	ldr	r3, [r7, #4]
 8024492:	681b      	ldr	r3, [r3, #0]
 8024494:	4a79      	ldr	r2, [pc, #484]	@ (802467c <HAL_SPI_Init+0x240>)
 8024496:	4293      	cmp	r3, r2
 8024498:	d007      	beq.n	80244aa <HAL_SPI_Init+0x6e>
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	681b      	ldr	r3, [r3, #0]
 802449e:	4a78      	ldr	r2, [pc, #480]	@ (8024680 <HAL_SPI_Init+0x244>)
 80244a0:	4293      	cmp	r3, r2
 80244a2:	d002      	beq.n	80244aa <HAL_SPI_Init+0x6e>
 80244a4:	68fb      	ldr	r3, [r7, #12]
 80244a6:	2b08      	cmp	r3, #8
 80244a8:	d811      	bhi.n	80244ce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80244aa:	687b      	ldr	r3, [r7, #4]
 80244ac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80244ae:	4a72      	ldr	r2, [pc, #456]	@ (8024678 <HAL_SPI_Init+0x23c>)
 80244b0:	4293      	cmp	r3, r2
 80244b2:	d009      	beq.n	80244c8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	681b      	ldr	r3, [r3, #0]
 80244b8:	4a70      	ldr	r2, [pc, #448]	@ (802467c <HAL_SPI_Init+0x240>)
 80244ba:	4293      	cmp	r3, r2
 80244bc:	d004      	beq.n	80244c8 <HAL_SPI_Init+0x8c>
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	681b      	ldr	r3, [r3, #0]
 80244c2:	4a6f      	ldr	r2, [pc, #444]	@ (8024680 <HAL_SPI_Init+0x244>)
 80244c4:	4293      	cmp	r3, r2
 80244c6:	d104      	bne.n	80244d2 <HAL_SPI_Init+0x96>
 80244c8:	68fb      	ldr	r3, [r7, #12]
 80244ca:	2b10      	cmp	r3, #16
 80244cc:	d901      	bls.n	80244d2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80244ce:	2301      	movs	r3, #1
 80244d0:	e0cd      	b.n	802466e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80244d2:	687b      	ldr	r3, [r7, #4]
 80244d4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80244d8:	b2db      	uxtb	r3, r3
 80244da:	2b00      	cmp	r3, #0
 80244dc:	d106      	bne.n	80244ec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80244de:	687b      	ldr	r3, [r7, #4]
 80244e0:	2200      	movs	r2, #0
 80244e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80244e6:	6878      	ldr	r0, [r7, #4]
 80244e8:	f7fc fd1e 	bl	8020f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	2202      	movs	r2, #2
 80244f0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80244f4:	687b      	ldr	r3, [r7, #4]
 80244f6:	681b      	ldr	r3, [r3, #0]
 80244f8:	681a      	ldr	r2, [r3, #0]
 80244fa:	687b      	ldr	r3, [r7, #4]
 80244fc:	681b      	ldr	r3, [r3, #0]
 80244fe:	f022 0201 	bic.w	r2, r2, #1
 8024502:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	681b      	ldr	r3, [r3, #0]
 8024508:	689b      	ldr	r3, [r3, #8]
 802450a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 802450e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8024510:	687b      	ldr	r3, [r7, #4]
 8024512:	699b      	ldr	r3, [r3, #24]
 8024514:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8024518:	d119      	bne.n	802454e <HAL_SPI_Init+0x112>
 802451a:	687b      	ldr	r3, [r7, #4]
 802451c:	685b      	ldr	r3, [r3, #4]
 802451e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8024522:	d103      	bne.n	802452c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8024528:	2b00      	cmp	r3, #0
 802452a:	d008      	beq.n	802453e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 802452c:	687b      	ldr	r3, [r7, #4]
 802452e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8024530:	2b00      	cmp	r3, #0
 8024532:	d10c      	bne.n	802454e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8024538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 802453c:	d107      	bne.n	802454e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 802453e:	687b      	ldr	r3, [r7, #4]
 8024540:	681b      	ldr	r3, [r3, #0]
 8024542:	681a      	ldr	r2, [r3, #0]
 8024544:	687b      	ldr	r3, [r7, #4]
 8024546:	681b      	ldr	r3, [r3, #0]
 8024548:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 802454c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 802454e:	687b      	ldr	r3, [r7, #4]
 8024550:	685b      	ldr	r3, [r3, #4]
 8024552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8024556:	2b00      	cmp	r3, #0
 8024558:	d00f      	beq.n	802457a <HAL_SPI_Init+0x13e>
 802455a:	687b      	ldr	r3, [r7, #4]
 802455c:	68db      	ldr	r3, [r3, #12]
 802455e:	2b06      	cmp	r3, #6
 8024560:	d90b      	bls.n	802457a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8024562:	687b      	ldr	r3, [r7, #4]
 8024564:	681b      	ldr	r3, [r3, #0]
 8024566:	681b      	ldr	r3, [r3, #0]
 8024568:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 802456c:	687b      	ldr	r3, [r7, #4]
 802456e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8024570:	687b      	ldr	r3, [r7, #4]
 8024572:	681b      	ldr	r3, [r3, #0]
 8024574:	430a      	orrs	r2, r1
 8024576:	601a      	str	r2, [r3, #0]
 8024578:	e007      	b.n	802458a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 802457a:	687b      	ldr	r3, [r7, #4]
 802457c:	681b      	ldr	r3, [r3, #0]
 802457e:	681a      	ldr	r2, [r3, #0]
 8024580:	687b      	ldr	r3, [r7, #4]
 8024582:	681b      	ldr	r3, [r3, #0]
 8024584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8024588:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 802458a:	687b      	ldr	r3, [r7, #4]
 802458c:	69da      	ldr	r2, [r3, #28]
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024592:	431a      	orrs	r2, r3
 8024594:	68bb      	ldr	r3, [r7, #8]
 8024596:	431a      	orrs	r2, r3
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802459c:	ea42 0103 	orr.w	r1, r2, r3
 80245a0:	687b      	ldr	r3, [r7, #4]
 80245a2:	68da      	ldr	r2, [r3, #12]
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	681b      	ldr	r3, [r3, #0]
 80245a8:	430a      	orrs	r2, r1
 80245aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80245ac:	687b      	ldr	r3, [r7, #4]
 80245ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80245b0:	687b      	ldr	r3, [r7, #4]
 80245b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80245b4:	431a      	orrs	r2, r3
 80245b6:	687b      	ldr	r3, [r7, #4]
 80245b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80245ba:	431a      	orrs	r2, r3
 80245bc:	687b      	ldr	r3, [r7, #4]
 80245be:	699b      	ldr	r3, [r3, #24]
 80245c0:	431a      	orrs	r2, r3
 80245c2:	687b      	ldr	r3, [r7, #4]
 80245c4:	691b      	ldr	r3, [r3, #16]
 80245c6:	431a      	orrs	r2, r3
 80245c8:	687b      	ldr	r3, [r7, #4]
 80245ca:	695b      	ldr	r3, [r3, #20]
 80245cc:	431a      	orrs	r2, r3
 80245ce:	687b      	ldr	r3, [r7, #4]
 80245d0:	6a1b      	ldr	r3, [r3, #32]
 80245d2:	431a      	orrs	r2, r3
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	685b      	ldr	r3, [r3, #4]
 80245d8:	431a      	orrs	r2, r3
 80245da:	687b      	ldr	r3, [r7, #4]
 80245dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80245de:	431a      	orrs	r2, r3
 80245e0:	687b      	ldr	r3, [r7, #4]
 80245e2:	689b      	ldr	r3, [r3, #8]
 80245e4:	431a      	orrs	r2, r3
 80245e6:	687b      	ldr	r3, [r7, #4]
 80245e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80245ea:	ea42 0103 	orr.w	r1, r2, r3
 80245ee:	687b      	ldr	r3, [r7, #4]
 80245f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80245f2:	687b      	ldr	r3, [r7, #4]
 80245f4:	681b      	ldr	r3, [r3, #0]
 80245f6:	430a      	orrs	r2, r1
 80245f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80245fa:	687b      	ldr	r3, [r7, #4]
 80245fc:	685b      	ldr	r3, [r3, #4]
 80245fe:	2b00      	cmp	r3, #0
 8024600:	d113      	bne.n	802462a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8024602:	687b      	ldr	r3, [r7, #4]
 8024604:	681b      	ldr	r3, [r3, #0]
 8024606:	689b      	ldr	r3, [r3, #8]
 8024608:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 802460c:	687b      	ldr	r3, [r7, #4]
 802460e:	681b      	ldr	r3, [r3, #0]
 8024610:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8024614:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8024616:	687b      	ldr	r3, [r7, #4]
 8024618:	681b      	ldr	r3, [r3, #0]
 802461a:	689b      	ldr	r3, [r3, #8]
 802461c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8024620:	687b      	ldr	r3, [r7, #4]
 8024622:	681b      	ldr	r3, [r3, #0]
 8024624:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8024628:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 802462a:	687b      	ldr	r3, [r7, #4]
 802462c:	681b      	ldr	r3, [r3, #0]
 802462e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8024630:	687b      	ldr	r3, [r7, #4]
 8024632:	681b      	ldr	r3, [r3, #0]
 8024634:	f022 0201 	bic.w	r2, r2, #1
 8024638:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 802463a:	687b      	ldr	r3, [r7, #4]
 802463c:	685b      	ldr	r3, [r3, #4]
 802463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8024642:	2b00      	cmp	r3, #0
 8024644:	d00a      	beq.n	802465c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	68db      	ldr	r3, [r3, #12]
 802464c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8024650:	687b      	ldr	r3, [r7, #4]
 8024652:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8024654:	687b      	ldr	r3, [r7, #4]
 8024656:	681b      	ldr	r3, [r3, #0]
 8024658:	430a      	orrs	r2, r1
 802465a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	2200      	movs	r2, #0
 8024660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8024664:	687b      	ldr	r3, [r7, #4]
 8024666:	2201      	movs	r2, #1
 8024668:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 802466c:	2300      	movs	r3, #0
}
 802466e:	4618      	mov	r0, r3
 8024670:	3710      	adds	r7, #16
 8024672:	46bd      	mov	sp, r7
 8024674:	bd80      	pop	{r7, pc}
 8024676:	bf00      	nop
 8024678:	40013000 	.word	0x40013000
 802467c:	40003800 	.word	0x40003800
 8024680:	40003c00 	.word	0x40003c00

08024684 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8024684:	b580      	push	{r7, lr}
 8024686:	b088      	sub	sp, #32
 8024688:	af02      	add	r7, sp, #8
 802468a:	60f8      	str	r0, [r7, #12]
 802468c:	60b9      	str	r1, [r7, #8]
 802468e:	603b      	str	r3, [r7, #0]
 8024690:	4613      	mov	r3, r2
 8024692:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8024694:	68fb      	ldr	r3, [r7, #12]
 8024696:	681b      	ldr	r3, [r3, #0]
 8024698:	3320      	adds	r3, #32
 802469a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 802469c:	f7fc ff0c 	bl	80214b8 <HAL_GetTick>
 80246a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80246a2:	68fb      	ldr	r3, [r7, #12]
 80246a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80246a8:	b2db      	uxtb	r3, r3
 80246aa:	2b01      	cmp	r3, #1
 80246ac:	d001      	beq.n	80246b2 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80246ae:	2302      	movs	r3, #2
 80246b0:	e1d1      	b.n	8024a56 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80246b2:	68bb      	ldr	r3, [r7, #8]
 80246b4:	2b00      	cmp	r3, #0
 80246b6:	d002      	beq.n	80246be <HAL_SPI_Transmit+0x3a>
 80246b8:	88fb      	ldrh	r3, [r7, #6]
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	d101      	bne.n	80246c2 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80246be:	2301      	movs	r3, #1
 80246c0:	e1c9      	b.n	8024a56 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80246c2:	68fb      	ldr	r3, [r7, #12]
 80246c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80246c8:	2b01      	cmp	r3, #1
 80246ca:	d101      	bne.n	80246d0 <HAL_SPI_Transmit+0x4c>
 80246cc:	2302      	movs	r3, #2
 80246ce:	e1c2      	b.n	8024a56 <HAL_SPI_Transmit+0x3d2>
 80246d0:	68fb      	ldr	r3, [r7, #12]
 80246d2:	2201      	movs	r2, #1
 80246d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80246d8:	68fb      	ldr	r3, [r7, #12]
 80246da:	2203      	movs	r2, #3
 80246dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80246e0:	68fb      	ldr	r3, [r7, #12]
 80246e2:	2200      	movs	r2, #0
 80246e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80246e8:	68fb      	ldr	r3, [r7, #12]
 80246ea:	68ba      	ldr	r2, [r7, #8]
 80246ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80246ee:	68fb      	ldr	r3, [r7, #12]
 80246f0:	88fa      	ldrh	r2, [r7, #6]
 80246f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80246f6:	68fb      	ldr	r3, [r7, #12]
 80246f8:	88fa      	ldrh	r2, [r7, #6]
 80246fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80246fe:	68fb      	ldr	r3, [r7, #12]
 8024700:	2200      	movs	r2, #0
 8024702:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8024704:	68fb      	ldr	r3, [r7, #12]
 8024706:	2200      	movs	r2, #0
 8024708:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 802470c:	68fb      	ldr	r3, [r7, #12]
 802470e:	2200      	movs	r2, #0
 8024710:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8024714:	68fb      	ldr	r3, [r7, #12]
 8024716:	2200      	movs	r2, #0
 8024718:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 802471a:	68fb      	ldr	r3, [r7, #12]
 802471c:	2200      	movs	r2, #0
 802471e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8024720:	68fb      	ldr	r3, [r7, #12]
 8024722:	689b      	ldr	r3, [r3, #8]
 8024724:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8024728:	d108      	bne.n	802473c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 802472a:	68fb      	ldr	r3, [r7, #12]
 802472c:	681b      	ldr	r3, [r3, #0]
 802472e:	681a      	ldr	r2, [r3, #0]
 8024730:	68fb      	ldr	r3, [r7, #12]
 8024732:	681b      	ldr	r3, [r3, #0]
 8024734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8024738:	601a      	str	r2, [r3, #0]
 802473a:	e009      	b.n	8024750 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 802473c:	68fb      	ldr	r3, [r7, #12]
 802473e:	681b      	ldr	r3, [r3, #0]
 8024740:	68db      	ldr	r3, [r3, #12]
 8024742:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8024746:	68fb      	ldr	r3, [r7, #12]
 8024748:	681b      	ldr	r3, [r3, #0]
 802474a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 802474e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8024750:	68fb      	ldr	r3, [r7, #12]
 8024752:	681b      	ldr	r3, [r3, #0]
 8024754:	685a      	ldr	r2, [r3, #4]
 8024756:	4b96      	ldr	r3, [pc, #600]	@ (80249b0 <HAL_SPI_Transmit+0x32c>)
 8024758:	4013      	ands	r3, r2
 802475a:	88f9      	ldrh	r1, [r7, #6]
 802475c:	68fa      	ldr	r2, [r7, #12]
 802475e:	6812      	ldr	r2, [r2, #0]
 8024760:	430b      	orrs	r3, r1
 8024762:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8024764:	68fb      	ldr	r3, [r7, #12]
 8024766:	681b      	ldr	r3, [r3, #0]
 8024768:	681a      	ldr	r2, [r3, #0]
 802476a:	68fb      	ldr	r3, [r7, #12]
 802476c:	681b      	ldr	r3, [r3, #0]
 802476e:	f042 0201 	orr.w	r2, r2, #1
 8024772:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8024774:	68fb      	ldr	r3, [r7, #12]
 8024776:	685b      	ldr	r3, [r3, #4]
 8024778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 802477c:	d107      	bne.n	802478e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 802477e:	68fb      	ldr	r3, [r7, #12]
 8024780:	681b      	ldr	r3, [r3, #0]
 8024782:	681a      	ldr	r2, [r3, #0]
 8024784:	68fb      	ldr	r3, [r7, #12]
 8024786:	681b      	ldr	r3, [r3, #0]
 8024788:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 802478c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 802478e:	68fb      	ldr	r3, [r7, #12]
 8024790:	68db      	ldr	r3, [r3, #12]
 8024792:	2b0f      	cmp	r3, #15
 8024794:	d947      	bls.n	8024826 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8024796:	e03f      	b.n	8024818 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8024798:	68fb      	ldr	r3, [r7, #12]
 802479a:	681b      	ldr	r3, [r3, #0]
 802479c:	695b      	ldr	r3, [r3, #20]
 802479e:	f003 0302 	and.w	r3, r3, #2
 80247a2:	2b02      	cmp	r3, #2
 80247a4:	d114      	bne.n	80247d0 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80247a6:	68fb      	ldr	r3, [r7, #12]
 80247a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80247aa:	68fb      	ldr	r3, [r7, #12]
 80247ac:	681b      	ldr	r3, [r3, #0]
 80247ae:	6812      	ldr	r2, [r2, #0]
 80247b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80247b2:	68fb      	ldr	r3, [r7, #12]
 80247b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80247b6:	1d1a      	adds	r2, r3, #4
 80247b8:	68fb      	ldr	r3, [r7, #12]
 80247ba:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80247bc:	68fb      	ldr	r3, [r7, #12]
 80247be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80247c2:	b29b      	uxth	r3, r3
 80247c4:	3b01      	subs	r3, #1
 80247c6:	b29a      	uxth	r2, r3
 80247c8:	68fb      	ldr	r3, [r7, #12]
 80247ca:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80247ce:	e023      	b.n	8024818 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80247d0:	f7fc fe72 	bl	80214b8 <HAL_GetTick>
 80247d4:	4602      	mov	r2, r0
 80247d6:	693b      	ldr	r3, [r7, #16]
 80247d8:	1ad3      	subs	r3, r2, r3
 80247da:	683a      	ldr	r2, [r7, #0]
 80247dc:	429a      	cmp	r2, r3
 80247de:	d803      	bhi.n	80247e8 <HAL_SPI_Transmit+0x164>
 80247e0:	683b      	ldr	r3, [r7, #0]
 80247e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80247e6:	d102      	bne.n	80247ee <HAL_SPI_Transmit+0x16a>
 80247e8:	683b      	ldr	r3, [r7, #0]
 80247ea:	2b00      	cmp	r3, #0
 80247ec:	d114      	bne.n	8024818 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80247ee:	68f8      	ldr	r0, [r7, #12]
 80247f0:	f000 fc70 	bl	80250d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80247f4:	68fb      	ldr	r3, [r7, #12]
 80247f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80247fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80247fe:	68fb      	ldr	r3, [r7, #12]
 8024800:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8024804:	68fb      	ldr	r3, [r7, #12]
 8024806:	2201      	movs	r2, #1
 8024808:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 802480c:	68fb      	ldr	r3, [r7, #12]
 802480e:	2200      	movs	r2, #0
 8024810:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8024814:	2303      	movs	r3, #3
 8024816:	e11e      	b.n	8024a56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8024818:	68fb      	ldr	r3, [r7, #12]
 802481a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 802481e:	b29b      	uxth	r3, r3
 8024820:	2b00      	cmp	r3, #0
 8024822:	d1b9      	bne.n	8024798 <HAL_SPI_Transmit+0x114>
 8024824:	e0f1      	b.n	8024a0a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024826:	68fb      	ldr	r3, [r7, #12]
 8024828:	68db      	ldr	r3, [r3, #12]
 802482a:	2b07      	cmp	r3, #7
 802482c:	f240 80e6 	bls.w	80249fc <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8024830:	e05d      	b.n	80248ee <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8024832:	68fb      	ldr	r3, [r7, #12]
 8024834:	681b      	ldr	r3, [r3, #0]
 8024836:	695b      	ldr	r3, [r3, #20]
 8024838:	f003 0302 	and.w	r3, r3, #2
 802483c:	2b02      	cmp	r3, #2
 802483e:	d132      	bne.n	80248a6 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8024840:	68fb      	ldr	r3, [r7, #12]
 8024842:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024846:	b29b      	uxth	r3, r3
 8024848:	2b01      	cmp	r3, #1
 802484a:	d918      	bls.n	802487e <HAL_SPI_Transmit+0x1fa>
 802484c:	68fb      	ldr	r3, [r7, #12]
 802484e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024850:	2b00      	cmp	r3, #0
 8024852:	d014      	beq.n	802487e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8024854:	68fb      	ldr	r3, [r7, #12]
 8024856:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8024858:	68fb      	ldr	r3, [r7, #12]
 802485a:	681b      	ldr	r3, [r3, #0]
 802485c:	6812      	ldr	r2, [r2, #0]
 802485e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8024860:	68fb      	ldr	r3, [r7, #12]
 8024862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024864:	1d1a      	adds	r2, r3, #4
 8024866:	68fb      	ldr	r3, [r7, #12]
 8024868:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 802486a:	68fb      	ldr	r3, [r7, #12]
 802486c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024870:	b29b      	uxth	r3, r3
 8024872:	3b02      	subs	r3, #2
 8024874:	b29a      	uxth	r2, r3
 8024876:	68fb      	ldr	r3, [r7, #12]
 8024878:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 802487c:	e037      	b.n	80248ee <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 802487e:	68fb      	ldr	r3, [r7, #12]
 8024880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024882:	881a      	ldrh	r2, [r3, #0]
 8024884:	697b      	ldr	r3, [r7, #20]
 8024886:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8024888:	68fb      	ldr	r3, [r7, #12]
 802488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802488c:	1c9a      	adds	r2, r3, #2
 802488e:	68fb      	ldr	r3, [r7, #12]
 8024890:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8024892:	68fb      	ldr	r3, [r7, #12]
 8024894:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024898:	b29b      	uxth	r3, r3
 802489a:	3b01      	subs	r3, #1
 802489c:	b29a      	uxth	r2, r3
 802489e:	68fb      	ldr	r3, [r7, #12]
 80248a0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80248a4:	e023      	b.n	80248ee <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80248a6:	f7fc fe07 	bl	80214b8 <HAL_GetTick>
 80248aa:	4602      	mov	r2, r0
 80248ac:	693b      	ldr	r3, [r7, #16]
 80248ae:	1ad3      	subs	r3, r2, r3
 80248b0:	683a      	ldr	r2, [r7, #0]
 80248b2:	429a      	cmp	r2, r3
 80248b4:	d803      	bhi.n	80248be <HAL_SPI_Transmit+0x23a>
 80248b6:	683b      	ldr	r3, [r7, #0]
 80248b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80248bc:	d102      	bne.n	80248c4 <HAL_SPI_Transmit+0x240>
 80248be:	683b      	ldr	r3, [r7, #0]
 80248c0:	2b00      	cmp	r3, #0
 80248c2:	d114      	bne.n	80248ee <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80248c4:	68f8      	ldr	r0, [r7, #12]
 80248c6:	f000 fc05 	bl	80250d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80248ca:	68fb      	ldr	r3, [r7, #12]
 80248cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80248d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80248d4:	68fb      	ldr	r3, [r7, #12]
 80248d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80248da:	68fb      	ldr	r3, [r7, #12]
 80248dc:	2201      	movs	r2, #1
 80248de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80248e2:	68fb      	ldr	r3, [r7, #12]
 80248e4:	2200      	movs	r2, #0
 80248e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80248ea:	2303      	movs	r3, #3
 80248ec:	e0b3      	b.n	8024a56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80248ee:	68fb      	ldr	r3, [r7, #12]
 80248f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80248f4:	b29b      	uxth	r3, r3
 80248f6:	2b00      	cmp	r3, #0
 80248f8:	d19b      	bne.n	8024832 <HAL_SPI_Transmit+0x1ae>
 80248fa:	e086      	b.n	8024a0a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80248fc:	68fb      	ldr	r3, [r7, #12]
 80248fe:	681b      	ldr	r3, [r3, #0]
 8024900:	695b      	ldr	r3, [r3, #20]
 8024902:	f003 0302 	and.w	r3, r3, #2
 8024906:	2b02      	cmp	r3, #2
 8024908:	d154      	bne.n	80249b4 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 802490a:	68fb      	ldr	r3, [r7, #12]
 802490c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024910:	b29b      	uxth	r3, r3
 8024912:	2b03      	cmp	r3, #3
 8024914:	d918      	bls.n	8024948 <HAL_SPI_Transmit+0x2c4>
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802491a:	2b40      	cmp	r3, #64	@ 0x40
 802491c:	d914      	bls.n	8024948 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 802491e:	68fb      	ldr	r3, [r7, #12]
 8024920:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8024922:	68fb      	ldr	r3, [r7, #12]
 8024924:	681b      	ldr	r3, [r3, #0]
 8024926:	6812      	ldr	r2, [r2, #0]
 8024928:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 802492a:	68fb      	ldr	r3, [r7, #12]
 802492c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802492e:	1d1a      	adds	r2, r3, #4
 8024930:	68fb      	ldr	r3, [r7, #12]
 8024932:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8024934:	68fb      	ldr	r3, [r7, #12]
 8024936:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 802493a:	b29b      	uxth	r3, r3
 802493c:	3b04      	subs	r3, #4
 802493e:	b29a      	uxth	r2, r3
 8024940:	68fb      	ldr	r3, [r7, #12]
 8024942:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8024946:	e059      	b.n	80249fc <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8024948:	68fb      	ldr	r3, [r7, #12]
 802494a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 802494e:	b29b      	uxth	r3, r3
 8024950:	2b01      	cmp	r3, #1
 8024952:	d917      	bls.n	8024984 <HAL_SPI_Transmit+0x300>
 8024954:	68fb      	ldr	r3, [r7, #12]
 8024956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024958:	2b00      	cmp	r3, #0
 802495a:	d013      	beq.n	8024984 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 802495c:	68fb      	ldr	r3, [r7, #12]
 802495e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024960:	881a      	ldrh	r2, [r3, #0]
 8024962:	697b      	ldr	r3, [r7, #20]
 8024964:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8024966:	68fb      	ldr	r3, [r7, #12]
 8024968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 802496a:	1c9a      	adds	r2, r3, #2
 802496c:	68fb      	ldr	r3, [r7, #12]
 802496e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8024970:	68fb      	ldr	r3, [r7, #12]
 8024972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024976:	b29b      	uxth	r3, r3
 8024978:	3b02      	subs	r3, #2
 802497a:	b29a      	uxth	r2, r3
 802497c:	68fb      	ldr	r3, [r7, #12]
 802497e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8024982:	e03b      	b.n	80249fc <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8024984:	68fb      	ldr	r3, [r7, #12]
 8024986:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8024988:	68fb      	ldr	r3, [r7, #12]
 802498a:	681b      	ldr	r3, [r3, #0]
 802498c:	3320      	adds	r3, #32
 802498e:	7812      	ldrb	r2, [r2, #0]
 8024990:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8024992:	68fb      	ldr	r3, [r7, #12]
 8024994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024996:	1c5a      	adds	r2, r3, #1
 8024998:	68fb      	ldr	r3, [r7, #12]
 802499a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 802499c:	68fb      	ldr	r3, [r7, #12]
 802499e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80249a2:	b29b      	uxth	r3, r3
 80249a4:	3b01      	subs	r3, #1
 80249a6:	b29a      	uxth	r2, r3
 80249a8:	68fb      	ldr	r3, [r7, #12]
 80249aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80249ae:	e025      	b.n	80249fc <HAL_SPI_Transmit+0x378>
 80249b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80249b4:	f7fc fd80 	bl	80214b8 <HAL_GetTick>
 80249b8:	4602      	mov	r2, r0
 80249ba:	693b      	ldr	r3, [r7, #16]
 80249bc:	1ad3      	subs	r3, r2, r3
 80249be:	683a      	ldr	r2, [r7, #0]
 80249c0:	429a      	cmp	r2, r3
 80249c2:	d803      	bhi.n	80249cc <HAL_SPI_Transmit+0x348>
 80249c4:	683b      	ldr	r3, [r7, #0]
 80249c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80249ca:	d102      	bne.n	80249d2 <HAL_SPI_Transmit+0x34e>
 80249cc:	683b      	ldr	r3, [r7, #0]
 80249ce:	2b00      	cmp	r3, #0
 80249d0:	d114      	bne.n	80249fc <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80249d2:	68f8      	ldr	r0, [r7, #12]
 80249d4:	f000 fb7e 	bl	80250d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80249d8:	68fb      	ldr	r3, [r7, #12]
 80249da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80249de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80249e2:	68fb      	ldr	r3, [r7, #12]
 80249e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80249e8:	68fb      	ldr	r3, [r7, #12]
 80249ea:	2201      	movs	r2, #1
 80249ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80249f0:	68fb      	ldr	r3, [r7, #12]
 80249f2:	2200      	movs	r2, #0
 80249f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80249f8:	2303      	movs	r3, #3
 80249fa:	e02c      	b.n	8024a56 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80249fc:	68fb      	ldr	r3, [r7, #12]
 80249fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024a02:	b29b      	uxth	r3, r3
 8024a04:	2b00      	cmp	r3, #0
 8024a06:	f47f af79 	bne.w	80248fc <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8024a0a:	693b      	ldr	r3, [r7, #16]
 8024a0c:	9300      	str	r3, [sp, #0]
 8024a0e:	683b      	ldr	r3, [r7, #0]
 8024a10:	2200      	movs	r2, #0
 8024a12:	2108      	movs	r1, #8
 8024a14:	68f8      	ldr	r0, [r7, #12]
 8024a16:	f000 fbfd 	bl	8025214 <SPI_WaitOnFlagUntilTimeout>
 8024a1a:	4603      	mov	r3, r0
 8024a1c:	2b00      	cmp	r3, #0
 8024a1e:	d007      	beq.n	8024a30 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8024a20:	68fb      	ldr	r3, [r7, #12]
 8024a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8024a26:	f043 0220 	orr.w	r2, r3, #32
 8024a2a:	68fb      	ldr	r3, [r7, #12]
 8024a2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8024a30:	68f8      	ldr	r0, [r7, #12]
 8024a32:	f000 fb4f 	bl	80250d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8024a36:	68fb      	ldr	r3, [r7, #12]
 8024a38:	2201      	movs	r2, #1
 8024a3a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8024a3e:	68fb      	ldr	r3, [r7, #12]
 8024a40:	2200      	movs	r2, #0
 8024a42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8024a46:	68fb      	ldr	r3, [r7, #12]
 8024a48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	d001      	beq.n	8024a54 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8024a50:	2301      	movs	r3, #1
 8024a52:	e000      	b.n	8024a56 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8024a54:	2300      	movs	r3, #0
  }
}
 8024a56:	4618      	mov	r0, r3
 8024a58:	3718      	adds	r7, #24
 8024a5a:	46bd      	mov	sp, r7
 8024a5c:	bd80      	pop	{r7, pc}
 8024a5e:	bf00      	nop

08024a60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8024a60:	b580      	push	{r7, lr}
 8024a62:	b08e      	sub	sp, #56	@ 0x38
 8024a64:	af02      	add	r7, sp, #8
 8024a66:	60f8      	str	r0, [r7, #12]
 8024a68:	60b9      	str	r1, [r7, #8]
 8024a6a:	607a      	str	r2, [r7, #4]
 8024a6c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8024a6e:	68fb      	ldr	r3, [r7, #12]
 8024a70:	681b      	ldr	r3, [r3, #0]
 8024a72:	3320      	adds	r3, #32
 8024a74:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8024a76:	68fb      	ldr	r3, [r7, #12]
 8024a78:	681b      	ldr	r3, [r3, #0]
 8024a7a:	3330      	adds	r3, #48	@ 0x30
 8024a7c:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8024a7e:	68fb      	ldr	r3, [r7, #12]
 8024a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8024a82:	095b      	lsrs	r3, r3, #5
 8024a84:	b29b      	uxth	r3, r3
 8024a86:	3301      	adds	r3, #1
 8024a88:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8024a8a:	f7fc fd15 	bl	80214b8 <HAL_GetTick>
 8024a8e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8024a90:	887b      	ldrh	r3, [r7, #2]
 8024a92:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8024a94:	887b      	ldrh	r3, [r7, #2]
 8024a96:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8024a98:	68fb      	ldr	r3, [r7, #12]
 8024a9a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8024a9e:	b2db      	uxtb	r3, r3
 8024aa0:	2b01      	cmp	r3, #1
 8024aa2:	d001      	beq.n	8024aa8 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8024aa4:	2302      	movs	r3, #2
 8024aa6:	e310      	b.n	80250ca <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8024aa8:	68bb      	ldr	r3, [r7, #8]
 8024aaa:	2b00      	cmp	r3, #0
 8024aac:	d005      	beq.n	8024aba <HAL_SPI_TransmitReceive+0x5a>
 8024aae:	687b      	ldr	r3, [r7, #4]
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	d002      	beq.n	8024aba <HAL_SPI_TransmitReceive+0x5a>
 8024ab4:	887b      	ldrh	r3, [r7, #2]
 8024ab6:	2b00      	cmp	r3, #0
 8024ab8:	d101      	bne.n	8024abe <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8024aba:	2301      	movs	r3, #1
 8024abc:	e305      	b.n	80250ca <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8024abe:	68fb      	ldr	r3, [r7, #12]
 8024ac0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8024ac4:	2b01      	cmp	r3, #1
 8024ac6:	d101      	bne.n	8024acc <HAL_SPI_TransmitReceive+0x6c>
 8024ac8:	2302      	movs	r3, #2
 8024aca:	e2fe      	b.n	80250ca <HAL_SPI_TransmitReceive+0x66a>
 8024acc:	68fb      	ldr	r3, [r7, #12]
 8024ace:	2201      	movs	r2, #1
 8024ad0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8024ad4:	68fb      	ldr	r3, [r7, #12]
 8024ad6:	2205      	movs	r2, #5
 8024ad8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8024adc:	68fb      	ldr	r3, [r7, #12]
 8024ade:	2200      	movs	r2, #0
 8024ae0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8024ae4:	68fb      	ldr	r3, [r7, #12]
 8024ae6:	687a      	ldr	r2, [r7, #4]
 8024ae8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8024aea:	68fb      	ldr	r3, [r7, #12]
 8024aec:	887a      	ldrh	r2, [r7, #2]
 8024aee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8024af2:	68fb      	ldr	r3, [r7, #12]
 8024af4:	887a      	ldrh	r2, [r7, #2]
 8024af6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8024afa:	68fb      	ldr	r3, [r7, #12]
 8024afc:	68ba      	ldr	r2, [r7, #8]
 8024afe:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8024b00:	68fb      	ldr	r3, [r7, #12]
 8024b02:	887a      	ldrh	r2, [r7, #2]
 8024b04:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8024b08:	68fb      	ldr	r3, [r7, #12]
 8024b0a:	887a      	ldrh	r2, [r7, #2]
 8024b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8024b10:	68fb      	ldr	r3, [r7, #12]
 8024b12:	2200      	movs	r2, #0
 8024b14:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8024b16:	68fb      	ldr	r3, [r7, #12]
 8024b18:	2200      	movs	r2, #0
 8024b1a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8024b1c:	68fb      	ldr	r3, [r7, #12]
 8024b1e:	681b      	ldr	r3, [r3, #0]
 8024b20:	68da      	ldr	r2, [r3, #12]
 8024b22:	68fb      	ldr	r3, [r7, #12]
 8024b24:	681b      	ldr	r3, [r3, #0]
 8024b26:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8024b2a:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8024b2c:	68fb      	ldr	r3, [r7, #12]
 8024b2e:	681b      	ldr	r3, [r3, #0]
 8024b30:	4a70      	ldr	r2, [pc, #448]	@ (8024cf4 <HAL_SPI_TransmitReceive+0x294>)
 8024b32:	4293      	cmp	r3, r2
 8024b34:	d009      	beq.n	8024b4a <HAL_SPI_TransmitReceive+0xea>
 8024b36:	68fb      	ldr	r3, [r7, #12]
 8024b38:	681b      	ldr	r3, [r3, #0]
 8024b3a:	4a6f      	ldr	r2, [pc, #444]	@ (8024cf8 <HAL_SPI_TransmitReceive+0x298>)
 8024b3c:	4293      	cmp	r3, r2
 8024b3e:	d004      	beq.n	8024b4a <HAL_SPI_TransmitReceive+0xea>
 8024b40:	68fb      	ldr	r3, [r7, #12]
 8024b42:	681b      	ldr	r3, [r3, #0]
 8024b44:	4a6d      	ldr	r2, [pc, #436]	@ (8024cfc <HAL_SPI_TransmitReceive+0x29c>)
 8024b46:	4293      	cmp	r3, r2
 8024b48:	d102      	bne.n	8024b50 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8024b4a:	2310      	movs	r3, #16
 8024b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8024b4e:	e001      	b.n	8024b54 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8024b50:	2308      	movs	r3, #8
 8024b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8024b54:	68fb      	ldr	r3, [r7, #12]
 8024b56:	681b      	ldr	r3, [r3, #0]
 8024b58:	685a      	ldr	r2, [r3, #4]
 8024b5a:	4b69      	ldr	r3, [pc, #420]	@ (8024d00 <HAL_SPI_TransmitReceive+0x2a0>)
 8024b5c:	4013      	ands	r3, r2
 8024b5e:	8879      	ldrh	r1, [r7, #2]
 8024b60:	68fa      	ldr	r2, [r7, #12]
 8024b62:	6812      	ldr	r2, [r2, #0]
 8024b64:	430b      	orrs	r3, r1
 8024b66:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8024b68:	68fb      	ldr	r3, [r7, #12]
 8024b6a:	681b      	ldr	r3, [r3, #0]
 8024b6c:	681a      	ldr	r2, [r3, #0]
 8024b6e:	68fb      	ldr	r3, [r7, #12]
 8024b70:	681b      	ldr	r3, [r3, #0]
 8024b72:	f042 0201 	orr.w	r2, r2, #1
 8024b76:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8024b78:	68fb      	ldr	r3, [r7, #12]
 8024b7a:	685b      	ldr	r3, [r3, #4]
 8024b7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8024b80:	d107      	bne.n	8024b92 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8024b82:	68fb      	ldr	r3, [r7, #12]
 8024b84:	681b      	ldr	r3, [r3, #0]
 8024b86:	681a      	ldr	r2, [r3, #0]
 8024b88:	68fb      	ldr	r3, [r7, #12]
 8024b8a:	681b      	ldr	r3, [r3, #0]
 8024b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8024b90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8024b92:	68fb      	ldr	r3, [r7, #12]
 8024b94:	68db      	ldr	r3, [r3, #12]
 8024b96:	2b0f      	cmp	r3, #15
 8024b98:	f240 80a2 	bls.w	8024ce0 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8024b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024b9e:	089b      	lsrs	r3, r3, #2
 8024ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024ba2:	e094      	b.n	8024cce <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8024ba4:	68fb      	ldr	r3, [r7, #12]
 8024ba6:	681b      	ldr	r3, [r3, #0]
 8024ba8:	695b      	ldr	r3, [r3, #20]
 8024baa:	f003 0302 	and.w	r3, r3, #2
 8024bae:	2b02      	cmp	r3, #2
 8024bb0:	d120      	bne.n	8024bf4 <HAL_SPI_TransmitReceive+0x194>
 8024bb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8024bb4:	2b00      	cmp	r3, #0
 8024bb6:	d01d      	beq.n	8024bf4 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8024bb8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8024bba:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8024bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024bbe:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8024bc0:	429a      	cmp	r2, r3
 8024bc2:	d217      	bcs.n	8024bf4 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8024bc4:	68fb      	ldr	r3, [r7, #12]
 8024bc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8024bc8:	68fb      	ldr	r3, [r7, #12]
 8024bca:	681b      	ldr	r3, [r3, #0]
 8024bcc:	6812      	ldr	r2, [r2, #0]
 8024bce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8024bd0:	68fb      	ldr	r3, [r7, #12]
 8024bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024bd4:	1d1a      	adds	r2, r3, #4
 8024bd6:	68fb      	ldr	r3, [r7, #12]
 8024bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8024bda:	68fb      	ldr	r3, [r7, #12]
 8024bdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024be0:	b29b      	uxth	r3, r3
 8024be2:	3b01      	subs	r3, #1
 8024be4:	b29a      	uxth	r2, r3
 8024be6:	68fb      	ldr	r3, [r7, #12]
 8024be8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8024bec:	68fb      	ldr	r3, [r7, #12]
 8024bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024bf2:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8024bf4:	68fb      	ldr	r3, [r7, #12]
 8024bf6:	681b      	ldr	r3, [r3, #0]
 8024bf8:	695b      	ldr	r3, [r3, #20]
 8024bfa:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8024bfc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8024bfe:	2b00      	cmp	r3, #0
 8024c00:	d065      	beq.n	8024cce <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8024c02:	68fb      	ldr	r3, [r7, #12]
 8024c04:	681b      	ldr	r3, [r3, #0]
 8024c06:	695b      	ldr	r3, [r3, #20]
 8024c08:	f003 0301 	and.w	r3, r3, #1
 8024c0c:	2b01      	cmp	r3, #1
 8024c0e:	d118      	bne.n	8024c42 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8024c10:	68fb      	ldr	r3, [r7, #12]
 8024c12:	681a      	ldr	r2, [r3, #0]
 8024c14:	68fb      	ldr	r3, [r7, #12]
 8024c16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024c18:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8024c1a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8024c1c:	68fb      	ldr	r3, [r7, #12]
 8024c1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024c20:	1d1a      	adds	r2, r3, #4
 8024c22:	68fb      	ldr	r3, [r7, #12]
 8024c24:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8024c26:	68fb      	ldr	r3, [r7, #12]
 8024c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024c2c:	b29b      	uxth	r3, r3
 8024c2e:	3b01      	subs	r3, #1
 8024c30:	b29a      	uxth	r2, r3
 8024c32:	68fb      	ldr	r3, [r7, #12]
 8024c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024c38:	68fb      	ldr	r3, [r7, #12]
 8024c3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024c3e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8024c40:	e045      	b.n	8024cce <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8024c42:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8024c44:	8bfb      	ldrh	r3, [r7, #30]
 8024c46:	429a      	cmp	r2, r3
 8024c48:	d21d      	bcs.n	8024c86 <HAL_SPI_TransmitReceive+0x226>
 8024c4a:	697b      	ldr	r3, [r7, #20]
 8024c4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8024c50:	2b00      	cmp	r3, #0
 8024c52:	d018      	beq.n	8024c86 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8024c54:	68fb      	ldr	r3, [r7, #12]
 8024c56:	681a      	ldr	r2, [r3, #0]
 8024c58:	68fb      	ldr	r3, [r7, #12]
 8024c5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024c5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8024c5e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8024c60:	68fb      	ldr	r3, [r7, #12]
 8024c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024c64:	1d1a      	adds	r2, r3, #4
 8024c66:	68fb      	ldr	r3, [r7, #12]
 8024c68:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8024c6a:	68fb      	ldr	r3, [r7, #12]
 8024c6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024c70:	b29b      	uxth	r3, r3
 8024c72:	3b01      	subs	r3, #1
 8024c74:	b29a      	uxth	r2, r3
 8024c76:	68fb      	ldr	r3, [r7, #12]
 8024c78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024c7c:	68fb      	ldr	r3, [r7, #12]
 8024c7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024c82:	853b      	strh	r3, [r7, #40]	@ 0x28
 8024c84:	e023      	b.n	8024cce <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8024c86:	f7fc fc17 	bl	80214b8 <HAL_GetTick>
 8024c8a:	4602      	mov	r2, r0
 8024c8c:	69bb      	ldr	r3, [r7, #24]
 8024c8e:	1ad3      	subs	r3, r2, r3
 8024c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8024c92:	429a      	cmp	r2, r3
 8024c94:	d803      	bhi.n	8024c9e <HAL_SPI_TransmitReceive+0x23e>
 8024c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024c9c:	d102      	bne.n	8024ca4 <HAL_SPI_TransmitReceive+0x244>
 8024c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	d114      	bne.n	8024cce <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8024ca4:	68f8      	ldr	r0, [r7, #12]
 8024ca6:	f000 fa15 	bl	80250d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8024caa:	68fb      	ldr	r3, [r7, #12]
 8024cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8024cb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8024cb4:	68fb      	ldr	r3, [r7, #12]
 8024cb6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8024cba:	68fb      	ldr	r3, [r7, #12]
 8024cbc:	2201      	movs	r2, #1
 8024cbe:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8024cc2:	68fb      	ldr	r3, [r7, #12]
 8024cc4:	2200      	movs	r2, #0
 8024cc6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8024cca:	2303      	movs	r3, #3
 8024ccc:	e1fd      	b.n	80250ca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024cce:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8024cd0:	2b00      	cmp	r3, #0
 8024cd2:	f47f af67 	bne.w	8024ba4 <HAL_SPI_TransmitReceive+0x144>
 8024cd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	f47f af63 	bne.w	8024ba4 <HAL_SPI_TransmitReceive+0x144>
 8024cde:	e1ce      	b.n	802507e <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8024ce0:	68fb      	ldr	r3, [r7, #12]
 8024ce2:	68db      	ldr	r3, [r3, #12]
 8024ce4:	2b07      	cmp	r3, #7
 8024ce6:	f240 81c2 	bls.w	802506e <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8024cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024cec:	085b      	lsrs	r3, r3, #1
 8024cee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024cf0:	e0c9      	b.n	8024e86 <HAL_SPI_TransmitReceive+0x426>
 8024cf2:	bf00      	nop
 8024cf4:	40013000 	.word	0x40013000
 8024cf8:	40003800 	.word	0x40003800
 8024cfc:	40003c00 	.word	0x40003c00
 8024d00:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8024d04:	68fb      	ldr	r3, [r7, #12]
 8024d06:	681b      	ldr	r3, [r3, #0]
 8024d08:	695b      	ldr	r3, [r3, #20]
 8024d0a:	f003 0302 	and.w	r3, r3, #2
 8024d0e:	2b02      	cmp	r3, #2
 8024d10:	d11f      	bne.n	8024d52 <HAL_SPI_TransmitReceive+0x2f2>
 8024d12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8024d14:	2b00      	cmp	r3, #0
 8024d16:	d01c      	beq.n	8024d52 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8024d18:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8024d1a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8024d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024d1e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8024d20:	429a      	cmp	r2, r3
 8024d22:	d216      	bcs.n	8024d52 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8024d24:	68fb      	ldr	r3, [r7, #12]
 8024d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024d28:	881a      	ldrh	r2, [r3, #0]
 8024d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8024d2c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8024d2e:	68fb      	ldr	r3, [r7, #12]
 8024d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024d32:	1c9a      	adds	r2, r3, #2
 8024d34:	68fb      	ldr	r3, [r7, #12]
 8024d36:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8024d38:	68fb      	ldr	r3, [r7, #12]
 8024d3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024d3e:	b29b      	uxth	r3, r3
 8024d40:	3b01      	subs	r3, #1
 8024d42:	b29a      	uxth	r2, r3
 8024d44:	68fb      	ldr	r3, [r7, #12]
 8024d46:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8024d4a:	68fb      	ldr	r3, [r7, #12]
 8024d4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024d50:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8024d52:	68fb      	ldr	r3, [r7, #12]
 8024d54:	681b      	ldr	r3, [r3, #0]
 8024d56:	695b      	ldr	r3, [r3, #20]
 8024d58:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8024d5a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8024d5c:	2b00      	cmp	r3, #0
 8024d5e:	f000 8092 	beq.w	8024e86 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8024d62:	68fb      	ldr	r3, [r7, #12]
 8024d64:	681b      	ldr	r3, [r3, #0]
 8024d66:	695b      	ldr	r3, [r3, #20]
 8024d68:	f003 0301 	and.w	r3, r3, #1
 8024d6c:	2b01      	cmp	r3, #1
 8024d6e:	d118      	bne.n	8024da2 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8024d70:	68fb      	ldr	r3, [r7, #12]
 8024d72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024d74:	6a3a      	ldr	r2, [r7, #32]
 8024d76:	8812      	ldrh	r2, [r2, #0]
 8024d78:	b292      	uxth	r2, r2
 8024d7a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8024d7c:	68fb      	ldr	r3, [r7, #12]
 8024d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024d80:	1c9a      	adds	r2, r3, #2
 8024d82:	68fb      	ldr	r3, [r7, #12]
 8024d84:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8024d86:	68fb      	ldr	r3, [r7, #12]
 8024d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024d8c:	b29b      	uxth	r3, r3
 8024d8e:	3b01      	subs	r3, #1
 8024d90:	b29a      	uxth	r2, r3
 8024d92:	68fb      	ldr	r3, [r7, #12]
 8024d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024d98:	68fb      	ldr	r3, [r7, #12]
 8024d9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024d9e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8024da0:	e071      	b.n	8024e86 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8024da2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8024da4:	8bfb      	ldrh	r3, [r7, #30]
 8024da6:	429a      	cmp	r2, r3
 8024da8:	d228      	bcs.n	8024dfc <HAL_SPI_TransmitReceive+0x39c>
 8024daa:	697b      	ldr	r3, [r7, #20]
 8024dac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8024db0:	2b00      	cmp	r3, #0
 8024db2:	d023      	beq.n	8024dfc <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8024db4:	68fb      	ldr	r3, [r7, #12]
 8024db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024db8:	6a3a      	ldr	r2, [r7, #32]
 8024dba:	8812      	ldrh	r2, [r2, #0]
 8024dbc:	b292      	uxth	r2, r2
 8024dbe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8024dc0:	68fb      	ldr	r3, [r7, #12]
 8024dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024dc4:	1c9a      	adds	r2, r3, #2
 8024dc6:	68fb      	ldr	r3, [r7, #12]
 8024dc8:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8024dca:	68fb      	ldr	r3, [r7, #12]
 8024dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024dce:	6a3a      	ldr	r2, [r7, #32]
 8024dd0:	8812      	ldrh	r2, [r2, #0]
 8024dd2:	b292      	uxth	r2, r2
 8024dd4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8024dd6:	68fb      	ldr	r3, [r7, #12]
 8024dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024dda:	1c9a      	adds	r2, r3, #2
 8024ddc:	68fb      	ldr	r3, [r7, #12]
 8024dde:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8024de0:	68fb      	ldr	r3, [r7, #12]
 8024de2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024de6:	b29b      	uxth	r3, r3
 8024de8:	3b02      	subs	r3, #2
 8024dea:	b29a      	uxth	r2, r3
 8024dec:	68fb      	ldr	r3, [r7, #12]
 8024dee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024df2:	68fb      	ldr	r3, [r7, #12]
 8024df4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024df8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8024dfa:	e044      	b.n	8024e86 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8024dfc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8024dfe:	2b01      	cmp	r3, #1
 8024e00:	d11d      	bne.n	8024e3e <HAL_SPI_TransmitReceive+0x3de>
 8024e02:	697b      	ldr	r3, [r7, #20]
 8024e04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8024e08:	2b00      	cmp	r3, #0
 8024e0a:	d018      	beq.n	8024e3e <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8024e0c:	68fb      	ldr	r3, [r7, #12]
 8024e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024e10:	6a3a      	ldr	r2, [r7, #32]
 8024e12:	8812      	ldrh	r2, [r2, #0]
 8024e14:	b292      	uxth	r2, r2
 8024e16:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8024e18:	68fb      	ldr	r3, [r7, #12]
 8024e1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024e1c:	1c9a      	adds	r2, r3, #2
 8024e1e:	68fb      	ldr	r3, [r7, #12]
 8024e20:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8024e22:	68fb      	ldr	r3, [r7, #12]
 8024e24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024e28:	b29b      	uxth	r3, r3
 8024e2a:	3b01      	subs	r3, #1
 8024e2c:	b29a      	uxth	r2, r3
 8024e2e:	68fb      	ldr	r3, [r7, #12]
 8024e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024e34:	68fb      	ldr	r3, [r7, #12]
 8024e36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024e3a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8024e3c:	e023      	b.n	8024e86 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8024e3e:	f7fc fb3b 	bl	80214b8 <HAL_GetTick>
 8024e42:	4602      	mov	r2, r0
 8024e44:	69bb      	ldr	r3, [r7, #24]
 8024e46:	1ad3      	subs	r3, r2, r3
 8024e48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8024e4a:	429a      	cmp	r2, r3
 8024e4c:	d803      	bhi.n	8024e56 <HAL_SPI_TransmitReceive+0x3f6>
 8024e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024e54:	d102      	bne.n	8024e5c <HAL_SPI_TransmitReceive+0x3fc>
 8024e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024e58:	2b00      	cmp	r3, #0
 8024e5a:	d114      	bne.n	8024e86 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8024e5c:	68f8      	ldr	r0, [r7, #12]
 8024e5e:	f000 f939 	bl	80250d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8024e62:	68fb      	ldr	r3, [r7, #12]
 8024e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8024e68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8024e6c:	68fb      	ldr	r3, [r7, #12]
 8024e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8024e72:	68fb      	ldr	r3, [r7, #12]
 8024e74:	2201      	movs	r2, #1
 8024e76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8024e7a:	68fb      	ldr	r3, [r7, #12]
 8024e7c:	2200      	movs	r2, #0
 8024e7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8024e82:	2303      	movs	r3, #3
 8024e84:	e121      	b.n	80250ca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8024e86:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8024e88:	2b00      	cmp	r3, #0
 8024e8a:	f47f af3b 	bne.w	8024d04 <HAL_SPI_TransmitReceive+0x2a4>
 8024e8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8024e90:	2b00      	cmp	r3, #0
 8024e92:	f47f af37 	bne.w	8024d04 <HAL_SPI_TransmitReceive+0x2a4>
 8024e96:	e0f2      	b.n	802507e <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8024e98:	68fb      	ldr	r3, [r7, #12]
 8024e9a:	681b      	ldr	r3, [r3, #0]
 8024e9c:	695b      	ldr	r3, [r3, #20]
 8024e9e:	f003 0302 	and.w	r3, r3, #2
 8024ea2:	2b02      	cmp	r3, #2
 8024ea4:	d121      	bne.n	8024eea <HAL_SPI_TransmitReceive+0x48a>
 8024ea6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8024ea8:	2b00      	cmp	r3, #0
 8024eaa:	d01e      	beq.n	8024eea <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8024eac:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8024eae:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8024eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8024eb2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8024eb4:	429a      	cmp	r2, r3
 8024eb6:	d218      	bcs.n	8024eea <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8024eb8:	68fb      	ldr	r3, [r7, #12]
 8024eba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8024ebc:	68fb      	ldr	r3, [r7, #12]
 8024ebe:	681b      	ldr	r3, [r3, #0]
 8024ec0:	3320      	adds	r3, #32
 8024ec2:	7812      	ldrb	r2, [r2, #0]
 8024ec4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8024ec6:	68fb      	ldr	r3, [r7, #12]
 8024ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8024eca:	1c5a      	adds	r2, r3, #1
 8024ecc:	68fb      	ldr	r3, [r7, #12]
 8024ece:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8024ed0:	68fb      	ldr	r3, [r7, #12]
 8024ed2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024ed6:	b29b      	uxth	r3, r3
 8024ed8:	3b01      	subs	r3, #1
 8024eda:	b29a      	uxth	r2, r3
 8024edc:	68fb      	ldr	r3, [r7, #12]
 8024ede:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8024ee2:	68fb      	ldr	r3, [r7, #12]
 8024ee4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8024ee8:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8024eea:	68fb      	ldr	r3, [r7, #12]
 8024eec:	681b      	ldr	r3, [r3, #0]
 8024eee:	695b      	ldr	r3, [r3, #20]
 8024ef0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8024ef2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8024ef4:	2b00      	cmp	r3, #0
 8024ef6:	f000 80ba 	beq.w	802506e <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8024efa:	68fb      	ldr	r3, [r7, #12]
 8024efc:	681b      	ldr	r3, [r3, #0]
 8024efe:	695b      	ldr	r3, [r3, #20]
 8024f00:	f003 0301 	and.w	r3, r3, #1
 8024f04:	2b01      	cmp	r3, #1
 8024f06:	d11b      	bne.n	8024f40 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8024f08:	68fb      	ldr	r3, [r7, #12]
 8024f0a:	681b      	ldr	r3, [r3, #0]
 8024f0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024f10:	68fb      	ldr	r3, [r7, #12]
 8024f12:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024f14:	7812      	ldrb	r2, [r2, #0]
 8024f16:	b2d2      	uxtb	r2, r2
 8024f18:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8024f1a:	68fb      	ldr	r3, [r7, #12]
 8024f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024f1e:	1c5a      	adds	r2, r3, #1
 8024f20:	68fb      	ldr	r3, [r7, #12]
 8024f22:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8024f24:	68fb      	ldr	r3, [r7, #12]
 8024f26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024f2a:	b29b      	uxth	r3, r3
 8024f2c:	3b01      	subs	r3, #1
 8024f2e:	b29a      	uxth	r2, r3
 8024f30:	68fb      	ldr	r3, [r7, #12]
 8024f32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024f36:	68fb      	ldr	r3, [r7, #12]
 8024f38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024f3c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8024f3e:	e096      	b.n	802506e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8024f40:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8024f42:	8bfb      	ldrh	r3, [r7, #30]
 8024f44:	429a      	cmp	r2, r3
 8024f46:	d24a      	bcs.n	8024fde <HAL_SPI_TransmitReceive+0x57e>
 8024f48:	697b      	ldr	r3, [r7, #20]
 8024f4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8024f4e:	2b00      	cmp	r3, #0
 8024f50:	d045      	beq.n	8024fde <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8024f52:	68fb      	ldr	r3, [r7, #12]
 8024f54:	681b      	ldr	r3, [r3, #0]
 8024f56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024f5a:	68fb      	ldr	r3, [r7, #12]
 8024f5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024f5e:	7812      	ldrb	r2, [r2, #0]
 8024f60:	b2d2      	uxtb	r2, r2
 8024f62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8024f64:	68fb      	ldr	r3, [r7, #12]
 8024f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024f68:	1c5a      	adds	r2, r3, #1
 8024f6a:	68fb      	ldr	r3, [r7, #12]
 8024f6c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8024f6e:	68fb      	ldr	r3, [r7, #12]
 8024f70:	681b      	ldr	r3, [r3, #0]
 8024f72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024f76:	68fb      	ldr	r3, [r7, #12]
 8024f78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024f7a:	7812      	ldrb	r2, [r2, #0]
 8024f7c:	b2d2      	uxtb	r2, r2
 8024f7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8024f80:	68fb      	ldr	r3, [r7, #12]
 8024f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024f84:	1c5a      	adds	r2, r3, #1
 8024f86:	68fb      	ldr	r3, [r7, #12]
 8024f88:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8024f8a:	68fb      	ldr	r3, [r7, #12]
 8024f8c:	681b      	ldr	r3, [r3, #0]
 8024f8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024f92:	68fb      	ldr	r3, [r7, #12]
 8024f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024f96:	7812      	ldrb	r2, [r2, #0]
 8024f98:	b2d2      	uxtb	r2, r2
 8024f9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8024f9c:	68fb      	ldr	r3, [r7, #12]
 8024f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024fa0:	1c5a      	adds	r2, r3, #1
 8024fa2:	68fb      	ldr	r3, [r7, #12]
 8024fa4:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8024fa6:	68fb      	ldr	r3, [r7, #12]
 8024fa8:	681b      	ldr	r3, [r3, #0]
 8024faa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024fae:	68fb      	ldr	r3, [r7, #12]
 8024fb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024fb2:	7812      	ldrb	r2, [r2, #0]
 8024fb4:	b2d2      	uxtb	r2, r2
 8024fb6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8024fb8:	68fb      	ldr	r3, [r7, #12]
 8024fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024fbc:	1c5a      	adds	r2, r3, #1
 8024fbe:	68fb      	ldr	r3, [r7, #12]
 8024fc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8024fc2:	68fb      	ldr	r3, [r7, #12]
 8024fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024fc8:	b29b      	uxth	r3, r3
 8024fca:	3b04      	subs	r3, #4
 8024fcc:	b29a      	uxth	r2, r3
 8024fce:	68fb      	ldr	r3, [r7, #12]
 8024fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8024fd4:	68fb      	ldr	r3, [r7, #12]
 8024fd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8024fda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8024fdc:	e047      	b.n	802506e <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8024fde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8024fe0:	2b03      	cmp	r3, #3
 8024fe2:	d820      	bhi.n	8025026 <HAL_SPI_TransmitReceive+0x5c6>
 8024fe4:	697b      	ldr	r3, [r7, #20]
 8024fe6:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8024fea:	2b00      	cmp	r3, #0
 8024fec:	d01b      	beq.n	8025026 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8024fee:	68fb      	ldr	r3, [r7, #12]
 8024ff0:	681b      	ldr	r3, [r3, #0]
 8024ff2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8024ff6:	68fb      	ldr	r3, [r7, #12]
 8024ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024ffa:	7812      	ldrb	r2, [r2, #0]
 8024ffc:	b2d2      	uxtb	r2, r2
 8024ffe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8025000:	68fb      	ldr	r3, [r7, #12]
 8025002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8025004:	1c5a      	adds	r2, r3, #1
 8025006:	68fb      	ldr	r3, [r7, #12]
 8025008:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 802500a:	68fb      	ldr	r3, [r7, #12]
 802500c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8025010:	b29b      	uxth	r3, r3
 8025012:	3b01      	subs	r3, #1
 8025014:	b29a      	uxth	r2, r3
 8025016:	68fb      	ldr	r3, [r7, #12]
 8025018:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 802501c:	68fb      	ldr	r3, [r7, #12]
 802501e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8025022:	853b      	strh	r3, [r7, #40]	@ 0x28
 8025024:	e023      	b.n	802506e <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8025026:	f7fc fa47 	bl	80214b8 <HAL_GetTick>
 802502a:	4602      	mov	r2, r0
 802502c:	69bb      	ldr	r3, [r7, #24]
 802502e:	1ad3      	subs	r3, r2, r3
 8025030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8025032:	429a      	cmp	r2, r3
 8025034:	d803      	bhi.n	802503e <HAL_SPI_TransmitReceive+0x5de>
 8025036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025038:	f1b3 3fff 	cmp.w	r3, #4294967295
 802503c:	d102      	bne.n	8025044 <HAL_SPI_TransmitReceive+0x5e4>
 802503e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025040:	2b00      	cmp	r3, #0
 8025042:	d114      	bne.n	802506e <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8025044:	68f8      	ldr	r0, [r7, #12]
 8025046:	f000 f845 	bl	80250d4 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 802504a:	68fb      	ldr	r3, [r7, #12]
 802504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8025050:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8025054:	68fb      	ldr	r3, [r7, #12]
 8025056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 802505a:	68fb      	ldr	r3, [r7, #12]
 802505c:	2201      	movs	r2, #1
 802505e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8025062:	68fb      	ldr	r3, [r7, #12]
 8025064:	2200      	movs	r2, #0
 8025066:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 802506a:	2303      	movs	r3, #3
 802506c:	e02d      	b.n	80250ca <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 802506e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8025070:	2b00      	cmp	r3, #0
 8025072:	f47f af11 	bne.w	8024e98 <HAL_SPI_TransmitReceive+0x438>
 8025076:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8025078:	2b00      	cmp	r3, #0
 802507a:	f47f af0d 	bne.w	8024e98 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 802507e:	69bb      	ldr	r3, [r7, #24]
 8025080:	9300      	str	r3, [sp, #0]
 8025082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8025084:	2200      	movs	r2, #0
 8025086:	2108      	movs	r1, #8
 8025088:	68f8      	ldr	r0, [r7, #12]
 802508a:	f000 f8c3 	bl	8025214 <SPI_WaitOnFlagUntilTimeout>
 802508e:	4603      	mov	r3, r0
 8025090:	2b00      	cmp	r3, #0
 8025092:	d007      	beq.n	80250a4 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8025094:	68fb      	ldr	r3, [r7, #12]
 8025096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802509a:	f043 0220 	orr.w	r2, r3, #32
 802509e:	68fb      	ldr	r3, [r7, #12]
 80250a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80250a4:	68f8      	ldr	r0, [r7, #12]
 80250a6:	f000 f815 	bl	80250d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80250aa:	68fb      	ldr	r3, [r7, #12]
 80250ac:	2201      	movs	r2, #1
 80250ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80250b2:	68fb      	ldr	r3, [r7, #12]
 80250b4:	2200      	movs	r2, #0
 80250b6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80250ba:	68fb      	ldr	r3, [r7, #12]
 80250bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80250c0:	2b00      	cmp	r3, #0
 80250c2:	d001      	beq.n	80250c8 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 80250c4:	2301      	movs	r3, #1
 80250c6:	e000      	b.n	80250ca <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 80250c8:	2300      	movs	r3, #0
  }
}
 80250ca:	4618      	mov	r0, r3
 80250cc:	3730      	adds	r7, #48	@ 0x30
 80250ce:	46bd      	mov	sp, r7
 80250d0:	bd80      	pop	{r7, pc}
 80250d2:	bf00      	nop

080250d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80250d4:	b480      	push	{r7}
 80250d6:	b085      	sub	sp, #20
 80250d8:	af00      	add	r7, sp, #0
 80250da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80250dc:	687b      	ldr	r3, [r7, #4]
 80250de:	681b      	ldr	r3, [r3, #0]
 80250e0:	695b      	ldr	r3, [r3, #20]
 80250e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80250e4:	687b      	ldr	r3, [r7, #4]
 80250e6:	681b      	ldr	r3, [r3, #0]
 80250e8:	699a      	ldr	r2, [r3, #24]
 80250ea:	687b      	ldr	r3, [r7, #4]
 80250ec:	681b      	ldr	r3, [r3, #0]
 80250ee:	f042 0208 	orr.w	r2, r2, #8
 80250f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80250f4:	687b      	ldr	r3, [r7, #4]
 80250f6:	681b      	ldr	r3, [r3, #0]
 80250f8:	699a      	ldr	r2, [r3, #24]
 80250fa:	687b      	ldr	r3, [r7, #4]
 80250fc:	681b      	ldr	r3, [r3, #0]
 80250fe:	f042 0210 	orr.w	r2, r2, #16
 8025102:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8025104:	687b      	ldr	r3, [r7, #4]
 8025106:	681b      	ldr	r3, [r3, #0]
 8025108:	681a      	ldr	r2, [r3, #0]
 802510a:	687b      	ldr	r3, [r7, #4]
 802510c:	681b      	ldr	r3, [r3, #0]
 802510e:	f022 0201 	bic.w	r2, r2, #1
 8025112:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8025114:	687b      	ldr	r3, [r7, #4]
 8025116:	681b      	ldr	r3, [r3, #0]
 8025118:	6919      	ldr	r1, [r3, #16]
 802511a:	687b      	ldr	r3, [r7, #4]
 802511c:	681a      	ldr	r2, [r3, #0]
 802511e:	4b3c      	ldr	r3, [pc, #240]	@ (8025210 <SPI_CloseTransfer+0x13c>)
 8025120:	400b      	ands	r3, r1
 8025122:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8025124:	687b      	ldr	r3, [r7, #4]
 8025126:	681b      	ldr	r3, [r3, #0]
 8025128:	689a      	ldr	r2, [r3, #8]
 802512a:	687b      	ldr	r3, [r7, #4]
 802512c:	681b      	ldr	r3, [r3, #0]
 802512e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8025132:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8025134:	687b      	ldr	r3, [r7, #4]
 8025136:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 802513a:	b2db      	uxtb	r3, r3
 802513c:	2b04      	cmp	r3, #4
 802513e:	d014      	beq.n	802516a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8025140:	68fb      	ldr	r3, [r7, #12]
 8025142:	f003 0320 	and.w	r3, r3, #32
 8025146:	2b00      	cmp	r3, #0
 8025148:	d00f      	beq.n	802516a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802514a:	687b      	ldr	r3, [r7, #4]
 802514c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8025150:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8025154:	687b      	ldr	r3, [r7, #4]
 8025156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802515a:	687b      	ldr	r3, [r7, #4]
 802515c:	681b      	ldr	r3, [r3, #0]
 802515e:	699a      	ldr	r2, [r3, #24]
 8025160:	687b      	ldr	r3, [r7, #4]
 8025162:	681b      	ldr	r3, [r3, #0]
 8025164:	f042 0220 	orr.w	r2, r2, #32
 8025168:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802516a:	687b      	ldr	r3, [r7, #4]
 802516c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8025170:	b2db      	uxtb	r3, r3
 8025172:	2b03      	cmp	r3, #3
 8025174:	d014      	beq.n	80251a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8025176:	68fb      	ldr	r3, [r7, #12]
 8025178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802517c:	2b00      	cmp	r3, #0
 802517e:	d00f      	beq.n	80251a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8025180:	687b      	ldr	r3, [r7, #4]
 8025182:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8025186:	f043 0204 	orr.w	r2, r3, #4
 802518a:	687b      	ldr	r3, [r7, #4]
 802518c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8025190:	687b      	ldr	r3, [r7, #4]
 8025192:	681b      	ldr	r3, [r3, #0]
 8025194:	699a      	ldr	r2, [r3, #24]
 8025196:	687b      	ldr	r3, [r7, #4]
 8025198:	681b      	ldr	r3, [r3, #0]
 802519a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802519e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80251a0:	68fb      	ldr	r3, [r7, #12]
 80251a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	d00f      	beq.n	80251ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80251aa:	687b      	ldr	r3, [r7, #4]
 80251ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80251b0:	f043 0201 	orr.w	r2, r3, #1
 80251b4:	687b      	ldr	r3, [r7, #4]
 80251b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80251ba:	687b      	ldr	r3, [r7, #4]
 80251bc:	681b      	ldr	r3, [r3, #0]
 80251be:	699a      	ldr	r2, [r3, #24]
 80251c0:	687b      	ldr	r3, [r7, #4]
 80251c2:	681b      	ldr	r3, [r3, #0]
 80251c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80251c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80251ca:	68fb      	ldr	r3, [r7, #12]
 80251cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80251d0:	2b00      	cmp	r3, #0
 80251d2:	d00f      	beq.n	80251f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80251d4:	687b      	ldr	r3, [r7, #4]
 80251d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80251da:	f043 0208 	orr.w	r2, r3, #8
 80251de:	687b      	ldr	r3, [r7, #4]
 80251e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80251e4:	687b      	ldr	r3, [r7, #4]
 80251e6:	681b      	ldr	r3, [r3, #0]
 80251e8:	699a      	ldr	r2, [r3, #24]
 80251ea:	687b      	ldr	r3, [r7, #4]
 80251ec:	681b      	ldr	r3, [r3, #0]
 80251ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80251f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80251f4:	687b      	ldr	r3, [r7, #4]
 80251f6:	2200      	movs	r2, #0
 80251f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80251fc:	687b      	ldr	r3, [r7, #4]
 80251fe:	2200      	movs	r2, #0
 8025200:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8025204:	bf00      	nop
 8025206:	3714      	adds	r7, #20
 8025208:	46bd      	mov	sp, r7
 802520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802520e:	4770      	bx	lr
 8025210:	fffffc90 	.word	0xfffffc90

08025214 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8025214:	b580      	push	{r7, lr}
 8025216:	b084      	sub	sp, #16
 8025218:	af00      	add	r7, sp, #0
 802521a:	60f8      	str	r0, [r7, #12]
 802521c:	60b9      	str	r1, [r7, #8]
 802521e:	603b      	str	r3, [r7, #0]
 8025220:	4613      	mov	r3, r2
 8025222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8025224:	e010      	b.n	8025248 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8025226:	f7fc f947 	bl	80214b8 <HAL_GetTick>
 802522a:	4602      	mov	r2, r0
 802522c:	69bb      	ldr	r3, [r7, #24]
 802522e:	1ad3      	subs	r3, r2, r3
 8025230:	683a      	ldr	r2, [r7, #0]
 8025232:	429a      	cmp	r2, r3
 8025234:	d803      	bhi.n	802523e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8025236:	683b      	ldr	r3, [r7, #0]
 8025238:	f1b3 3fff 	cmp.w	r3, #4294967295
 802523c:	d102      	bne.n	8025244 <SPI_WaitOnFlagUntilTimeout+0x30>
 802523e:	683b      	ldr	r3, [r7, #0]
 8025240:	2b00      	cmp	r3, #0
 8025242:	d101      	bne.n	8025248 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8025244:	2303      	movs	r3, #3
 8025246:	e00f      	b.n	8025268 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8025248:	68fb      	ldr	r3, [r7, #12]
 802524a:	681b      	ldr	r3, [r3, #0]
 802524c:	695a      	ldr	r2, [r3, #20]
 802524e:	68bb      	ldr	r3, [r7, #8]
 8025250:	4013      	ands	r3, r2
 8025252:	68ba      	ldr	r2, [r7, #8]
 8025254:	429a      	cmp	r2, r3
 8025256:	bf0c      	ite	eq
 8025258:	2301      	moveq	r3, #1
 802525a:	2300      	movne	r3, #0
 802525c:	b2db      	uxtb	r3, r3
 802525e:	461a      	mov	r2, r3
 8025260:	79fb      	ldrb	r3, [r7, #7]
 8025262:	429a      	cmp	r2, r3
 8025264:	d0df      	beq.n	8025226 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8025266:	2300      	movs	r3, #0
}
 8025268:	4618      	mov	r0, r3
 802526a:	3710      	adds	r7, #16
 802526c:	46bd      	mov	sp, r7
 802526e:	bd80      	pop	{r7, pc}

08025270 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8025270:	b480      	push	{r7}
 8025272:	b085      	sub	sp, #20
 8025274:	af00      	add	r7, sp, #0
 8025276:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8025278:	687b      	ldr	r3, [r7, #4]
 802527a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 802527c:	095b      	lsrs	r3, r3, #5
 802527e:	3301      	adds	r3, #1
 8025280:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8025282:	687b      	ldr	r3, [r7, #4]
 8025284:	68db      	ldr	r3, [r3, #12]
 8025286:	3301      	adds	r3, #1
 8025288:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 802528a:	68bb      	ldr	r3, [r7, #8]
 802528c:	3307      	adds	r3, #7
 802528e:	08db      	lsrs	r3, r3, #3
 8025290:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8025292:	68bb      	ldr	r3, [r7, #8]
 8025294:	68fa      	ldr	r2, [r7, #12]
 8025296:	fb02 f303 	mul.w	r3, r2, r3
}
 802529a:	4618      	mov	r0, r3
 802529c:	3714      	adds	r7, #20
 802529e:	46bd      	mov	sp, r7
 80252a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80252a4:	4770      	bx	lr
	...

080252a8 <ExternalMemmoryRun>:
 *      Author: user
 */
#include "ExtMemUseInit.h"
#include "main.h"
void ExternalMemmoryRun(void)
{
 80252a8:	b580      	push	{r7, lr}
 80252aa:	b082      	sub	sp, #8
 80252ac:	af00      	add	r7, sp, #0
   if((OCTOSPI1->CR & OCTOSPI_CR_FMODE_Msk) == OCTOSPI_CR_FMODE)
 80252ae:	4b12      	ldr	r3, [pc, #72]	@ (80252f8 <ExternalMemmoryRun+0x50>)
 80252b0:	681b      	ldr	r3, [r3, #0]
 80252b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80252b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80252ba:	d107      	bne.n	80252cc <ExternalMemmoryRun+0x24>
   {
      __NOP();
 80252bc:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80252be:	f3bf 8f4f 	dsb	sy
}
 80252c2:	bf00      	nop
  __ASM volatile ("cpsie f" : : : "memory");
 80252c4:	b661      	cpsie	f
}
 80252c6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80252c8:	b662      	cpsie	i
}
 80252ca:	e011      	b.n	80252f0 <ExternalMemmoryRun+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80252cc:	b672      	cpsid	i
}
 80252ce:	bf00      	nop
  __ASM volatile ("cpsid f" : : : "memory");
 80252d0:	b671      	cpsid	f
}
 80252d2:	bf00      	nop
   else
   {
      // Go to Bootloader
      __disable_irq();
      __disable_fault_irq();
      void (*app_reset_handler)(void) = (void *)(*((volatile uint32_t *)(BOOTLOADER_ADDRESS + 4U)));
 80252d4:	4b09      	ldr	r3, [pc, #36]	@ (80252fc <ExternalMemmoryRun+0x54>)
 80252d6:	681b      	ldr	r3, [r3, #0]
 80252d8:	607b      	str	r3, [r7, #4]
      __set_MSP(*(volatile uint32_t *)BOOTLOADER_ADDRESS);
 80252da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80252de:	681b      	ldr	r3, [r3, #0]
 80252e0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80252e2:	683b      	ldr	r3, [r7, #0]
 80252e4:	f383 8808 	msr	MSP, r3
}
 80252e8:	bf00      	nop
      app_reset_handler();
 80252ea:	687b      	ldr	r3, [r7, #4]
 80252ec:	4798      	blx	r3
   }
}
 80252ee:	bf00      	nop
 80252f0:	bf00      	nop
 80252f2:	3708      	adds	r7, #8
 80252f4:	46bd      	mov	sp, r7
 80252f6:	bd80      	pop	{r7, pc}
 80252f8:	52005000 	.word	0x52005000
 80252fc:	08000004 	.word	0x08000004

08025300 <ExternalMemoryCopyDataSection>:
void ExternalMemoryCopyDataSection(void)
{
 8025300:	b480      	push	{r7}
 8025302:	b083      	sub	sp, #12
 8025304:	af00      	add	r7, sp, #0
   extern uint8_t _spsram_data;        // Początek PSRAM
   extern uint8_t _epsram_data;        // Koniec PSRAM
   extern uint8_t _sidata_psram_data;  // Dane w FLASH (LOADADDR(.psram_data))
   uint8_t *src = &_sidata_psram_data; // Dane źródłowe w FLASH
 8025306:	4b0c      	ldr	r3, [pc, #48]	@ (8025338 <ExternalMemoryCopyDataSection+0x38>)
 8025308:	607b      	str	r3, [r7, #4]
   uint8_t *dst = &_spsram_data;       // Adres docelowy w PSRAM
 802530a:	4b0c      	ldr	r3, [pc, #48]	@ (802533c <ExternalMemoryCopyDataSection+0x3c>)
 802530c:	603b      	str	r3, [r7, #0]
   while(dst < &_epsram_data)
 802530e:	e007      	b.n	8025320 <ExternalMemoryCopyDataSection+0x20>
   {
      *dst++ = *src++; // Kopiowanie słowo po słowie
 8025310:	687a      	ldr	r2, [r7, #4]
 8025312:	1c53      	adds	r3, r2, #1
 8025314:	607b      	str	r3, [r7, #4]
 8025316:	683b      	ldr	r3, [r7, #0]
 8025318:	1c59      	adds	r1, r3, #1
 802531a:	6039      	str	r1, [r7, #0]
 802531c:	7812      	ldrb	r2, [r2, #0]
 802531e:	701a      	strb	r2, [r3, #0]
   while(dst < &_epsram_data)
 8025320:	683b      	ldr	r3, [r7, #0]
 8025322:	4a07      	ldr	r2, [pc, #28]	@ (8025340 <ExternalMemoryCopyDataSection+0x40>)
 8025324:	4293      	cmp	r3, r2
 8025326:	d3f3      	bcc.n	8025310 <ExternalMemoryCopyDataSection+0x10>
   }
}
 8025328:	bf00      	nop
 802532a:	bf00      	nop
 802532c:	370c      	adds	r7, #12
 802532e:	46bd      	mov	sp, r7
 8025330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8025334:	4770      	bx	lr
 8025336:	bf00      	nop
 8025338:	08029ec8 	.word	0x08029ec8
 802533c:	90000000 	.word	0x90000000
 8025340:	90000000 	.word	0x90000000

08025344 <ExternalMemorySetZeorsInBSSSection>:
void ExternalMemorySetZeorsInBSSSection(void)
{
 8025344:	b480      	push	{r7}
 8025346:	b083      	sub	sp, #12
 8025348:	af00      	add	r7, sp, #0
   extern uint8_t __psram_bss_start__;
   extern uint8_t __psram_bss_end__;
   uint8_t *dst = &__psram_bss_start__;
 802534a:	4b09      	ldr	r3, [pc, #36]	@ (8025370 <ExternalMemorySetZeorsInBSSSection+0x2c>)
 802534c:	607b      	str	r3, [r7, #4]
   while(dst < &__psram_bss_end__)
 802534e:	e004      	b.n	802535a <ExternalMemorySetZeorsInBSSSection+0x16>
   {
      *dst++ = 0; // Zerowanie PSRAM .bss
 8025350:	687b      	ldr	r3, [r7, #4]
 8025352:	1c5a      	adds	r2, r3, #1
 8025354:	607a      	str	r2, [r7, #4]
 8025356:	2200      	movs	r2, #0
 8025358:	701a      	strb	r2, [r3, #0]
   while(dst < &__psram_bss_end__)
 802535a:	687b      	ldr	r3, [r7, #4]
 802535c:	4a05      	ldr	r2, [pc, #20]	@ (8025374 <ExternalMemorySetZeorsInBSSSection+0x30>)
 802535e:	4293      	cmp	r3, r2
 8025360:	d3f6      	bcc.n	8025350 <ExternalMemorySetZeorsInBSSSection+0xc>
   }
}
 8025362:	bf00      	nop
 8025364:	bf00      	nop
 8025366:	370c      	adds	r7, #12
 8025368:	46bd      	mov	sp, r7
 802536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802536e:	4770      	bx	lr
 8025370:	90000000 	.word	0x90000000
 8025374:	90000018 	.word	0x90000018

08025378 <__cvt>:
 8025378:	b5f0      	push	{r4, r5, r6, r7, lr}
 802537a:	ed2d 8b02 	vpush	{d8}
 802537e:	eeb0 8b40 	vmov.f64	d8, d0
 8025382:	b085      	sub	sp, #20
 8025384:	4617      	mov	r7, r2
 8025386:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025388:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802538a:	ee18 2a90 	vmov	r2, s17
 802538e:	f025 0520 	bic.w	r5, r5, #32
 8025392:	2a00      	cmp	r2, #0
 8025394:	bfb6      	itet	lt
 8025396:	222d      	movlt	r2, #45	@ 0x2d
 8025398:	2200      	movge	r2, #0
 802539a:	eeb1 8b40 	vneglt.f64	d8, d0
 802539e:	2d46      	cmp	r5, #70	@ 0x46
 80253a0:	460c      	mov	r4, r1
 80253a2:	701a      	strb	r2, [r3, #0]
 80253a4:	d004      	beq.n	80253b0 <__cvt+0x38>
 80253a6:	2d45      	cmp	r5, #69	@ 0x45
 80253a8:	d100      	bne.n	80253ac <__cvt+0x34>
 80253aa:	3401      	adds	r4, #1
 80253ac:	2102      	movs	r1, #2
 80253ae:	e000      	b.n	80253b2 <__cvt+0x3a>
 80253b0:	2103      	movs	r1, #3
 80253b2:	ab03      	add	r3, sp, #12
 80253b4:	9301      	str	r3, [sp, #4]
 80253b6:	ab02      	add	r3, sp, #8
 80253b8:	9300      	str	r3, [sp, #0]
 80253ba:	4622      	mov	r2, r4
 80253bc:	4633      	mov	r3, r6
 80253be:	eeb0 0b48 	vmov.f64	d0, d8
 80253c2:	f001 f851 	bl	8026468 <_dtoa_r>
 80253c6:	2d47      	cmp	r5, #71	@ 0x47
 80253c8:	d114      	bne.n	80253f4 <__cvt+0x7c>
 80253ca:	07fb      	lsls	r3, r7, #31
 80253cc:	d50a      	bpl.n	80253e4 <__cvt+0x6c>
 80253ce:	1902      	adds	r2, r0, r4
 80253d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80253d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253d8:	bf08      	it	eq
 80253da:	9203      	streq	r2, [sp, #12]
 80253dc:	2130      	movs	r1, #48	@ 0x30
 80253de:	9b03      	ldr	r3, [sp, #12]
 80253e0:	4293      	cmp	r3, r2
 80253e2:	d319      	bcc.n	8025418 <__cvt+0xa0>
 80253e4:	9b03      	ldr	r3, [sp, #12]
 80253e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80253e8:	1a1b      	subs	r3, r3, r0
 80253ea:	6013      	str	r3, [r2, #0]
 80253ec:	b005      	add	sp, #20
 80253ee:	ecbd 8b02 	vpop	{d8}
 80253f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80253f4:	2d46      	cmp	r5, #70	@ 0x46
 80253f6:	eb00 0204 	add.w	r2, r0, r4
 80253fa:	d1e9      	bne.n	80253d0 <__cvt+0x58>
 80253fc:	7803      	ldrb	r3, [r0, #0]
 80253fe:	2b30      	cmp	r3, #48	@ 0x30
 8025400:	d107      	bne.n	8025412 <__cvt+0x9a>
 8025402:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8025406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802540a:	bf1c      	itt	ne
 802540c:	f1c4 0401 	rsbne	r4, r4, #1
 8025410:	6034      	strne	r4, [r6, #0]
 8025412:	6833      	ldr	r3, [r6, #0]
 8025414:	441a      	add	r2, r3
 8025416:	e7db      	b.n	80253d0 <__cvt+0x58>
 8025418:	1c5c      	adds	r4, r3, #1
 802541a:	9403      	str	r4, [sp, #12]
 802541c:	7019      	strb	r1, [r3, #0]
 802541e:	e7de      	b.n	80253de <__cvt+0x66>

08025420 <__exponent>:
 8025420:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025422:	2900      	cmp	r1, #0
 8025424:	bfba      	itte	lt
 8025426:	4249      	neglt	r1, r1
 8025428:	232d      	movlt	r3, #45	@ 0x2d
 802542a:	232b      	movge	r3, #43	@ 0x2b
 802542c:	2909      	cmp	r1, #9
 802542e:	7002      	strb	r2, [r0, #0]
 8025430:	7043      	strb	r3, [r0, #1]
 8025432:	dd29      	ble.n	8025488 <__exponent+0x68>
 8025434:	f10d 0307 	add.w	r3, sp, #7
 8025438:	461d      	mov	r5, r3
 802543a:	270a      	movs	r7, #10
 802543c:	461a      	mov	r2, r3
 802543e:	fbb1 f6f7 	udiv	r6, r1, r7
 8025442:	fb07 1416 	mls	r4, r7, r6, r1
 8025446:	3430      	adds	r4, #48	@ 0x30
 8025448:	f802 4c01 	strb.w	r4, [r2, #-1]
 802544c:	460c      	mov	r4, r1
 802544e:	2c63      	cmp	r4, #99	@ 0x63
 8025450:	f103 33ff 	add.w	r3, r3, #4294967295
 8025454:	4631      	mov	r1, r6
 8025456:	dcf1      	bgt.n	802543c <__exponent+0x1c>
 8025458:	3130      	adds	r1, #48	@ 0x30
 802545a:	1e94      	subs	r4, r2, #2
 802545c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8025460:	1c41      	adds	r1, r0, #1
 8025462:	4623      	mov	r3, r4
 8025464:	42ab      	cmp	r3, r5
 8025466:	d30a      	bcc.n	802547e <__exponent+0x5e>
 8025468:	f10d 0309 	add.w	r3, sp, #9
 802546c:	1a9b      	subs	r3, r3, r2
 802546e:	42ac      	cmp	r4, r5
 8025470:	bf88      	it	hi
 8025472:	2300      	movhi	r3, #0
 8025474:	3302      	adds	r3, #2
 8025476:	4403      	add	r3, r0
 8025478:	1a18      	subs	r0, r3, r0
 802547a:	b003      	add	sp, #12
 802547c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802547e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8025482:	f801 6f01 	strb.w	r6, [r1, #1]!
 8025486:	e7ed      	b.n	8025464 <__exponent+0x44>
 8025488:	2330      	movs	r3, #48	@ 0x30
 802548a:	3130      	adds	r1, #48	@ 0x30
 802548c:	7083      	strb	r3, [r0, #2]
 802548e:	70c1      	strb	r1, [r0, #3]
 8025490:	1d03      	adds	r3, r0, #4
 8025492:	e7f1      	b.n	8025478 <__exponent+0x58>
 8025494:	0000      	movs	r0, r0
	...

08025498 <_printf_float>:
 8025498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802549c:	b08d      	sub	sp, #52	@ 0x34
 802549e:	460c      	mov	r4, r1
 80254a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80254a4:	4616      	mov	r6, r2
 80254a6:	461f      	mov	r7, r3
 80254a8:	4605      	mov	r5, r0
 80254aa:	f000 fed7 	bl	802625c <_localeconv_r>
 80254ae:	f8d0 b000 	ldr.w	fp, [r0]
 80254b2:	4658      	mov	r0, fp
 80254b4:	f7fa ff7c 	bl	80203b0 <strlen>
 80254b8:	2300      	movs	r3, #0
 80254ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80254bc:	f8d8 3000 	ldr.w	r3, [r8]
 80254c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80254c4:	6822      	ldr	r2, [r4, #0]
 80254c6:	9005      	str	r0, [sp, #20]
 80254c8:	3307      	adds	r3, #7
 80254ca:	f023 0307 	bic.w	r3, r3, #7
 80254ce:	f103 0108 	add.w	r1, r3, #8
 80254d2:	f8c8 1000 	str.w	r1, [r8]
 80254d6:	ed93 0b00 	vldr	d0, [r3]
 80254da:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8025738 <_printf_float+0x2a0>
 80254de:	eeb0 7bc0 	vabs.f64	d7, d0
 80254e2:	eeb4 7b46 	vcmp.f64	d7, d6
 80254e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254ea:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80254ee:	dd24      	ble.n	802553a <_printf_float+0xa2>
 80254f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80254f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80254f8:	d502      	bpl.n	8025500 <_printf_float+0x68>
 80254fa:	232d      	movs	r3, #45	@ 0x2d
 80254fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025500:	498f      	ldr	r1, [pc, #572]	@ (8025740 <_printf_float+0x2a8>)
 8025502:	4b90      	ldr	r3, [pc, #576]	@ (8025744 <_printf_float+0x2ac>)
 8025504:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8025508:	bf94      	ite	ls
 802550a:	4688      	movls	r8, r1
 802550c:	4698      	movhi	r8, r3
 802550e:	f022 0204 	bic.w	r2, r2, #4
 8025512:	2303      	movs	r3, #3
 8025514:	6123      	str	r3, [r4, #16]
 8025516:	6022      	str	r2, [r4, #0]
 8025518:	f04f 0a00 	mov.w	sl, #0
 802551c:	9700      	str	r7, [sp, #0]
 802551e:	4633      	mov	r3, r6
 8025520:	aa0b      	add	r2, sp, #44	@ 0x2c
 8025522:	4621      	mov	r1, r4
 8025524:	4628      	mov	r0, r5
 8025526:	f000 f9d1 	bl	80258cc <_printf_common>
 802552a:	3001      	adds	r0, #1
 802552c:	f040 8089 	bne.w	8025642 <_printf_float+0x1aa>
 8025530:	f04f 30ff 	mov.w	r0, #4294967295
 8025534:	b00d      	add	sp, #52	@ 0x34
 8025536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802553a:	eeb4 0b40 	vcmp.f64	d0, d0
 802553e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025542:	d709      	bvc.n	8025558 <_printf_float+0xc0>
 8025544:	ee10 3a90 	vmov	r3, s1
 8025548:	2b00      	cmp	r3, #0
 802554a:	bfbc      	itt	lt
 802554c:	232d      	movlt	r3, #45	@ 0x2d
 802554e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8025552:	497d      	ldr	r1, [pc, #500]	@ (8025748 <_printf_float+0x2b0>)
 8025554:	4b7d      	ldr	r3, [pc, #500]	@ (802574c <_printf_float+0x2b4>)
 8025556:	e7d5      	b.n	8025504 <_printf_float+0x6c>
 8025558:	6863      	ldr	r3, [r4, #4]
 802555a:	1c59      	adds	r1, r3, #1
 802555c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8025560:	d139      	bne.n	80255d6 <_printf_float+0x13e>
 8025562:	2306      	movs	r3, #6
 8025564:	6063      	str	r3, [r4, #4]
 8025566:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 802556a:	2300      	movs	r3, #0
 802556c:	6022      	str	r2, [r4, #0]
 802556e:	9303      	str	r3, [sp, #12]
 8025570:	ab0a      	add	r3, sp, #40	@ 0x28
 8025572:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8025576:	ab09      	add	r3, sp, #36	@ 0x24
 8025578:	9300      	str	r3, [sp, #0]
 802557a:	6861      	ldr	r1, [r4, #4]
 802557c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8025580:	4628      	mov	r0, r5
 8025582:	f7ff fef9 	bl	8025378 <__cvt>
 8025586:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 802558a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802558c:	4680      	mov	r8, r0
 802558e:	d129      	bne.n	80255e4 <_printf_float+0x14c>
 8025590:	1cc8      	adds	r0, r1, #3
 8025592:	db02      	blt.n	802559a <_printf_float+0x102>
 8025594:	6863      	ldr	r3, [r4, #4]
 8025596:	4299      	cmp	r1, r3
 8025598:	dd41      	ble.n	802561e <_printf_float+0x186>
 802559a:	f1a9 0902 	sub.w	r9, r9, #2
 802559e:	fa5f f989 	uxtb.w	r9, r9
 80255a2:	3901      	subs	r1, #1
 80255a4:	464a      	mov	r2, r9
 80255a6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80255aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80255ac:	f7ff ff38 	bl	8025420 <__exponent>
 80255b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80255b2:	1813      	adds	r3, r2, r0
 80255b4:	2a01      	cmp	r2, #1
 80255b6:	4682      	mov	sl, r0
 80255b8:	6123      	str	r3, [r4, #16]
 80255ba:	dc02      	bgt.n	80255c2 <_printf_float+0x12a>
 80255bc:	6822      	ldr	r2, [r4, #0]
 80255be:	07d2      	lsls	r2, r2, #31
 80255c0:	d501      	bpl.n	80255c6 <_printf_float+0x12e>
 80255c2:	3301      	adds	r3, #1
 80255c4:	6123      	str	r3, [r4, #16]
 80255c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80255ca:	2b00      	cmp	r3, #0
 80255cc:	d0a6      	beq.n	802551c <_printf_float+0x84>
 80255ce:	232d      	movs	r3, #45	@ 0x2d
 80255d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80255d4:	e7a2      	b.n	802551c <_printf_float+0x84>
 80255d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80255da:	d1c4      	bne.n	8025566 <_printf_float+0xce>
 80255dc:	2b00      	cmp	r3, #0
 80255de:	d1c2      	bne.n	8025566 <_printf_float+0xce>
 80255e0:	2301      	movs	r3, #1
 80255e2:	e7bf      	b.n	8025564 <_printf_float+0xcc>
 80255e4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80255e8:	d9db      	bls.n	80255a2 <_printf_float+0x10a>
 80255ea:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80255ee:	d118      	bne.n	8025622 <_printf_float+0x18a>
 80255f0:	2900      	cmp	r1, #0
 80255f2:	6863      	ldr	r3, [r4, #4]
 80255f4:	dd0b      	ble.n	802560e <_printf_float+0x176>
 80255f6:	6121      	str	r1, [r4, #16]
 80255f8:	b913      	cbnz	r3, 8025600 <_printf_float+0x168>
 80255fa:	6822      	ldr	r2, [r4, #0]
 80255fc:	07d0      	lsls	r0, r2, #31
 80255fe:	d502      	bpl.n	8025606 <_printf_float+0x16e>
 8025600:	3301      	adds	r3, #1
 8025602:	440b      	add	r3, r1
 8025604:	6123      	str	r3, [r4, #16]
 8025606:	65a1      	str	r1, [r4, #88]	@ 0x58
 8025608:	f04f 0a00 	mov.w	sl, #0
 802560c:	e7db      	b.n	80255c6 <_printf_float+0x12e>
 802560e:	b913      	cbnz	r3, 8025616 <_printf_float+0x17e>
 8025610:	6822      	ldr	r2, [r4, #0]
 8025612:	07d2      	lsls	r2, r2, #31
 8025614:	d501      	bpl.n	802561a <_printf_float+0x182>
 8025616:	3302      	adds	r3, #2
 8025618:	e7f4      	b.n	8025604 <_printf_float+0x16c>
 802561a:	2301      	movs	r3, #1
 802561c:	e7f2      	b.n	8025604 <_printf_float+0x16c>
 802561e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8025622:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025624:	4299      	cmp	r1, r3
 8025626:	db05      	blt.n	8025634 <_printf_float+0x19c>
 8025628:	6823      	ldr	r3, [r4, #0]
 802562a:	6121      	str	r1, [r4, #16]
 802562c:	07d8      	lsls	r0, r3, #31
 802562e:	d5ea      	bpl.n	8025606 <_printf_float+0x16e>
 8025630:	1c4b      	adds	r3, r1, #1
 8025632:	e7e7      	b.n	8025604 <_printf_float+0x16c>
 8025634:	2900      	cmp	r1, #0
 8025636:	bfd4      	ite	le
 8025638:	f1c1 0202 	rsble	r2, r1, #2
 802563c:	2201      	movgt	r2, #1
 802563e:	4413      	add	r3, r2
 8025640:	e7e0      	b.n	8025604 <_printf_float+0x16c>
 8025642:	6823      	ldr	r3, [r4, #0]
 8025644:	055a      	lsls	r2, r3, #21
 8025646:	d407      	bmi.n	8025658 <_printf_float+0x1c0>
 8025648:	6923      	ldr	r3, [r4, #16]
 802564a:	4642      	mov	r2, r8
 802564c:	4631      	mov	r1, r6
 802564e:	4628      	mov	r0, r5
 8025650:	47b8      	blx	r7
 8025652:	3001      	adds	r0, #1
 8025654:	d12a      	bne.n	80256ac <_printf_float+0x214>
 8025656:	e76b      	b.n	8025530 <_printf_float+0x98>
 8025658:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 802565c:	f240 80e0 	bls.w	8025820 <_printf_float+0x388>
 8025660:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8025664:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802566c:	d133      	bne.n	80256d6 <_printf_float+0x23e>
 802566e:	4a38      	ldr	r2, [pc, #224]	@ (8025750 <_printf_float+0x2b8>)
 8025670:	2301      	movs	r3, #1
 8025672:	4631      	mov	r1, r6
 8025674:	4628      	mov	r0, r5
 8025676:	47b8      	blx	r7
 8025678:	3001      	adds	r0, #1
 802567a:	f43f af59 	beq.w	8025530 <_printf_float+0x98>
 802567e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8025682:	4543      	cmp	r3, r8
 8025684:	db02      	blt.n	802568c <_printf_float+0x1f4>
 8025686:	6823      	ldr	r3, [r4, #0]
 8025688:	07d8      	lsls	r0, r3, #31
 802568a:	d50f      	bpl.n	80256ac <_printf_float+0x214>
 802568c:	9b05      	ldr	r3, [sp, #20]
 802568e:	465a      	mov	r2, fp
 8025690:	4631      	mov	r1, r6
 8025692:	4628      	mov	r0, r5
 8025694:	47b8      	blx	r7
 8025696:	3001      	adds	r0, #1
 8025698:	f43f af4a 	beq.w	8025530 <_printf_float+0x98>
 802569c:	f04f 0900 	mov.w	r9, #0
 80256a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80256a4:	f104 0a1a 	add.w	sl, r4, #26
 80256a8:	45c8      	cmp	r8, r9
 80256aa:	dc09      	bgt.n	80256c0 <_printf_float+0x228>
 80256ac:	6823      	ldr	r3, [r4, #0]
 80256ae:	079b      	lsls	r3, r3, #30
 80256b0:	f100 8107 	bmi.w	80258c2 <_printf_float+0x42a>
 80256b4:	68e0      	ldr	r0, [r4, #12]
 80256b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80256b8:	4298      	cmp	r0, r3
 80256ba:	bfb8      	it	lt
 80256bc:	4618      	movlt	r0, r3
 80256be:	e739      	b.n	8025534 <_printf_float+0x9c>
 80256c0:	2301      	movs	r3, #1
 80256c2:	4652      	mov	r2, sl
 80256c4:	4631      	mov	r1, r6
 80256c6:	4628      	mov	r0, r5
 80256c8:	47b8      	blx	r7
 80256ca:	3001      	adds	r0, #1
 80256cc:	f43f af30 	beq.w	8025530 <_printf_float+0x98>
 80256d0:	f109 0901 	add.w	r9, r9, #1
 80256d4:	e7e8      	b.n	80256a8 <_printf_float+0x210>
 80256d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256d8:	2b00      	cmp	r3, #0
 80256da:	dc3b      	bgt.n	8025754 <_printf_float+0x2bc>
 80256dc:	4a1c      	ldr	r2, [pc, #112]	@ (8025750 <_printf_float+0x2b8>)
 80256de:	2301      	movs	r3, #1
 80256e0:	4631      	mov	r1, r6
 80256e2:	4628      	mov	r0, r5
 80256e4:	47b8      	blx	r7
 80256e6:	3001      	adds	r0, #1
 80256e8:	f43f af22 	beq.w	8025530 <_printf_float+0x98>
 80256ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80256f0:	ea59 0303 	orrs.w	r3, r9, r3
 80256f4:	d102      	bne.n	80256fc <_printf_float+0x264>
 80256f6:	6823      	ldr	r3, [r4, #0]
 80256f8:	07d9      	lsls	r1, r3, #31
 80256fa:	d5d7      	bpl.n	80256ac <_printf_float+0x214>
 80256fc:	9b05      	ldr	r3, [sp, #20]
 80256fe:	465a      	mov	r2, fp
 8025700:	4631      	mov	r1, r6
 8025702:	4628      	mov	r0, r5
 8025704:	47b8      	blx	r7
 8025706:	3001      	adds	r0, #1
 8025708:	f43f af12 	beq.w	8025530 <_printf_float+0x98>
 802570c:	f04f 0a00 	mov.w	sl, #0
 8025710:	f104 0b1a 	add.w	fp, r4, #26
 8025714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025716:	425b      	negs	r3, r3
 8025718:	4553      	cmp	r3, sl
 802571a:	dc01      	bgt.n	8025720 <_printf_float+0x288>
 802571c:	464b      	mov	r3, r9
 802571e:	e794      	b.n	802564a <_printf_float+0x1b2>
 8025720:	2301      	movs	r3, #1
 8025722:	465a      	mov	r2, fp
 8025724:	4631      	mov	r1, r6
 8025726:	4628      	mov	r0, r5
 8025728:	47b8      	blx	r7
 802572a:	3001      	adds	r0, #1
 802572c:	f43f af00 	beq.w	8025530 <_printf_float+0x98>
 8025730:	f10a 0a01 	add.w	sl, sl, #1
 8025734:	e7ee      	b.n	8025714 <_printf_float+0x27c>
 8025736:	bf00      	nop
 8025738:	ffffffff 	.word	0xffffffff
 802573c:	7fefffff 	.word	0x7fefffff
 8025740:	080298b0 	.word	0x080298b0
 8025744:	080298b4 	.word	0x080298b4
 8025748:	080298b8 	.word	0x080298b8
 802574c:	080298bc 	.word	0x080298bc
 8025750:	080298c0 	.word	0x080298c0
 8025754:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8025756:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 802575a:	4553      	cmp	r3, sl
 802575c:	bfa8      	it	ge
 802575e:	4653      	movge	r3, sl
 8025760:	2b00      	cmp	r3, #0
 8025762:	4699      	mov	r9, r3
 8025764:	dc37      	bgt.n	80257d6 <_printf_float+0x33e>
 8025766:	2300      	movs	r3, #0
 8025768:	9307      	str	r3, [sp, #28]
 802576a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802576e:	f104 021a 	add.w	r2, r4, #26
 8025772:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8025774:	9907      	ldr	r1, [sp, #28]
 8025776:	9306      	str	r3, [sp, #24]
 8025778:	eba3 0309 	sub.w	r3, r3, r9
 802577c:	428b      	cmp	r3, r1
 802577e:	dc31      	bgt.n	80257e4 <_printf_float+0x34c>
 8025780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025782:	459a      	cmp	sl, r3
 8025784:	dc3b      	bgt.n	80257fe <_printf_float+0x366>
 8025786:	6823      	ldr	r3, [r4, #0]
 8025788:	07da      	lsls	r2, r3, #31
 802578a:	d438      	bmi.n	80257fe <_printf_float+0x366>
 802578c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802578e:	ebaa 0903 	sub.w	r9, sl, r3
 8025792:	9b06      	ldr	r3, [sp, #24]
 8025794:	ebaa 0303 	sub.w	r3, sl, r3
 8025798:	4599      	cmp	r9, r3
 802579a:	bfa8      	it	ge
 802579c:	4699      	movge	r9, r3
 802579e:	f1b9 0f00 	cmp.w	r9, #0
 80257a2:	dc34      	bgt.n	802580e <_printf_float+0x376>
 80257a4:	f04f 0800 	mov.w	r8, #0
 80257a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80257ac:	f104 0b1a 	add.w	fp, r4, #26
 80257b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257b2:	ebaa 0303 	sub.w	r3, sl, r3
 80257b6:	eba3 0309 	sub.w	r3, r3, r9
 80257ba:	4543      	cmp	r3, r8
 80257bc:	f77f af76 	ble.w	80256ac <_printf_float+0x214>
 80257c0:	2301      	movs	r3, #1
 80257c2:	465a      	mov	r2, fp
 80257c4:	4631      	mov	r1, r6
 80257c6:	4628      	mov	r0, r5
 80257c8:	47b8      	blx	r7
 80257ca:	3001      	adds	r0, #1
 80257cc:	f43f aeb0 	beq.w	8025530 <_printf_float+0x98>
 80257d0:	f108 0801 	add.w	r8, r8, #1
 80257d4:	e7ec      	b.n	80257b0 <_printf_float+0x318>
 80257d6:	4642      	mov	r2, r8
 80257d8:	4631      	mov	r1, r6
 80257da:	4628      	mov	r0, r5
 80257dc:	47b8      	blx	r7
 80257de:	3001      	adds	r0, #1
 80257e0:	d1c1      	bne.n	8025766 <_printf_float+0x2ce>
 80257e2:	e6a5      	b.n	8025530 <_printf_float+0x98>
 80257e4:	2301      	movs	r3, #1
 80257e6:	4631      	mov	r1, r6
 80257e8:	4628      	mov	r0, r5
 80257ea:	9206      	str	r2, [sp, #24]
 80257ec:	47b8      	blx	r7
 80257ee:	3001      	adds	r0, #1
 80257f0:	f43f ae9e 	beq.w	8025530 <_printf_float+0x98>
 80257f4:	9b07      	ldr	r3, [sp, #28]
 80257f6:	9a06      	ldr	r2, [sp, #24]
 80257f8:	3301      	adds	r3, #1
 80257fa:	9307      	str	r3, [sp, #28]
 80257fc:	e7b9      	b.n	8025772 <_printf_float+0x2da>
 80257fe:	9b05      	ldr	r3, [sp, #20]
 8025800:	465a      	mov	r2, fp
 8025802:	4631      	mov	r1, r6
 8025804:	4628      	mov	r0, r5
 8025806:	47b8      	blx	r7
 8025808:	3001      	adds	r0, #1
 802580a:	d1bf      	bne.n	802578c <_printf_float+0x2f4>
 802580c:	e690      	b.n	8025530 <_printf_float+0x98>
 802580e:	9a06      	ldr	r2, [sp, #24]
 8025810:	464b      	mov	r3, r9
 8025812:	4442      	add	r2, r8
 8025814:	4631      	mov	r1, r6
 8025816:	4628      	mov	r0, r5
 8025818:	47b8      	blx	r7
 802581a:	3001      	adds	r0, #1
 802581c:	d1c2      	bne.n	80257a4 <_printf_float+0x30c>
 802581e:	e687      	b.n	8025530 <_printf_float+0x98>
 8025820:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8025824:	f1b9 0f01 	cmp.w	r9, #1
 8025828:	dc01      	bgt.n	802582e <_printf_float+0x396>
 802582a:	07db      	lsls	r3, r3, #31
 802582c:	d536      	bpl.n	802589c <_printf_float+0x404>
 802582e:	2301      	movs	r3, #1
 8025830:	4642      	mov	r2, r8
 8025832:	4631      	mov	r1, r6
 8025834:	4628      	mov	r0, r5
 8025836:	47b8      	blx	r7
 8025838:	3001      	adds	r0, #1
 802583a:	f43f ae79 	beq.w	8025530 <_printf_float+0x98>
 802583e:	9b05      	ldr	r3, [sp, #20]
 8025840:	465a      	mov	r2, fp
 8025842:	4631      	mov	r1, r6
 8025844:	4628      	mov	r0, r5
 8025846:	47b8      	blx	r7
 8025848:	3001      	adds	r0, #1
 802584a:	f43f ae71 	beq.w	8025530 <_printf_float+0x98>
 802584e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8025852:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8025856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802585a:	f109 39ff 	add.w	r9, r9, #4294967295
 802585e:	d018      	beq.n	8025892 <_printf_float+0x3fa>
 8025860:	464b      	mov	r3, r9
 8025862:	f108 0201 	add.w	r2, r8, #1
 8025866:	4631      	mov	r1, r6
 8025868:	4628      	mov	r0, r5
 802586a:	47b8      	blx	r7
 802586c:	3001      	adds	r0, #1
 802586e:	d10c      	bne.n	802588a <_printf_float+0x3f2>
 8025870:	e65e      	b.n	8025530 <_printf_float+0x98>
 8025872:	2301      	movs	r3, #1
 8025874:	465a      	mov	r2, fp
 8025876:	4631      	mov	r1, r6
 8025878:	4628      	mov	r0, r5
 802587a:	47b8      	blx	r7
 802587c:	3001      	adds	r0, #1
 802587e:	f43f ae57 	beq.w	8025530 <_printf_float+0x98>
 8025882:	f108 0801 	add.w	r8, r8, #1
 8025886:	45c8      	cmp	r8, r9
 8025888:	dbf3      	blt.n	8025872 <_printf_float+0x3da>
 802588a:	4653      	mov	r3, sl
 802588c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8025890:	e6dc      	b.n	802564c <_printf_float+0x1b4>
 8025892:	f04f 0800 	mov.w	r8, #0
 8025896:	f104 0b1a 	add.w	fp, r4, #26
 802589a:	e7f4      	b.n	8025886 <_printf_float+0x3ee>
 802589c:	2301      	movs	r3, #1
 802589e:	4642      	mov	r2, r8
 80258a0:	e7e1      	b.n	8025866 <_printf_float+0x3ce>
 80258a2:	2301      	movs	r3, #1
 80258a4:	464a      	mov	r2, r9
 80258a6:	4631      	mov	r1, r6
 80258a8:	4628      	mov	r0, r5
 80258aa:	47b8      	blx	r7
 80258ac:	3001      	adds	r0, #1
 80258ae:	f43f ae3f 	beq.w	8025530 <_printf_float+0x98>
 80258b2:	f108 0801 	add.w	r8, r8, #1
 80258b6:	68e3      	ldr	r3, [r4, #12]
 80258b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80258ba:	1a5b      	subs	r3, r3, r1
 80258bc:	4543      	cmp	r3, r8
 80258be:	dcf0      	bgt.n	80258a2 <_printf_float+0x40a>
 80258c0:	e6f8      	b.n	80256b4 <_printf_float+0x21c>
 80258c2:	f04f 0800 	mov.w	r8, #0
 80258c6:	f104 0919 	add.w	r9, r4, #25
 80258ca:	e7f4      	b.n	80258b6 <_printf_float+0x41e>

080258cc <_printf_common>:
 80258cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80258d0:	4616      	mov	r6, r2
 80258d2:	4698      	mov	r8, r3
 80258d4:	688a      	ldr	r2, [r1, #8]
 80258d6:	690b      	ldr	r3, [r1, #16]
 80258d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80258dc:	4293      	cmp	r3, r2
 80258de:	bfb8      	it	lt
 80258e0:	4613      	movlt	r3, r2
 80258e2:	6033      	str	r3, [r6, #0]
 80258e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80258e8:	4607      	mov	r7, r0
 80258ea:	460c      	mov	r4, r1
 80258ec:	b10a      	cbz	r2, 80258f2 <_printf_common+0x26>
 80258ee:	3301      	adds	r3, #1
 80258f0:	6033      	str	r3, [r6, #0]
 80258f2:	6823      	ldr	r3, [r4, #0]
 80258f4:	0699      	lsls	r1, r3, #26
 80258f6:	bf42      	ittt	mi
 80258f8:	6833      	ldrmi	r3, [r6, #0]
 80258fa:	3302      	addmi	r3, #2
 80258fc:	6033      	strmi	r3, [r6, #0]
 80258fe:	6825      	ldr	r5, [r4, #0]
 8025900:	f015 0506 	ands.w	r5, r5, #6
 8025904:	d106      	bne.n	8025914 <_printf_common+0x48>
 8025906:	f104 0a19 	add.w	sl, r4, #25
 802590a:	68e3      	ldr	r3, [r4, #12]
 802590c:	6832      	ldr	r2, [r6, #0]
 802590e:	1a9b      	subs	r3, r3, r2
 8025910:	42ab      	cmp	r3, r5
 8025912:	dc26      	bgt.n	8025962 <_printf_common+0x96>
 8025914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8025918:	6822      	ldr	r2, [r4, #0]
 802591a:	3b00      	subs	r3, #0
 802591c:	bf18      	it	ne
 802591e:	2301      	movne	r3, #1
 8025920:	0692      	lsls	r2, r2, #26
 8025922:	d42b      	bmi.n	802597c <_printf_common+0xb0>
 8025924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8025928:	4641      	mov	r1, r8
 802592a:	4638      	mov	r0, r7
 802592c:	47c8      	blx	r9
 802592e:	3001      	adds	r0, #1
 8025930:	d01e      	beq.n	8025970 <_printf_common+0xa4>
 8025932:	6823      	ldr	r3, [r4, #0]
 8025934:	6922      	ldr	r2, [r4, #16]
 8025936:	f003 0306 	and.w	r3, r3, #6
 802593a:	2b04      	cmp	r3, #4
 802593c:	bf02      	ittt	eq
 802593e:	68e5      	ldreq	r5, [r4, #12]
 8025940:	6833      	ldreq	r3, [r6, #0]
 8025942:	1aed      	subeq	r5, r5, r3
 8025944:	68a3      	ldr	r3, [r4, #8]
 8025946:	bf0c      	ite	eq
 8025948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802594c:	2500      	movne	r5, #0
 802594e:	4293      	cmp	r3, r2
 8025950:	bfc4      	itt	gt
 8025952:	1a9b      	subgt	r3, r3, r2
 8025954:	18ed      	addgt	r5, r5, r3
 8025956:	2600      	movs	r6, #0
 8025958:	341a      	adds	r4, #26
 802595a:	42b5      	cmp	r5, r6
 802595c:	d11a      	bne.n	8025994 <_printf_common+0xc8>
 802595e:	2000      	movs	r0, #0
 8025960:	e008      	b.n	8025974 <_printf_common+0xa8>
 8025962:	2301      	movs	r3, #1
 8025964:	4652      	mov	r2, sl
 8025966:	4641      	mov	r1, r8
 8025968:	4638      	mov	r0, r7
 802596a:	47c8      	blx	r9
 802596c:	3001      	adds	r0, #1
 802596e:	d103      	bne.n	8025978 <_printf_common+0xac>
 8025970:	f04f 30ff 	mov.w	r0, #4294967295
 8025974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025978:	3501      	adds	r5, #1
 802597a:	e7c6      	b.n	802590a <_printf_common+0x3e>
 802597c:	18e1      	adds	r1, r4, r3
 802597e:	1c5a      	adds	r2, r3, #1
 8025980:	2030      	movs	r0, #48	@ 0x30
 8025982:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025986:	4422      	add	r2, r4
 8025988:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802598c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025990:	3302      	adds	r3, #2
 8025992:	e7c7      	b.n	8025924 <_printf_common+0x58>
 8025994:	2301      	movs	r3, #1
 8025996:	4622      	mov	r2, r4
 8025998:	4641      	mov	r1, r8
 802599a:	4638      	mov	r0, r7
 802599c:	47c8      	blx	r9
 802599e:	3001      	adds	r0, #1
 80259a0:	d0e6      	beq.n	8025970 <_printf_common+0xa4>
 80259a2:	3601      	adds	r6, #1
 80259a4:	e7d9      	b.n	802595a <_printf_common+0x8e>
	...

080259a8 <_printf_i>:
 80259a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80259ac:	7e0f      	ldrb	r7, [r1, #24]
 80259ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80259b0:	2f78      	cmp	r7, #120	@ 0x78
 80259b2:	4691      	mov	r9, r2
 80259b4:	4680      	mov	r8, r0
 80259b6:	460c      	mov	r4, r1
 80259b8:	469a      	mov	sl, r3
 80259ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80259be:	d807      	bhi.n	80259d0 <_printf_i+0x28>
 80259c0:	2f62      	cmp	r7, #98	@ 0x62
 80259c2:	d80a      	bhi.n	80259da <_printf_i+0x32>
 80259c4:	2f00      	cmp	r7, #0
 80259c6:	f000 80d2 	beq.w	8025b6e <_printf_i+0x1c6>
 80259ca:	2f58      	cmp	r7, #88	@ 0x58
 80259cc:	f000 80b9 	beq.w	8025b42 <_printf_i+0x19a>
 80259d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80259d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80259d8:	e03a      	b.n	8025a50 <_printf_i+0xa8>
 80259da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80259de:	2b15      	cmp	r3, #21
 80259e0:	d8f6      	bhi.n	80259d0 <_printf_i+0x28>
 80259e2:	a101      	add	r1, pc, #4	@ (adr r1, 80259e8 <_printf_i+0x40>)
 80259e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80259e8:	08025a41 	.word	0x08025a41
 80259ec:	08025a55 	.word	0x08025a55
 80259f0:	080259d1 	.word	0x080259d1
 80259f4:	080259d1 	.word	0x080259d1
 80259f8:	080259d1 	.word	0x080259d1
 80259fc:	080259d1 	.word	0x080259d1
 8025a00:	08025a55 	.word	0x08025a55
 8025a04:	080259d1 	.word	0x080259d1
 8025a08:	080259d1 	.word	0x080259d1
 8025a0c:	080259d1 	.word	0x080259d1
 8025a10:	080259d1 	.word	0x080259d1
 8025a14:	08025b55 	.word	0x08025b55
 8025a18:	08025a7f 	.word	0x08025a7f
 8025a1c:	08025b0f 	.word	0x08025b0f
 8025a20:	080259d1 	.word	0x080259d1
 8025a24:	080259d1 	.word	0x080259d1
 8025a28:	08025b77 	.word	0x08025b77
 8025a2c:	080259d1 	.word	0x080259d1
 8025a30:	08025a7f 	.word	0x08025a7f
 8025a34:	080259d1 	.word	0x080259d1
 8025a38:	080259d1 	.word	0x080259d1
 8025a3c:	08025b17 	.word	0x08025b17
 8025a40:	6833      	ldr	r3, [r6, #0]
 8025a42:	1d1a      	adds	r2, r3, #4
 8025a44:	681b      	ldr	r3, [r3, #0]
 8025a46:	6032      	str	r2, [r6, #0]
 8025a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025a4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025a50:	2301      	movs	r3, #1
 8025a52:	e09d      	b.n	8025b90 <_printf_i+0x1e8>
 8025a54:	6833      	ldr	r3, [r6, #0]
 8025a56:	6820      	ldr	r0, [r4, #0]
 8025a58:	1d19      	adds	r1, r3, #4
 8025a5a:	6031      	str	r1, [r6, #0]
 8025a5c:	0606      	lsls	r6, r0, #24
 8025a5e:	d501      	bpl.n	8025a64 <_printf_i+0xbc>
 8025a60:	681d      	ldr	r5, [r3, #0]
 8025a62:	e003      	b.n	8025a6c <_printf_i+0xc4>
 8025a64:	0645      	lsls	r5, r0, #25
 8025a66:	d5fb      	bpl.n	8025a60 <_printf_i+0xb8>
 8025a68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025a6c:	2d00      	cmp	r5, #0
 8025a6e:	da03      	bge.n	8025a78 <_printf_i+0xd0>
 8025a70:	232d      	movs	r3, #45	@ 0x2d
 8025a72:	426d      	negs	r5, r5
 8025a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025a78:	4859      	ldr	r0, [pc, #356]	@ (8025be0 <_printf_i+0x238>)
 8025a7a:	230a      	movs	r3, #10
 8025a7c:	e011      	b.n	8025aa2 <_printf_i+0xfa>
 8025a7e:	6821      	ldr	r1, [r4, #0]
 8025a80:	6833      	ldr	r3, [r6, #0]
 8025a82:	0608      	lsls	r0, r1, #24
 8025a84:	f853 5b04 	ldr.w	r5, [r3], #4
 8025a88:	d402      	bmi.n	8025a90 <_printf_i+0xe8>
 8025a8a:	0649      	lsls	r1, r1, #25
 8025a8c:	bf48      	it	mi
 8025a8e:	b2ad      	uxthmi	r5, r5
 8025a90:	2f6f      	cmp	r7, #111	@ 0x6f
 8025a92:	4853      	ldr	r0, [pc, #332]	@ (8025be0 <_printf_i+0x238>)
 8025a94:	6033      	str	r3, [r6, #0]
 8025a96:	bf14      	ite	ne
 8025a98:	230a      	movne	r3, #10
 8025a9a:	2308      	moveq	r3, #8
 8025a9c:	2100      	movs	r1, #0
 8025a9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025aa2:	6866      	ldr	r6, [r4, #4]
 8025aa4:	60a6      	str	r6, [r4, #8]
 8025aa6:	2e00      	cmp	r6, #0
 8025aa8:	bfa2      	ittt	ge
 8025aaa:	6821      	ldrge	r1, [r4, #0]
 8025aac:	f021 0104 	bicge.w	r1, r1, #4
 8025ab0:	6021      	strge	r1, [r4, #0]
 8025ab2:	b90d      	cbnz	r5, 8025ab8 <_printf_i+0x110>
 8025ab4:	2e00      	cmp	r6, #0
 8025ab6:	d04b      	beq.n	8025b50 <_printf_i+0x1a8>
 8025ab8:	4616      	mov	r6, r2
 8025aba:	fbb5 f1f3 	udiv	r1, r5, r3
 8025abe:	fb03 5711 	mls	r7, r3, r1, r5
 8025ac2:	5dc7      	ldrb	r7, [r0, r7]
 8025ac4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025ac8:	462f      	mov	r7, r5
 8025aca:	42bb      	cmp	r3, r7
 8025acc:	460d      	mov	r5, r1
 8025ace:	d9f4      	bls.n	8025aba <_printf_i+0x112>
 8025ad0:	2b08      	cmp	r3, #8
 8025ad2:	d10b      	bne.n	8025aec <_printf_i+0x144>
 8025ad4:	6823      	ldr	r3, [r4, #0]
 8025ad6:	07df      	lsls	r7, r3, #31
 8025ad8:	d508      	bpl.n	8025aec <_printf_i+0x144>
 8025ada:	6923      	ldr	r3, [r4, #16]
 8025adc:	6861      	ldr	r1, [r4, #4]
 8025ade:	4299      	cmp	r1, r3
 8025ae0:	bfde      	ittt	le
 8025ae2:	2330      	movle	r3, #48	@ 0x30
 8025ae4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025ae8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025aec:	1b92      	subs	r2, r2, r6
 8025aee:	6122      	str	r2, [r4, #16]
 8025af0:	f8cd a000 	str.w	sl, [sp]
 8025af4:	464b      	mov	r3, r9
 8025af6:	aa03      	add	r2, sp, #12
 8025af8:	4621      	mov	r1, r4
 8025afa:	4640      	mov	r0, r8
 8025afc:	f7ff fee6 	bl	80258cc <_printf_common>
 8025b00:	3001      	adds	r0, #1
 8025b02:	d14a      	bne.n	8025b9a <_printf_i+0x1f2>
 8025b04:	f04f 30ff 	mov.w	r0, #4294967295
 8025b08:	b004      	add	sp, #16
 8025b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025b0e:	6823      	ldr	r3, [r4, #0]
 8025b10:	f043 0320 	orr.w	r3, r3, #32
 8025b14:	6023      	str	r3, [r4, #0]
 8025b16:	4833      	ldr	r0, [pc, #204]	@ (8025be4 <_printf_i+0x23c>)
 8025b18:	2778      	movs	r7, #120	@ 0x78
 8025b1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025b1e:	6823      	ldr	r3, [r4, #0]
 8025b20:	6831      	ldr	r1, [r6, #0]
 8025b22:	061f      	lsls	r7, r3, #24
 8025b24:	f851 5b04 	ldr.w	r5, [r1], #4
 8025b28:	d402      	bmi.n	8025b30 <_printf_i+0x188>
 8025b2a:	065f      	lsls	r7, r3, #25
 8025b2c:	bf48      	it	mi
 8025b2e:	b2ad      	uxthmi	r5, r5
 8025b30:	6031      	str	r1, [r6, #0]
 8025b32:	07d9      	lsls	r1, r3, #31
 8025b34:	bf44      	itt	mi
 8025b36:	f043 0320 	orrmi.w	r3, r3, #32
 8025b3a:	6023      	strmi	r3, [r4, #0]
 8025b3c:	b11d      	cbz	r5, 8025b46 <_printf_i+0x19e>
 8025b3e:	2310      	movs	r3, #16
 8025b40:	e7ac      	b.n	8025a9c <_printf_i+0xf4>
 8025b42:	4827      	ldr	r0, [pc, #156]	@ (8025be0 <_printf_i+0x238>)
 8025b44:	e7e9      	b.n	8025b1a <_printf_i+0x172>
 8025b46:	6823      	ldr	r3, [r4, #0]
 8025b48:	f023 0320 	bic.w	r3, r3, #32
 8025b4c:	6023      	str	r3, [r4, #0]
 8025b4e:	e7f6      	b.n	8025b3e <_printf_i+0x196>
 8025b50:	4616      	mov	r6, r2
 8025b52:	e7bd      	b.n	8025ad0 <_printf_i+0x128>
 8025b54:	6833      	ldr	r3, [r6, #0]
 8025b56:	6825      	ldr	r5, [r4, #0]
 8025b58:	6961      	ldr	r1, [r4, #20]
 8025b5a:	1d18      	adds	r0, r3, #4
 8025b5c:	6030      	str	r0, [r6, #0]
 8025b5e:	062e      	lsls	r6, r5, #24
 8025b60:	681b      	ldr	r3, [r3, #0]
 8025b62:	d501      	bpl.n	8025b68 <_printf_i+0x1c0>
 8025b64:	6019      	str	r1, [r3, #0]
 8025b66:	e002      	b.n	8025b6e <_printf_i+0x1c6>
 8025b68:	0668      	lsls	r0, r5, #25
 8025b6a:	d5fb      	bpl.n	8025b64 <_printf_i+0x1bc>
 8025b6c:	8019      	strh	r1, [r3, #0]
 8025b6e:	2300      	movs	r3, #0
 8025b70:	6123      	str	r3, [r4, #16]
 8025b72:	4616      	mov	r6, r2
 8025b74:	e7bc      	b.n	8025af0 <_printf_i+0x148>
 8025b76:	6833      	ldr	r3, [r6, #0]
 8025b78:	1d1a      	adds	r2, r3, #4
 8025b7a:	6032      	str	r2, [r6, #0]
 8025b7c:	681e      	ldr	r6, [r3, #0]
 8025b7e:	6862      	ldr	r2, [r4, #4]
 8025b80:	2100      	movs	r1, #0
 8025b82:	4630      	mov	r0, r6
 8025b84:	f7fa fbc4 	bl	8020310 <memchr>
 8025b88:	b108      	cbz	r0, 8025b8e <_printf_i+0x1e6>
 8025b8a:	1b80      	subs	r0, r0, r6
 8025b8c:	6060      	str	r0, [r4, #4]
 8025b8e:	6863      	ldr	r3, [r4, #4]
 8025b90:	6123      	str	r3, [r4, #16]
 8025b92:	2300      	movs	r3, #0
 8025b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025b98:	e7aa      	b.n	8025af0 <_printf_i+0x148>
 8025b9a:	6923      	ldr	r3, [r4, #16]
 8025b9c:	4632      	mov	r2, r6
 8025b9e:	4649      	mov	r1, r9
 8025ba0:	4640      	mov	r0, r8
 8025ba2:	47d0      	blx	sl
 8025ba4:	3001      	adds	r0, #1
 8025ba6:	d0ad      	beq.n	8025b04 <_printf_i+0x15c>
 8025ba8:	6823      	ldr	r3, [r4, #0]
 8025baa:	079b      	lsls	r3, r3, #30
 8025bac:	d413      	bmi.n	8025bd6 <_printf_i+0x22e>
 8025bae:	68e0      	ldr	r0, [r4, #12]
 8025bb0:	9b03      	ldr	r3, [sp, #12]
 8025bb2:	4298      	cmp	r0, r3
 8025bb4:	bfb8      	it	lt
 8025bb6:	4618      	movlt	r0, r3
 8025bb8:	e7a6      	b.n	8025b08 <_printf_i+0x160>
 8025bba:	2301      	movs	r3, #1
 8025bbc:	4632      	mov	r2, r6
 8025bbe:	4649      	mov	r1, r9
 8025bc0:	4640      	mov	r0, r8
 8025bc2:	47d0      	blx	sl
 8025bc4:	3001      	adds	r0, #1
 8025bc6:	d09d      	beq.n	8025b04 <_printf_i+0x15c>
 8025bc8:	3501      	adds	r5, #1
 8025bca:	68e3      	ldr	r3, [r4, #12]
 8025bcc:	9903      	ldr	r1, [sp, #12]
 8025bce:	1a5b      	subs	r3, r3, r1
 8025bd0:	42ab      	cmp	r3, r5
 8025bd2:	dcf2      	bgt.n	8025bba <_printf_i+0x212>
 8025bd4:	e7eb      	b.n	8025bae <_printf_i+0x206>
 8025bd6:	2500      	movs	r5, #0
 8025bd8:	f104 0619 	add.w	r6, r4, #25
 8025bdc:	e7f5      	b.n	8025bca <_printf_i+0x222>
 8025bde:	bf00      	nop
 8025be0:	080298c2 	.word	0x080298c2
 8025be4:	080298d3 	.word	0x080298d3

08025be8 <_scanf_float>:
 8025be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025bec:	b087      	sub	sp, #28
 8025bee:	4617      	mov	r7, r2
 8025bf0:	9303      	str	r3, [sp, #12]
 8025bf2:	688b      	ldr	r3, [r1, #8]
 8025bf4:	1e5a      	subs	r2, r3, #1
 8025bf6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8025bfa:	bf81      	itttt	hi
 8025bfc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8025c00:	eb03 0b05 	addhi.w	fp, r3, r5
 8025c04:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8025c08:	608b      	strhi	r3, [r1, #8]
 8025c0a:	680b      	ldr	r3, [r1, #0]
 8025c0c:	460a      	mov	r2, r1
 8025c0e:	f04f 0500 	mov.w	r5, #0
 8025c12:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8025c16:	f842 3b1c 	str.w	r3, [r2], #28
 8025c1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8025c1e:	4680      	mov	r8, r0
 8025c20:	460c      	mov	r4, r1
 8025c22:	bf98      	it	ls
 8025c24:	f04f 0b00 	movls.w	fp, #0
 8025c28:	9201      	str	r2, [sp, #4]
 8025c2a:	4616      	mov	r6, r2
 8025c2c:	46aa      	mov	sl, r5
 8025c2e:	46a9      	mov	r9, r5
 8025c30:	9502      	str	r5, [sp, #8]
 8025c32:	68a2      	ldr	r2, [r4, #8]
 8025c34:	b152      	cbz	r2, 8025c4c <_scanf_float+0x64>
 8025c36:	683b      	ldr	r3, [r7, #0]
 8025c38:	781b      	ldrb	r3, [r3, #0]
 8025c3a:	2b4e      	cmp	r3, #78	@ 0x4e
 8025c3c:	d864      	bhi.n	8025d08 <_scanf_float+0x120>
 8025c3e:	2b40      	cmp	r3, #64	@ 0x40
 8025c40:	d83c      	bhi.n	8025cbc <_scanf_float+0xd4>
 8025c42:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8025c46:	b2c8      	uxtb	r0, r1
 8025c48:	280e      	cmp	r0, #14
 8025c4a:	d93a      	bls.n	8025cc2 <_scanf_float+0xda>
 8025c4c:	f1b9 0f00 	cmp.w	r9, #0
 8025c50:	d003      	beq.n	8025c5a <_scanf_float+0x72>
 8025c52:	6823      	ldr	r3, [r4, #0]
 8025c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8025c58:	6023      	str	r3, [r4, #0]
 8025c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025c5e:	f1ba 0f01 	cmp.w	sl, #1
 8025c62:	f200 8117 	bhi.w	8025e94 <_scanf_float+0x2ac>
 8025c66:	9b01      	ldr	r3, [sp, #4]
 8025c68:	429e      	cmp	r6, r3
 8025c6a:	f200 8108 	bhi.w	8025e7e <_scanf_float+0x296>
 8025c6e:	2001      	movs	r0, #1
 8025c70:	b007      	add	sp, #28
 8025c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c76:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8025c7a:	2a0d      	cmp	r2, #13
 8025c7c:	d8e6      	bhi.n	8025c4c <_scanf_float+0x64>
 8025c7e:	a101      	add	r1, pc, #4	@ (adr r1, 8025c84 <_scanf_float+0x9c>)
 8025c80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8025c84:	08025dcb 	.word	0x08025dcb
 8025c88:	08025c4d 	.word	0x08025c4d
 8025c8c:	08025c4d 	.word	0x08025c4d
 8025c90:	08025c4d 	.word	0x08025c4d
 8025c94:	08025e2b 	.word	0x08025e2b
 8025c98:	08025e03 	.word	0x08025e03
 8025c9c:	08025c4d 	.word	0x08025c4d
 8025ca0:	08025c4d 	.word	0x08025c4d
 8025ca4:	08025dd9 	.word	0x08025dd9
 8025ca8:	08025c4d 	.word	0x08025c4d
 8025cac:	08025c4d 	.word	0x08025c4d
 8025cb0:	08025c4d 	.word	0x08025c4d
 8025cb4:	08025c4d 	.word	0x08025c4d
 8025cb8:	08025d91 	.word	0x08025d91
 8025cbc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8025cc0:	e7db      	b.n	8025c7a <_scanf_float+0x92>
 8025cc2:	290e      	cmp	r1, #14
 8025cc4:	d8c2      	bhi.n	8025c4c <_scanf_float+0x64>
 8025cc6:	a001      	add	r0, pc, #4	@ (adr r0, 8025ccc <_scanf_float+0xe4>)
 8025cc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8025ccc:	08025d81 	.word	0x08025d81
 8025cd0:	08025c4d 	.word	0x08025c4d
 8025cd4:	08025d81 	.word	0x08025d81
 8025cd8:	08025e17 	.word	0x08025e17
 8025cdc:	08025c4d 	.word	0x08025c4d
 8025ce0:	08025d29 	.word	0x08025d29
 8025ce4:	08025d67 	.word	0x08025d67
 8025ce8:	08025d67 	.word	0x08025d67
 8025cec:	08025d67 	.word	0x08025d67
 8025cf0:	08025d67 	.word	0x08025d67
 8025cf4:	08025d67 	.word	0x08025d67
 8025cf8:	08025d67 	.word	0x08025d67
 8025cfc:	08025d67 	.word	0x08025d67
 8025d00:	08025d67 	.word	0x08025d67
 8025d04:	08025d67 	.word	0x08025d67
 8025d08:	2b6e      	cmp	r3, #110	@ 0x6e
 8025d0a:	d809      	bhi.n	8025d20 <_scanf_float+0x138>
 8025d0c:	2b60      	cmp	r3, #96	@ 0x60
 8025d0e:	d8b2      	bhi.n	8025c76 <_scanf_float+0x8e>
 8025d10:	2b54      	cmp	r3, #84	@ 0x54
 8025d12:	d07b      	beq.n	8025e0c <_scanf_float+0x224>
 8025d14:	2b59      	cmp	r3, #89	@ 0x59
 8025d16:	d199      	bne.n	8025c4c <_scanf_float+0x64>
 8025d18:	2d07      	cmp	r5, #7
 8025d1a:	d197      	bne.n	8025c4c <_scanf_float+0x64>
 8025d1c:	2508      	movs	r5, #8
 8025d1e:	e02c      	b.n	8025d7a <_scanf_float+0x192>
 8025d20:	2b74      	cmp	r3, #116	@ 0x74
 8025d22:	d073      	beq.n	8025e0c <_scanf_float+0x224>
 8025d24:	2b79      	cmp	r3, #121	@ 0x79
 8025d26:	e7f6      	b.n	8025d16 <_scanf_float+0x12e>
 8025d28:	6821      	ldr	r1, [r4, #0]
 8025d2a:	05c8      	lsls	r0, r1, #23
 8025d2c:	d51b      	bpl.n	8025d66 <_scanf_float+0x17e>
 8025d2e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8025d32:	6021      	str	r1, [r4, #0]
 8025d34:	f109 0901 	add.w	r9, r9, #1
 8025d38:	f1bb 0f00 	cmp.w	fp, #0
 8025d3c:	d003      	beq.n	8025d46 <_scanf_float+0x15e>
 8025d3e:	3201      	adds	r2, #1
 8025d40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025d44:	60a2      	str	r2, [r4, #8]
 8025d46:	68a3      	ldr	r3, [r4, #8]
 8025d48:	3b01      	subs	r3, #1
 8025d4a:	60a3      	str	r3, [r4, #8]
 8025d4c:	6923      	ldr	r3, [r4, #16]
 8025d4e:	3301      	adds	r3, #1
 8025d50:	6123      	str	r3, [r4, #16]
 8025d52:	687b      	ldr	r3, [r7, #4]
 8025d54:	3b01      	subs	r3, #1
 8025d56:	2b00      	cmp	r3, #0
 8025d58:	607b      	str	r3, [r7, #4]
 8025d5a:	f340 8087 	ble.w	8025e6c <_scanf_float+0x284>
 8025d5e:	683b      	ldr	r3, [r7, #0]
 8025d60:	3301      	adds	r3, #1
 8025d62:	603b      	str	r3, [r7, #0]
 8025d64:	e765      	b.n	8025c32 <_scanf_float+0x4a>
 8025d66:	eb1a 0105 	adds.w	r1, sl, r5
 8025d6a:	f47f af6f 	bne.w	8025c4c <_scanf_float+0x64>
 8025d6e:	6822      	ldr	r2, [r4, #0]
 8025d70:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8025d74:	6022      	str	r2, [r4, #0]
 8025d76:	460d      	mov	r5, r1
 8025d78:	468a      	mov	sl, r1
 8025d7a:	f806 3b01 	strb.w	r3, [r6], #1
 8025d7e:	e7e2      	b.n	8025d46 <_scanf_float+0x15e>
 8025d80:	6822      	ldr	r2, [r4, #0]
 8025d82:	0610      	lsls	r0, r2, #24
 8025d84:	f57f af62 	bpl.w	8025c4c <_scanf_float+0x64>
 8025d88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8025d8c:	6022      	str	r2, [r4, #0]
 8025d8e:	e7f4      	b.n	8025d7a <_scanf_float+0x192>
 8025d90:	f1ba 0f00 	cmp.w	sl, #0
 8025d94:	d10e      	bne.n	8025db4 <_scanf_float+0x1cc>
 8025d96:	f1b9 0f00 	cmp.w	r9, #0
 8025d9a:	d10e      	bne.n	8025dba <_scanf_float+0x1d2>
 8025d9c:	6822      	ldr	r2, [r4, #0]
 8025d9e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8025da2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8025da6:	d108      	bne.n	8025dba <_scanf_float+0x1d2>
 8025da8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8025dac:	6022      	str	r2, [r4, #0]
 8025dae:	f04f 0a01 	mov.w	sl, #1
 8025db2:	e7e2      	b.n	8025d7a <_scanf_float+0x192>
 8025db4:	f1ba 0f02 	cmp.w	sl, #2
 8025db8:	d055      	beq.n	8025e66 <_scanf_float+0x27e>
 8025dba:	2d01      	cmp	r5, #1
 8025dbc:	d002      	beq.n	8025dc4 <_scanf_float+0x1dc>
 8025dbe:	2d04      	cmp	r5, #4
 8025dc0:	f47f af44 	bne.w	8025c4c <_scanf_float+0x64>
 8025dc4:	3501      	adds	r5, #1
 8025dc6:	b2ed      	uxtb	r5, r5
 8025dc8:	e7d7      	b.n	8025d7a <_scanf_float+0x192>
 8025dca:	f1ba 0f01 	cmp.w	sl, #1
 8025dce:	f47f af3d 	bne.w	8025c4c <_scanf_float+0x64>
 8025dd2:	f04f 0a02 	mov.w	sl, #2
 8025dd6:	e7d0      	b.n	8025d7a <_scanf_float+0x192>
 8025dd8:	b97d      	cbnz	r5, 8025dfa <_scanf_float+0x212>
 8025dda:	f1b9 0f00 	cmp.w	r9, #0
 8025dde:	f47f af38 	bne.w	8025c52 <_scanf_float+0x6a>
 8025de2:	6822      	ldr	r2, [r4, #0]
 8025de4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8025de8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8025dec:	f040 8101 	bne.w	8025ff2 <_scanf_float+0x40a>
 8025df0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8025df4:	6022      	str	r2, [r4, #0]
 8025df6:	2501      	movs	r5, #1
 8025df8:	e7bf      	b.n	8025d7a <_scanf_float+0x192>
 8025dfa:	2d03      	cmp	r5, #3
 8025dfc:	d0e2      	beq.n	8025dc4 <_scanf_float+0x1dc>
 8025dfe:	2d05      	cmp	r5, #5
 8025e00:	e7de      	b.n	8025dc0 <_scanf_float+0x1d8>
 8025e02:	2d02      	cmp	r5, #2
 8025e04:	f47f af22 	bne.w	8025c4c <_scanf_float+0x64>
 8025e08:	2503      	movs	r5, #3
 8025e0a:	e7b6      	b.n	8025d7a <_scanf_float+0x192>
 8025e0c:	2d06      	cmp	r5, #6
 8025e0e:	f47f af1d 	bne.w	8025c4c <_scanf_float+0x64>
 8025e12:	2507      	movs	r5, #7
 8025e14:	e7b1      	b.n	8025d7a <_scanf_float+0x192>
 8025e16:	6822      	ldr	r2, [r4, #0]
 8025e18:	0591      	lsls	r1, r2, #22
 8025e1a:	f57f af17 	bpl.w	8025c4c <_scanf_float+0x64>
 8025e1e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8025e22:	6022      	str	r2, [r4, #0]
 8025e24:	f8cd 9008 	str.w	r9, [sp, #8]
 8025e28:	e7a7      	b.n	8025d7a <_scanf_float+0x192>
 8025e2a:	6822      	ldr	r2, [r4, #0]
 8025e2c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8025e30:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8025e34:	d006      	beq.n	8025e44 <_scanf_float+0x25c>
 8025e36:	0550      	lsls	r0, r2, #21
 8025e38:	f57f af08 	bpl.w	8025c4c <_scanf_float+0x64>
 8025e3c:	f1b9 0f00 	cmp.w	r9, #0
 8025e40:	f000 80d7 	beq.w	8025ff2 <_scanf_float+0x40a>
 8025e44:	0591      	lsls	r1, r2, #22
 8025e46:	bf58      	it	pl
 8025e48:	9902      	ldrpl	r1, [sp, #8]
 8025e4a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8025e4e:	bf58      	it	pl
 8025e50:	eba9 0101 	subpl.w	r1, r9, r1
 8025e54:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8025e58:	bf58      	it	pl
 8025e5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8025e5e:	6022      	str	r2, [r4, #0]
 8025e60:	f04f 0900 	mov.w	r9, #0
 8025e64:	e789      	b.n	8025d7a <_scanf_float+0x192>
 8025e66:	f04f 0a03 	mov.w	sl, #3
 8025e6a:	e786      	b.n	8025d7a <_scanf_float+0x192>
 8025e6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8025e70:	4639      	mov	r1, r7
 8025e72:	4640      	mov	r0, r8
 8025e74:	4798      	blx	r3
 8025e76:	2800      	cmp	r0, #0
 8025e78:	f43f aedb 	beq.w	8025c32 <_scanf_float+0x4a>
 8025e7c:	e6e6      	b.n	8025c4c <_scanf_float+0x64>
 8025e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025e82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025e86:	463a      	mov	r2, r7
 8025e88:	4640      	mov	r0, r8
 8025e8a:	4798      	blx	r3
 8025e8c:	6923      	ldr	r3, [r4, #16]
 8025e8e:	3b01      	subs	r3, #1
 8025e90:	6123      	str	r3, [r4, #16]
 8025e92:	e6e8      	b.n	8025c66 <_scanf_float+0x7e>
 8025e94:	1e6b      	subs	r3, r5, #1
 8025e96:	2b06      	cmp	r3, #6
 8025e98:	d824      	bhi.n	8025ee4 <_scanf_float+0x2fc>
 8025e9a:	2d02      	cmp	r5, #2
 8025e9c:	d836      	bhi.n	8025f0c <_scanf_float+0x324>
 8025e9e:	9b01      	ldr	r3, [sp, #4]
 8025ea0:	429e      	cmp	r6, r3
 8025ea2:	f67f aee4 	bls.w	8025c6e <_scanf_float+0x86>
 8025ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025eae:	463a      	mov	r2, r7
 8025eb0:	4640      	mov	r0, r8
 8025eb2:	4798      	blx	r3
 8025eb4:	6923      	ldr	r3, [r4, #16]
 8025eb6:	3b01      	subs	r3, #1
 8025eb8:	6123      	str	r3, [r4, #16]
 8025eba:	e7f0      	b.n	8025e9e <_scanf_float+0x2b6>
 8025ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025ec0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8025ec4:	463a      	mov	r2, r7
 8025ec6:	4640      	mov	r0, r8
 8025ec8:	4798      	blx	r3
 8025eca:	6923      	ldr	r3, [r4, #16]
 8025ecc:	3b01      	subs	r3, #1
 8025ece:	6123      	str	r3, [r4, #16]
 8025ed0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025ed4:	fa5f fa8a 	uxtb.w	sl, sl
 8025ed8:	f1ba 0f02 	cmp.w	sl, #2
 8025edc:	d1ee      	bne.n	8025ebc <_scanf_float+0x2d4>
 8025ede:	3d03      	subs	r5, #3
 8025ee0:	b2ed      	uxtb	r5, r5
 8025ee2:	1b76      	subs	r6, r6, r5
 8025ee4:	6823      	ldr	r3, [r4, #0]
 8025ee6:	05da      	lsls	r2, r3, #23
 8025ee8:	d530      	bpl.n	8025f4c <_scanf_float+0x364>
 8025eea:	055b      	lsls	r3, r3, #21
 8025eec:	d511      	bpl.n	8025f12 <_scanf_float+0x32a>
 8025eee:	9b01      	ldr	r3, [sp, #4]
 8025ef0:	429e      	cmp	r6, r3
 8025ef2:	f67f aebc 	bls.w	8025c6e <_scanf_float+0x86>
 8025ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025efa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8025efe:	463a      	mov	r2, r7
 8025f00:	4640      	mov	r0, r8
 8025f02:	4798      	blx	r3
 8025f04:	6923      	ldr	r3, [r4, #16]
 8025f06:	3b01      	subs	r3, #1
 8025f08:	6123      	str	r3, [r4, #16]
 8025f0a:	e7f0      	b.n	8025eee <_scanf_float+0x306>
 8025f0c:	46aa      	mov	sl, r5
 8025f0e:	46b3      	mov	fp, r6
 8025f10:	e7de      	b.n	8025ed0 <_scanf_float+0x2e8>
 8025f12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8025f16:	6923      	ldr	r3, [r4, #16]
 8025f18:	2965      	cmp	r1, #101	@ 0x65
 8025f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8025f1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8025f22:	6123      	str	r3, [r4, #16]
 8025f24:	d00c      	beq.n	8025f40 <_scanf_float+0x358>
 8025f26:	2945      	cmp	r1, #69	@ 0x45
 8025f28:	d00a      	beq.n	8025f40 <_scanf_float+0x358>
 8025f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025f2e:	463a      	mov	r2, r7
 8025f30:	4640      	mov	r0, r8
 8025f32:	4798      	blx	r3
 8025f34:	6923      	ldr	r3, [r4, #16]
 8025f36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8025f3a:	3b01      	subs	r3, #1
 8025f3c:	1eb5      	subs	r5, r6, #2
 8025f3e:	6123      	str	r3, [r4, #16]
 8025f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8025f44:	463a      	mov	r2, r7
 8025f46:	4640      	mov	r0, r8
 8025f48:	4798      	blx	r3
 8025f4a:	462e      	mov	r6, r5
 8025f4c:	6822      	ldr	r2, [r4, #0]
 8025f4e:	f012 0210 	ands.w	r2, r2, #16
 8025f52:	d001      	beq.n	8025f58 <_scanf_float+0x370>
 8025f54:	2000      	movs	r0, #0
 8025f56:	e68b      	b.n	8025c70 <_scanf_float+0x88>
 8025f58:	7032      	strb	r2, [r6, #0]
 8025f5a:	6823      	ldr	r3, [r4, #0]
 8025f5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8025f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8025f64:	d11a      	bne.n	8025f9c <_scanf_float+0x3b4>
 8025f66:	9b02      	ldr	r3, [sp, #8]
 8025f68:	454b      	cmp	r3, r9
 8025f6a:	eba3 0209 	sub.w	r2, r3, r9
 8025f6e:	d121      	bne.n	8025fb4 <_scanf_float+0x3cc>
 8025f70:	9901      	ldr	r1, [sp, #4]
 8025f72:	2200      	movs	r2, #0
 8025f74:	4640      	mov	r0, r8
 8025f76:	f002 fb2d 	bl	80285d4 <_strtod_r>
 8025f7a:	9b03      	ldr	r3, [sp, #12]
 8025f7c:	6821      	ldr	r1, [r4, #0]
 8025f7e:	681b      	ldr	r3, [r3, #0]
 8025f80:	f011 0f02 	tst.w	r1, #2
 8025f84:	f103 0204 	add.w	r2, r3, #4
 8025f88:	d01f      	beq.n	8025fca <_scanf_float+0x3e2>
 8025f8a:	9903      	ldr	r1, [sp, #12]
 8025f8c:	600a      	str	r2, [r1, #0]
 8025f8e:	681b      	ldr	r3, [r3, #0]
 8025f90:	ed83 0b00 	vstr	d0, [r3]
 8025f94:	68e3      	ldr	r3, [r4, #12]
 8025f96:	3301      	adds	r3, #1
 8025f98:	60e3      	str	r3, [r4, #12]
 8025f9a:	e7db      	b.n	8025f54 <_scanf_float+0x36c>
 8025f9c:	9b04      	ldr	r3, [sp, #16]
 8025f9e:	2b00      	cmp	r3, #0
 8025fa0:	d0e6      	beq.n	8025f70 <_scanf_float+0x388>
 8025fa2:	9905      	ldr	r1, [sp, #20]
 8025fa4:	230a      	movs	r3, #10
 8025fa6:	3101      	adds	r1, #1
 8025fa8:	4640      	mov	r0, r8
 8025faa:	f002 fb93 	bl	80286d4 <_strtol_r>
 8025fae:	9b04      	ldr	r3, [sp, #16]
 8025fb0:	9e05      	ldr	r6, [sp, #20]
 8025fb2:	1ac2      	subs	r2, r0, r3
 8025fb4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8025fb8:	429e      	cmp	r6, r3
 8025fba:	bf28      	it	cs
 8025fbc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8025fc0:	490d      	ldr	r1, [pc, #52]	@ (8025ff8 <_scanf_float+0x410>)
 8025fc2:	4630      	mov	r0, r6
 8025fc4:	f000 f8de 	bl	8026184 <siprintf>
 8025fc8:	e7d2      	b.n	8025f70 <_scanf_float+0x388>
 8025fca:	f011 0f04 	tst.w	r1, #4
 8025fce:	9903      	ldr	r1, [sp, #12]
 8025fd0:	600a      	str	r2, [r1, #0]
 8025fd2:	d1dc      	bne.n	8025f8e <_scanf_float+0x3a6>
 8025fd4:	eeb4 0b40 	vcmp.f64	d0, d0
 8025fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025fdc:	681d      	ldr	r5, [r3, #0]
 8025fde:	d705      	bvc.n	8025fec <_scanf_float+0x404>
 8025fe0:	4806      	ldr	r0, [pc, #24]	@ (8025ffc <_scanf_float+0x414>)
 8025fe2:	f000 f9b3 	bl	802634c <nanf>
 8025fe6:	ed85 0a00 	vstr	s0, [r5]
 8025fea:	e7d3      	b.n	8025f94 <_scanf_float+0x3ac>
 8025fec:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8025ff0:	e7f9      	b.n	8025fe6 <_scanf_float+0x3fe>
 8025ff2:	f04f 0900 	mov.w	r9, #0
 8025ff6:	e630      	b.n	8025c5a <_scanf_float+0x72>
 8025ff8:	080298e4 	.word	0x080298e4
 8025ffc:	08029c7d 	.word	0x08029c7d

08026000 <std>:
 8026000:	2300      	movs	r3, #0
 8026002:	b510      	push	{r4, lr}
 8026004:	4604      	mov	r4, r0
 8026006:	e9c0 3300 	strd	r3, r3, [r0]
 802600a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802600e:	6083      	str	r3, [r0, #8]
 8026010:	8181      	strh	r1, [r0, #12]
 8026012:	6643      	str	r3, [r0, #100]	@ 0x64
 8026014:	81c2      	strh	r2, [r0, #14]
 8026016:	6183      	str	r3, [r0, #24]
 8026018:	4619      	mov	r1, r3
 802601a:	2208      	movs	r2, #8
 802601c:	305c      	adds	r0, #92	@ 0x5c
 802601e:	f000 f914 	bl	802624a <memset>
 8026022:	4b0d      	ldr	r3, [pc, #52]	@ (8026058 <std+0x58>)
 8026024:	6263      	str	r3, [r4, #36]	@ 0x24
 8026026:	4b0d      	ldr	r3, [pc, #52]	@ (802605c <std+0x5c>)
 8026028:	62a3      	str	r3, [r4, #40]	@ 0x28
 802602a:	4b0d      	ldr	r3, [pc, #52]	@ (8026060 <std+0x60>)
 802602c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802602e:	4b0d      	ldr	r3, [pc, #52]	@ (8026064 <std+0x64>)
 8026030:	6323      	str	r3, [r4, #48]	@ 0x30
 8026032:	4b0d      	ldr	r3, [pc, #52]	@ (8026068 <std+0x68>)
 8026034:	6224      	str	r4, [r4, #32]
 8026036:	429c      	cmp	r4, r3
 8026038:	d006      	beq.n	8026048 <std+0x48>
 802603a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802603e:	4294      	cmp	r4, r2
 8026040:	d002      	beq.n	8026048 <std+0x48>
 8026042:	33d0      	adds	r3, #208	@ 0xd0
 8026044:	429c      	cmp	r4, r3
 8026046:	d105      	bne.n	8026054 <std+0x54>
 8026048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802604c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026050:	f000 b978 	b.w	8026344 <__retarget_lock_init_recursive>
 8026054:	bd10      	pop	{r4, pc}
 8026056:	bf00      	nop
 8026058:	080261c5 	.word	0x080261c5
 802605c:	080261e7 	.word	0x080261e7
 8026060:	0802621f 	.word	0x0802621f
 8026064:	08026243 	.word	0x08026243
 8026068:	240002e0 	.word	0x240002e0

0802606c <stdio_exit_handler>:
 802606c:	4a02      	ldr	r2, [pc, #8]	@ (8026078 <stdio_exit_handler+0xc>)
 802606e:	4903      	ldr	r1, [pc, #12]	@ (802607c <stdio_exit_handler+0x10>)
 8026070:	4803      	ldr	r0, [pc, #12]	@ (8026080 <stdio_exit_handler+0x14>)
 8026072:	f000 b869 	b.w	8026148 <_fwalk_sglue>
 8026076:	bf00      	nop
 8026078:	24000010 	.word	0x24000010
 802607c:	08028a91 	.word	0x08028a91
 8026080:	24000020 	.word	0x24000020

08026084 <cleanup_stdio>:
 8026084:	6841      	ldr	r1, [r0, #4]
 8026086:	4b0c      	ldr	r3, [pc, #48]	@ (80260b8 <cleanup_stdio+0x34>)
 8026088:	4299      	cmp	r1, r3
 802608a:	b510      	push	{r4, lr}
 802608c:	4604      	mov	r4, r0
 802608e:	d001      	beq.n	8026094 <cleanup_stdio+0x10>
 8026090:	f002 fcfe 	bl	8028a90 <_fflush_r>
 8026094:	68a1      	ldr	r1, [r4, #8]
 8026096:	4b09      	ldr	r3, [pc, #36]	@ (80260bc <cleanup_stdio+0x38>)
 8026098:	4299      	cmp	r1, r3
 802609a:	d002      	beq.n	80260a2 <cleanup_stdio+0x1e>
 802609c:	4620      	mov	r0, r4
 802609e:	f002 fcf7 	bl	8028a90 <_fflush_r>
 80260a2:	68e1      	ldr	r1, [r4, #12]
 80260a4:	4b06      	ldr	r3, [pc, #24]	@ (80260c0 <cleanup_stdio+0x3c>)
 80260a6:	4299      	cmp	r1, r3
 80260a8:	d004      	beq.n	80260b4 <cleanup_stdio+0x30>
 80260aa:	4620      	mov	r0, r4
 80260ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80260b0:	f002 bcee 	b.w	8028a90 <_fflush_r>
 80260b4:	bd10      	pop	{r4, pc}
 80260b6:	bf00      	nop
 80260b8:	240002e0 	.word	0x240002e0
 80260bc:	24000348 	.word	0x24000348
 80260c0:	240003b0 	.word	0x240003b0

080260c4 <global_stdio_init.part.0>:
 80260c4:	b510      	push	{r4, lr}
 80260c6:	4b0b      	ldr	r3, [pc, #44]	@ (80260f4 <global_stdio_init.part.0+0x30>)
 80260c8:	4c0b      	ldr	r4, [pc, #44]	@ (80260f8 <global_stdio_init.part.0+0x34>)
 80260ca:	4a0c      	ldr	r2, [pc, #48]	@ (80260fc <global_stdio_init.part.0+0x38>)
 80260cc:	601a      	str	r2, [r3, #0]
 80260ce:	4620      	mov	r0, r4
 80260d0:	2200      	movs	r2, #0
 80260d2:	2104      	movs	r1, #4
 80260d4:	f7ff ff94 	bl	8026000 <std>
 80260d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80260dc:	2201      	movs	r2, #1
 80260de:	2109      	movs	r1, #9
 80260e0:	f7ff ff8e 	bl	8026000 <std>
 80260e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80260e8:	2202      	movs	r2, #2
 80260ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80260ee:	2112      	movs	r1, #18
 80260f0:	f7ff bf86 	b.w	8026000 <std>
 80260f4:	24000418 	.word	0x24000418
 80260f8:	240002e0 	.word	0x240002e0
 80260fc:	0802606d 	.word	0x0802606d

08026100 <__sfp_lock_acquire>:
 8026100:	4801      	ldr	r0, [pc, #4]	@ (8026108 <__sfp_lock_acquire+0x8>)
 8026102:	f000 b920 	b.w	8026346 <__retarget_lock_acquire_recursive>
 8026106:	bf00      	nop
 8026108:	24000421 	.word	0x24000421

0802610c <__sfp_lock_release>:
 802610c:	4801      	ldr	r0, [pc, #4]	@ (8026114 <__sfp_lock_release+0x8>)
 802610e:	f000 b91b 	b.w	8026348 <__retarget_lock_release_recursive>
 8026112:	bf00      	nop
 8026114:	24000421 	.word	0x24000421

08026118 <__sinit>:
 8026118:	b510      	push	{r4, lr}
 802611a:	4604      	mov	r4, r0
 802611c:	f7ff fff0 	bl	8026100 <__sfp_lock_acquire>
 8026120:	6a23      	ldr	r3, [r4, #32]
 8026122:	b11b      	cbz	r3, 802612c <__sinit+0x14>
 8026124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026128:	f7ff bff0 	b.w	802610c <__sfp_lock_release>
 802612c:	4b04      	ldr	r3, [pc, #16]	@ (8026140 <__sinit+0x28>)
 802612e:	6223      	str	r3, [r4, #32]
 8026130:	4b04      	ldr	r3, [pc, #16]	@ (8026144 <__sinit+0x2c>)
 8026132:	681b      	ldr	r3, [r3, #0]
 8026134:	2b00      	cmp	r3, #0
 8026136:	d1f5      	bne.n	8026124 <__sinit+0xc>
 8026138:	f7ff ffc4 	bl	80260c4 <global_stdio_init.part.0>
 802613c:	e7f2      	b.n	8026124 <__sinit+0xc>
 802613e:	bf00      	nop
 8026140:	08026085 	.word	0x08026085
 8026144:	24000418 	.word	0x24000418

08026148 <_fwalk_sglue>:
 8026148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802614c:	4607      	mov	r7, r0
 802614e:	4688      	mov	r8, r1
 8026150:	4614      	mov	r4, r2
 8026152:	2600      	movs	r6, #0
 8026154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026158:	f1b9 0901 	subs.w	r9, r9, #1
 802615c:	d505      	bpl.n	802616a <_fwalk_sglue+0x22>
 802615e:	6824      	ldr	r4, [r4, #0]
 8026160:	2c00      	cmp	r4, #0
 8026162:	d1f7      	bne.n	8026154 <_fwalk_sglue+0xc>
 8026164:	4630      	mov	r0, r6
 8026166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802616a:	89ab      	ldrh	r3, [r5, #12]
 802616c:	2b01      	cmp	r3, #1
 802616e:	d907      	bls.n	8026180 <_fwalk_sglue+0x38>
 8026170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026174:	3301      	adds	r3, #1
 8026176:	d003      	beq.n	8026180 <_fwalk_sglue+0x38>
 8026178:	4629      	mov	r1, r5
 802617a:	4638      	mov	r0, r7
 802617c:	47c0      	blx	r8
 802617e:	4306      	orrs	r6, r0
 8026180:	3568      	adds	r5, #104	@ 0x68
 8026182:	e7e9      	b.n	8026158 <_fwalk_sglue+0x10>

08026184 <siprintf>:
 8026184:	b40e      	push	{r1, r2, r3}
 8026186:	b500      	push	{lr}
 8026188:	b09c      	sub	sp, #112	@ 0x70
 802618a:	ab1d      	add	r3, sp, #116	@ 0x74
 802618c:	9002      	str	r0, [sp, #8]
 802618e:	9006      	str	r0, [sp, #24]
 8026190:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8026194:	4809      	ldr	r0, [pc, #36]	@ (80261bc <siprintf+0x38>)
 8026196:	9107      	str	r1, [sp, #28]
 8026198:	9104      	str	r1, [sp, #16]
 802619a:	4909      	ldr	r1, [pc, #36]	@ (80261c0 <siprintf+0x3c>)
 802619c:	f853 2b04 	ldr.w	r2, [r3], #4
 80261a0:	9105      	str	r1, [sp, #20]
 80261a2:	6800      	ldr	r0, [r0, #0]
 80261a4:	9301      	str	r3, [sp, #4]
 80261a6:	a902      	add	r1, sp, #8
 80261a8:	f002 faf2 	bl	8028790 <_svfiprintf_r>
 80261ac:	9b02      	ldr	r3, [sp, #8]
 80261ae:	2200      	movs	r2, #0
 80261b0:	701a      	strb	r2, [r3, #0]
 80261b2:	b01c      	add	sp, #112	@ 0x70
 80261b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80261b8:	b003      	add	sp, #12
 80261ba:	4770      	bx	lr
 80261bc:	2400001c 	.word	0x2400001c
 80261c0:	ffff0208 	.word	0xffff0208

080261c4 <__sread>:
 80261c4:	b510      	push	{r4, lr}
 80261c6:	460c      	mov	r4, r1
 80261c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261cc:	f000 f86c 	bl	80262a8 <_read_r>
 80261d0:	2800      	cmp	r0, #0
 80261d2:	bfab      	itete	ge
 80261d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80261d6:	89a3      	ldrhlt	r3, [r4, #12]
 80261d8:	181b      	addge	r3, r3, r0
 80261da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80261de:	bfac      	ite	ge
 80261e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80261e2:	81a3      	strhlt	r3, [r4, #12]
 80261e4:	bd10      	pop	{r4, pc}

080261e6 <__swrite>:
 80261e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80261ea:	461f      	mov	r7, r3
 80261ec:	898b      	ldrh	r3, [r1, #12]
 80261ee:	05db      	lsls	r3, r3, #23
 80261f0:	4605      	mov	r5, r0
 80261f2:	460c      	mov	r4, r1
 80261f4:	4616      	mov	r6, r2
 80261f6:	d505      	bpl.n	8026204 <__swrite+0x1e>
 80261f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261fc:	2302      	movs	r3, #2
 80261fe:	2200      	movs	r2, #0
 8026200:	f000 f840 	bl	8026284 <_lseek_r>
 8026204:	89a3      	ldrh	r3, [r4, #12]
 8026206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802620a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802620e:	81a3      	strh	r3, [r4, #12]
 8026210:	4632      	mov	r2, r6
 8026212:	463b      	mov	r3, r7
 8026214:	4628      	mov	r0, r5
 8026216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802621a:	f000 b857 	b.w	80262cc <_write_r>

0802621e <__sseek>:
 802621e:	b510      	push	{r4, lr}
 8026220:	460c      	mov	r4, r1
 8026222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026226:	f000 f82d 	bl	8026284 <_lseek_r>
 802622a:	1c43      	adds	r3, r0, #1
 802622c:	89a3      	ldrh	r3, [r4, #12]
 802622e:	bf15      	itete	ne
 8026230:	6560      	strne	r0, [r4, #84]	@ 0x54
 8026232:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8026236:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802623a:	81a3      	strheq	r3, [r4, #12]
 802623c:	bf18      	it	ne
 802623e:	81a3      	strhne	r3, [r4, #12]
 8026240:	bd10      	pop	{r4, pc}

08026242 <__sclose>:
 8026242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026246:	f000 b80d 	b.w	8026264 <_close_r>

0802624a <memset>:
 802624a:	4402      	add	r2, r0
 802624c:	4603      	mov	r3, r0
 802624e:	4293      	cmp	r3, r2
 8026250:	d100      	bne.n	8026254 <memset+0xa>
 8026252:	4770      	bx	lr
 8026254:	f803 1b01 	strb.w	r1, [r3], #1
 8026258:	e7f9      	b.n	802624e <memset+0x4>
	...

0802625c <_localeconv_r>:
 802625c:	4800      	ldr	r0, [pc, #0]	@ (8026260 <_localeconv_r+0x4>)
 802625e:	4770      	bx	lr
 8026260:	2400015c 	.word	0x2400015c

08026264 <_close_r>:
 8026264:	b538      	push	{r3, r4, r5, lr}
 8026266:	4d06      	ldr	r5, [pc, #24]	@ (8026280 <_close_r+0x1c>)
 8026268:	2300      	movs	r3, #0
 802626a:	4604      	mov	r4, r0
 802626c:	4608      	mov	r0, r1
 802626e:	602b      	str	r3, [r5, #0]
 8026270:	f7fa ff67 	bl	8021142 <_close>
 8026274:	1c43      	adds	r3, r0, #1
 8026276:	d102      	bne.n	802627e <_close_r+0x1a>
 8026278:	682b      	ldr	r3, [r5, #0]
 802627a:	b103      	cbz	r3, 802627e <_close_r+0x1a>
 802627c:	6023      	str	r3, [r4, #0]
 802627e:	bd38      	pop	{r3, r4, r5, pc}
 8026280:	2400041c 	.word	0x2400041c

08026284 <_lseek_r>:
 8026284:	b538      	push	{r3, r4, r5, lr}
 8026286:	4d07      	ldr	r5, [pc, #28]	@ (80262a4 <_lseek_r+0x20>)
 8026288:	4604      	mov	r4, r0
 802628a:	4608      	mov	r0, r1
 802628c:	4611      	mov	r1, r2
 802628e:	2200      	movs	r2, #0
 8026290:	602a      	str	r2, [r5, #0]
 8026292:	461a      	mov	r2, r3
 8026294:	f7fa ff7c 	bl	8021190 <_lseek>
 8026298:	1c43      	adds	r3, r0, #1
 802629a:	d102      	bne.n	80262a2 <_lseek_r+0x1e>
 802629c:	682b      	ldr	r3, [r5, #0]
 802629e:	b103      	cbz	r3, 80262a2 <_lseek_r+0x1e>
 80262a0:	6023      	str	r3, [r4, #0]
 80262a2:	bd38      	pop	{r3, r4, r5, pc}
 80262a4:	2400041c 	.word	0x2400041c

080262a8 <_read_r>:
 80262a8:	b538      	push	{r3, r4, r5, lr}
 80262aa:	4d07      	ldr	r5, [pc, #28]	@ (80262c8 <_read_r+0x20>)
 80262ac:	4604      	mov	r4, r0
 80262ae:	4608      	mov	r0, r1
 80262b0:	4611      	mov	r1, r2
 80262b2:	2200      	movs	r2, #0
 80262b4:	602a      	str	r2, [r5, #0]
 80262b6:	461a      	mov	r2, r3
 80262b8:	f7fa ff0a 	bl	80210d0 <_read>
 80262bc:	1c43      	adds	r3, r0, #1
 80262be:	d102      	bne.n	80262c6 <_read_r+0x1e>
 80262c0:	682b      	ldr	r3, [r5, #0]
 80262c2:	b103      	cbz	r3, 80262c6 <_read_r+0x1e>
 80262c4:	6023      	str	r3, [r4, #0]
 80262c6:	bd38      	pop	{r3, r4, r5, pc}
 80262c8:	2400041c 	.word	0x2400041c

080262cc <_write_r>:
 80262cc:	b538      	push	{r3, r4, r5, lr}
 80262ce:	4d07      	ldr	r5, [pc, #28]	@ (80262ec <_write_r+0x20>)
 80262d0:	4604      	mov	r4, r0
 80262d2:	4608      	mov	r0, r1
 80262d4:	4611      	mov	r1, r2
 80262d6:	2200      	movs	r2, #0
 80262d8:	602a      	str	r2, [r5, #0]
 80262da:	461a      	mov	r2, r3
 80262dc:	f7fa ff15 	bl	802110a <_write>
 80262e0:	1c43      	adds	r3, r0, #1
 80262e2:	d102      	bne.n	80262ea <_write_r+0x1e>
 80262e4:	682b      	ldr	r3, [r5, #0]
 80262e6:	b103      	cbz	r3, 80262ea <_write_r+0x1e>
 80262e8:	6023      	str	r3, [r4, #0]
 80262ea:	bd38      	pop	{r3, r4, r5, pc}
 80262ec:	2400041c 	.word	0x2400041c

080262f0 <__errno>:
 80262f0:	4b01      	ldr	r3, [pc, #4]	@ (80262f8 <__errno+0x8>)
 80262f2:	6818      	ldr	r0, [r3, #0]
 80262f4:	4770      	bx	lr
 80262f6:	bf00      	nop
 80262f8:	2400001c 	.word	0x2400001c

080262fc <__libc_init_array>:
 80262fc:	b570      	push	{r4, r5, r6, lr}
 80262fe:	4d0d      	ldr	r5, [pc, #52]	@ (8026334 <__libc_init_array+0x38>)
 8026300:	4c0d      	ldr	r4, [pc, #52]	@ (8026338 <__libc_init_array+0x3c>)
 8026302:	1b64      	subs	r4, r4, r5
 8026304:	10a4      	asrs	r4, r4, #2
 8026306:	2600      	movs	r6, #0
 8026308:	42a6      	cmp	r6, r4
 802630a:	d109      	bne.n	8026320 <__libc_init_array+0x24>
 802630c:	4d0b      	ldr	r5, [pc, #44]	@ (802633c <__libc_init_array+0x40>)
 802630e:	4c0c      	ldr	r4, [pc, #48]	@ (8026340 <__libc_init_array+0x44>)
 8026310:	f003 fab0 	bl	8029874 <_init>
 8026314:	1b64      	subs	r4, r4, r5
 8026316:	10a4      	asrs	r4, r4, #2
 8026318:	2600      	movs	r6, #0
 802631a:	42a6      	cmp	r6, r4
 802631c:	d105      	bne.n	802632a <__libc_init_array+0x2e>
 802631e:	bd70      	pop	{r4, r5, r6, pc}
 8026320:	f855 3b04 	ldr.w	r3, [r5], #4
 8026324:	4798      	blx	r3
 8026326:	3601      	adds	r6, #1
 8026328:	e7ee      	b.n	8026308 <__libc_init_array+0xc>
 802632a:	f855 3b04 	ldr.w	r3, [r5], #4
 802632e:	4798      	blx	r3
 8026330:	3601      	adds	r6, #1
 8026332:	e7f2      	b.n	802631a <__libc_init_array+0x1e>
 8026334:	08029ce8 	.word	0x08029ce8
 8026338:	08029ce8 	.word	0x08029ce8
 802633c:	08029ce8 	.word	0x08029ce8
 8026340:	08029cec 	.word	0x08029cec

08026344 <__retarget_lock_init_recursive>:
 8026344:	4770      	bx	lr

08026346 <__retarget_lock_acquire_recursive>:
 8026346:	4770      	bx	lr

08026348 <__retarget_lock_release_recursive>:
 8026348:	4770      	bx	lr
	...

0802634c <nanf>:
 802634c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8026354 <nanf+0x8>
 8026350:	4770      	bx	lr
 8026352:	bf00      	nop
 8026354:	7fc00000 	.word	0x7fc00000

08026358 <quorem>:
 8026358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802635c:	6903      	ldr	r3, [r0, #16]
 802635e:	690c      	ldr	r4, [r1, #16]
 8026360:	42a3      	cmp	r3, r4
 8026362:	4607      	mov	r7, r0
 8026364:	db7e      	blt.n	8026464 <quorem+0x10c>
 8026366:	3c01      	subs	r4, #1
 8026368:	f101 0814 	add.w	r8, r1, #20
 802636c:	00a3      	lsls	r3, r4, #2
 802636e:	f100 0514 	add.w	r5, r0, #20
 8026372:	9300      	str	r3, [sp, #0]
 8026374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026378:	9301      	str	r3, [sp, #4]
 802637a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802637e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026382:	3301      	adds	r3, #1
 8026384:	429a      	cmp	r2, r3
 8026386:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802638a:	fbb2 f6f3 	udiv	r6, r2, r3
 802638e:	d32e      	bcc.n	80263ee <quorem+0x96>
 8026390:	f04f 0a00 	mov.w	sl, #0
 8026394:	46c4      	mov	ip, r8
 8026396:	46ae      	mov	lr, r5
 8026398:	46d3      	mov	fp, sl
 802639a:	f85c 3b04 	ldr.w	r3, [ip], #4
 802639e:	b298      	uxth	r0, r3
 80263a0:	fb06 a000 	mla	r0, r6, r0, sl
 80263a4:	0c02      	lsrs	r2, r0, #16
 80263a6:	0c1b      	lsrs	r3, r3, #16
 80263a8:	fb06 2303 	mla	r3, r6, r3, r2
 80263ac:	f8de 2000 	ldr.w	r2, [lr]
 80263b0:	b280      	uxth	r0, r0
 80263b2:	b292      	uxth	r2, r2
 80263b4:	1a12      	subs	r2, r2, r0
 80263b6:	445a      	add	r2, fp
 80263b8:	f8de 0000 	ldr.w	r0, [lr]
 80263bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80263c0:	b29b      	uxth	r3, r3
 80263c2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80263c6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80263ca:	b292      	uxth	r2, r2
 80263cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80263d0:	45e1      	cmp	r9, ip
 80263d2:	f84e 2b04 	str.w	r2, [lr], #4
 80263d6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80263da:	d2de      	bcs.n	802639a <quorem+0x42>
 80263dc:	9b00      	ldr	r3, [sp, #0]
 80263de:	58eb      	ldr	r3, [r5, r3]
 80263e0:	b92b      	cbnz	r3, 80263ee <quorem+0x96>
 80263e2:	9b01      	ldr	r3, [sp, #4]
 80263e4:	3b04      	subs	r3, #4
 80263e6:	429d      	cmp	r5, r3
 80263e8:	461a      	mov	r2, r3
 80263ea:	d32f      	bcc.n	802644c <quorem+0xf4>
 80263ec:	613c      	str	r4, [r7, #16]
 80263ee:	4638      	mov	r0, r7
 80263f0:	f001 f954 	bl	802769c <__mcmp>
 80263f4:	2800      	cmp	r0, #0
 80263f6:	db25      	blt.n	8026444 <quorem+0xec>
 80263f8:	4629      	mov	r1, r5
 80263fa:	2000      	movs	r0, #0
 80263fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8026400:	f8d1 c000 	ldr.w	ip, [r1]
 8026404:	fa1f fe82 	uxth.w	lr, r2
 8026408:	fa1f f38c 	uxth.w	r3, ip
 802640c:	eba3 030e 	sub.w	r3, r3, lr
 8026410:	4403      	add	r3, r0
 8026412:	0c12      	lsrs	r2, r2, #16
 8026414:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8026418:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802641c:	b29b      	uxth	r3, r3
 802641e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026422:	45c1      	cmp	r9, r8
 8026424:	f841 3b04 	str.w	r3, [r1], #4
 8026428:	ea4f 4022 	mov.w	r0, r2, asr #16
 802642c:	d2e6      	bcs.n	80263fc <quorem+0xa4>
 802642e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026432:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026436:	b922      	cbnz	r2, 8026442 <quorem+0xea>
 8026438:	3b04      	subs	r3, #4
 802643a:	429d      	cmp	r5, r3
 802643c:	461a      	mov	r2, r3
 802643e:	d30b      	bcc.n	8026458 <quorem+0x100>
 8026440:	613c      	str	r4, [r7, #16]
 8026442:	3601      	adds	r6, #1
 8026444:	4630      	mov	r0, r6
 8026446:	b003      	add	sp, #12
 8026448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802644c:	6812      	ldr	r2, [r2, #0]
 802644e:	3b04      	subs	r3, #4
 8026450:	2a00      	cmp	r2, #0
 8026452:	d1cb      	bne.n	80263ec <quorem+0x94>
 8026454:	3c01      	subs	r4, #1
 8026456:	e7c6      	b.n	80263e6 <quorem+0x8e>
 8026458:	6812      	ldr	r2, [r2, #0]
 802645a:	3b04      	subs	r3, #4
 802645c:	2a00      	cmp	r2, #0
 802645e:	d1ef      	bne.n	8026440 <quorem+0xe8>
 8026460:	3c01      	subs	r4, #1
 8026462:	e7ea      	b.n	802643a <quorem+0xe2>
 8026464:	2000      	movs	r0, #0
 8026466:	e7ee      	b.n	8026446 <quorem+0xee>

08026468 <_dtoa_r>:
 8026468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802646c:	ed2d 8b02 	vpush	{d8}
 8026470:	69c7      	ldr	r7, [r0, #28]
 8026472:	b091      	sub	sp, #68	@ 0x44
 8026474:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026478:	ec55 4b10 	vmov	r4, r5, d0
 802647c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802647e:	9107      	str	r1, [sp, #28]
 8026480:	4681      	mov	r9, r0
 8026482:	9209      	str	r2, [sp, #36]	@ 0x24
 8026484:	930d      	str	r3, [sp, #52]	@ 0x34
 8026486:	b97f      	cbnz	r7, 80264a8 <_dtoa_r+0x40>
 8026488:	2010      	movs	r0, #16
 802648a:	f000 fd8d 	bl	8026fa8 <malloc>
 802648e:	4602      	mov	r2, r0
 8026490:	f8c9 001c 	str.w	r0, [r9, #28]
 8026494:	b920      	cbnz	r0, 80264a0 <_dtoa_r+0x38>
 8026496:	4ba0      	ldr	r3, [pc, #640]	@ (8026718 <_dtoa_r+0x2b0>)
 8026498:	21ef      	movs	r1, #239	@ 0xef
 802649a:	48a0      	ldr	r0, [pc, #640]	@ (802671c <_dtoa_r+0x2b4>)
 802649c:	f002 fb74 	bl	8028b88 <__assert_func>
 80264a0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80264a4:	6007      	str	r7, [r0, #0]
 80264a6:	60c7      	str	r7, [r0, #12]
 80264a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80264ac:	6819      	ldr	r1, [r3, #0]
 80264ae:	b159      	cbz	r1, 80264c8 <_dtoa_r+0x60>
 80264b0:	685a      	ldr	r2, [r3, #4]
 80264b2:	604a      	str	r2, [r1, #4]
 80264b4:	2301      	movs	r3, #1
 80264b6:	4093      	lsls	r3, r2
 80264b8:	608b      	str	r3, [r1, #8]
 80264ba:	4648      	mov	r0, r9
 80264bc:	f000 fe6a 	bl	8027194 <_Bfree>
 80264c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80264c4:	2200      	movs	r2, #0
 80264c6:	601a      	str	r2, [r3, #0]
 80264c8:	1e2b      	subs	r3, r5, #0
 80264ca:	bfbb      	ittet	lt
 80264cc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80264d0:	9303      	strlt	r3, [sp, #12]
 80264d2:	2300      	movge	r3, #0
 80264d4:	2201      	movlt	r2, #1
 80264d6:	bfac      	ite	ge
 80264d8:	6033      	strge	r3, [r6, #0]
 80264da:	6032      	strlt	r2, [r6, #0]
 80264dc:	4b90      	ldr	r3, [pc, #576]	@ (8026720 <_dtoa_r+0x2b8>)
 80264de:	9e03      	ldr	r6, [sp, #12]
 80264e0:	43b3      	bics	r3, r6
 80264e2:	d110      	bne.n	8026506 <_dtoa_r+0x9e>
 80264e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80264e6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80264ea:	6013      	str	r3, [r2, #0]
 80264ec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80264f0:	4323      	orrs	r3, r4
 80264f2:	f000 84de 	beq.w	8026eb2 <_dtoa_r+0xa4a>
 80264f6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80264f8:	4f8a      	ldr	r7, [pc, #552]	@ (8026724 <_dtoa_r+0x2bc>)
 80264fa:	2b00      	cmp	r3, #0
 80264fc:	f000 84e0 	beq.w	8026ec0 <_dtoa_r+0xa58>
 8026500:	1cfb      	adds	r3, r7, #3
 8026502:	f000 bcdb 	b.w	8026ebc <_dtoa_r+0xa54>
 8026506:	ed9d 8b02 	vldr	d8, [sp, #8]
 802650a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802650e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026512:	d10a      	bne.n	802652a <_dtoa_r+0xc2>
 8026514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026516:	2301      	movs	r3, #1
 8026518:	6013      	str	r3, [r2, #0]
 802651a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802651c:	b113      	cbz	r3, 8026524 <_dtoa_r+0xbc>
 802651e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026520:	4b81      	ldr	r3, [pc, #516]	@ (8026728 <_dtoa_r+0x2c0>)
 8026522:	6013      	str	r3, [r2, #0]
 8026524:	4f81      	ldr	r7, [pc, #516]	@ (802672c <_dtoa_r+0x2c4>)
 8026526:	f000 bccb 	b.w	8026ec0 <_dtoa_r+0xa58>
 802652a:	aa0e      	add	r2, sp, #56	@ 0x38
 802652c:	a90f      	add	r1, sp, #60	@ 0x3c
 802652e:	4648      	mov	r0, r9
 8026530:	eeb0 0b48 	vmov.f64	d0, d8
 8026534:	f001 f9d2 	bl	80278dc <__d2b>
 8026538:	f3c6 530a 	ubfx	r3, r6, #20, #11
 802653c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802653e:	9001      	str	r0, [sp, #4]
 8026540:	2b00      	cmp	r3, #0
 8026542:	d045      	beq.n	80265d0 <_dtoa_r+0x168>
 8026544:	eeb0 7b48 	vmov.f64	d7, d8
 8026548:	ee18 1a90 	vmov	r1, s17
 802654c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8026550:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8026554:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8026558:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802655c:	2500      	movs	r5, #0
 802655e:	ee07 1a90 	vmov	s15, r1
 8026562:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8026566:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8026700 <_dtoa_r+0x298>
 802656a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802656e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8026708 <_dtoa_r+0x2a0>
 8026572:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026576:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8026710 <_dtoa_r+0x2a8>
 802657a:	ee07 3a90 	vmov	s15, r3
 802657e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8026582:	eeb0 7b46 	vmov.f64	d7, d6
 8026586:	eea4 7b05 	vfma.f64	d7, d4, d5
 802658a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802658e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8026592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026596:	ee16 8a90 	vmov	r8, s13
 802659a:	d508      	bpl.n	80265ae <_dtoa_r+0x146>
 802659c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80265a0:	eeb4 6b47 	vcmp.f64	d6, d7
 80265a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265a8:	bf18      	it	ne
 80265aa:	f108 38ff 	addne.w	r8, r8, #4294967295
 80265ae:	f1b8 0f16 	cmp.w	r8, #22
 80265b2:	d82b      	bhi.n	802660c <_dtoa_r+0x1a4>
 80265b4:	495e      	ldr	r1, [pc, #376]	@ (8026730 <_dtoa_r+0x2c8>)
 80265b6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80265ba:	ed91 7b00 	vldr	d7, [r1]
 80265be:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80265c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80265c6:	d501      	bpl.n	80265cc <_dtoa_r+0x164>
 80265c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80265cc:	2100      	movs	r1, #0
 80265ce:	e01e      	b.n	802660e <_dtoa_r+0x1a6>
 80265d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80265d2:	4413      	add	r3, r2
 80265d4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80265d8:	2920      	cmp	r1, #32
 80265da:	bfc1      	itttt	gt
 80265dc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80265e0:	408e      	lslgt	r6, r1
 80265e2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80265e6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80265ea:	bfd6      	itet	le
 80265ec:	f1c1 0120 	rsble	r1, r1, #32
 80265f0:	4331      	orrgt	r1, r6
 80265f2:	fa04 f101 	lslle.w	r1, r4, r1
 80265f6:	ee07 1a90 	vmov	s15, r1
 80265fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80265fe:	3b01      	subs	r3, #1
 8026600:	ee17 1a90 	vmov	r1, s15
 8026604:	2501      	movs	r5, #1
 8026606:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 802660a:	e7a8      	b.n	802655e <_dtoa_r+0xf6>
 802660c:	2101      	movs	r1, #1
 802660e:	1ad2      	subs	r2, r2, r3
 8026610:	1e53      	subs	r3, r2, #1
 8026612:	9306      	str	r3, [sp, #24]
 8026614:	bf45      	ittet	mi
 8026616:	f1c2 0301 	rsbmi	r3, r2, #1
 802661a:	9305      	strmi	r3, [sp, #20]
 802661c:	2300      	movpl	r3, #0
 802661e:	2300      	movmi	r3, #0
 8026620:	bf4c      	ite	mi
 8026622:	9306      	strmi	r3, [sp, #24]
 8026624:	9305      	strpl	r3, [sp, #20]
 8026626:	f1b8 0f00 	cmp.w	r8, #0
 802662a:	910c      	str	r1, [sp, #48]	@ 0x30
 802662c:	db18      	blt.n	8026660 <_dtoa_r+0x1f8>
 802662e:	9b06      	ldr	r3, [sp, #24]
 8026630:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8026634:	4443      	add	r3, r8
 8026636:	9306      	str	r3, [sp, #24]
 8026638:	2300      	movs	r3, #0
 802663a:	9a07      	ldr	r2, [sp, #28]
 802663c:	2a09      	cmp	r2, #9
 802663e:	d849      	bhi.n	80266d4 <_dtoa_r+0x26c>
 8026640:	2a05      	cmp	r2, #5
 8026642:	bfc4      	itt	gt
 8026644:	3a04      	subgt	r2, #4
 8026646:	9207      	strgt	r2, [sp, #28]
 8026648:	9a07      	ldr	r2, [sp, #28]
 802664a:	f1a2 0202 	sub.w	r2, r2, #2
 802664e:	bfcc      	ite	gt
 8026650:	2400      	movgt	r4, #0
 8026652:	2401      	movle	r4, #1
 8026654:	2a03      	cmp	r2, #3
 8026656:	d848      	bhi.n	80266ea <_dtoa_r+0x282>
 8026658:	e8df f002 	tbb	[pc, r2]
 802665c:	3a2c2e0b 	.word	0x3a2c2e0b
 8026660:	9b05      	ldr	r3, [sp, #20]
 8026662:	2200      	movs	r2, #0
 8026664:	eba3 0308 	sub.w	r3, r3, r8
 8026668:	9305      	str	r3, [sp, #20]
 802666a:	920a      	str	r2, [sp, #40]	@ 0x28
 802666c:	f1c8 0300 	rsb	r3, r8, #0
 8026670:	e7e3      	b.n	802663a <_dtoa_r+0x1d2>
 8026672:	2200      	movs	r2, #0
 8026674:	9208      	str	r2, [sp, #32]
 8026676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026678:	2a00      	cmp	r2, #0
 802667a:	dc39      	bgt.n	80266f0 <_dtoa_r+0x288>
 802667c:	f04f 0b01 	mov.w	fp, #1
 8026680:	46da      	mov	sl, fp
 8026682:	465a      	mov	r2, fp
 8026684:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8026688:	f8d9 701c 	ldr.w	r7, [r9, #28]
 802668c:	2100      	movs	r1, #0
 802668e:	2004      	movs	r0, #4
 8026690:	f100 0614 	add.w	r6, r0, #20
 8026694:	4296      	cmp	r6, r2
 8026696:	d930      	bls.n	80266fa <_dtoa_r+0x292>
 8026698:	6079      	str	r1, [r7, #4]
 802669a:	4648      	mov	r0, r9
 802669c:	9304      	str	r3, [sp, #16]
 802669e:	f000 fd39 	bl	8027114 <_Balloc>
 80266a2:	9b04      	ldr	r3, [sp, #16]
 80266a4:	4607      	mov	r7, r0
 80266a6:	2800      	cmp	r0, #0
 80266a8:	d146      	bne.n	8026738 <_dtoa_r+0x2d0>
 80266aa:	4b22      	ldr	r3, [pc, #136]	@ (8026734 <_dtoa_r+0x2cc>)
 80266ac:	4602      	mov	r2, r0
 80266ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80266b2:	e6f2      	b.n	802649a <_dtoa_r+0x32>
 80266b4:	2201      	movs	r2, #1
 80266b6:	e7dd      	b.n	8026674 <_dtoa_r+0x20c>
 80266b8:	2200      	movs	r2, #0
 80266ba:	9208      	str	r2, [sp, #32]
 80266bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80266be:	eb08 0b02 	add.w	fp, r8, r2
 80266c2:	f10b 0a01 	add.w	sl, fp, #1
 80266c6:	4652      	mov	r2, sl
 80266c8:	2a01      	cmp	r2, #1
 80266ca:	bfb8      	it	lt
 80266cc:	2201      	movlt	r2, #1
 80266ce:	e7db      	b.n	8026688 <_dtoa_r+0x220>
 80266d0:	2201      	movs	r2, #1
 80266d2:	e7f2      	b.n	80266ba <_dtoa_r+0x252>
 80266d4:	2401      	movs	r4, #1
 80266d6:	2200      	movs	r2, #0
 80266d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80266dc:	f04f 3bff 	mov.w	fp, #4294967295
 80266e0:	2100      	movs	r1, #0
 80266e2:	46da      	mov	sl, fp
 80266e4:	2212      	movs	r2, #18
 80266e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80266e8:	e7ce      	b.n	8026688 <_dtoa_r+0x220>
 80266ea:	2201      	movs	r2, #1
 80266ec:	9208      	str	r2, [sp, #32]
 80266ee:	e7f5      	b.n	80266dc <_dtoa_r+0x274>
 80266f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80266f4:	46da      	mov	sl, fp
 80266f6:	465a      	mov	r2, fp
 80266f8:	e7c6      	b.n	8026688 <_dtoa_r+0x220>
 80266fa:	3101      	adds	r1, #1
 80266fc:	0040      	lsls	r0, r0, #1
 80266fe:	e7c7      	b.n	8026690 <_dtoa_r+0x228>
 8026700:	636f4361 	.word	0x636f4361
 8026704:	3fd287a7 	.word	0x3fd287a7
 8026708:	8b60c8b3 	.word	0x8b60c8b3
 802670c:	3fc68a28 	.word	0x3fc68a28
 8026710:	509f79fb 	.word	0x509f79fb
 8026714:	3fd34413 	.word	0x3fd34413
 8026718:	080298f6 	.word	0x080298f6
 802671c:	0802990d 	.word	0x0802990d
 8026720:	7ff00000 	.word	0x7ff00000
 8026724:	080298f2 	.word	0x080298f2
 8026728:	080298c1 	.word	0x080298c1
 802672c:	080298c0 	.word	0x080298c0
 8026730:	08029a08 	.word	0x08029a08
 8026734:	08029965 	.word	0x08029965
 8026738:	f8d9 201c 	ldr.w	r2, [r9, #28]
 802673c:	f1ba 0f0e 	cmp.w	sl, #14
 8026740:	6010      	str	r0, [r2, #0]
 8026742:	d86f      	bhi.n	8026824 <_dtoa_r+0x3bc>
 8026744:	2c00      	cmp	r4, #0
 8026746:	d06d      	beq.n	8026824 <_dtoa_r+0x3bc>
 8026748:	f1b8 0f00 	cmp.w	r8, #0
 802674c:	f340 80c2 	ble.w	80268d4 <_dtoa_r+0x46c>
 8026750:	4aca      	ldr	r2, [pc, #808]	@ (8026a7c <_dtoa_r+0x614>)
 8026752:	f008 010f 	and.w	r1, r8, #15
 8026756:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802675a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802675e:	ed92 7b00 	vldr	d7, [r2]
 8026762:	ea4f 1128 	mov.w	r1, r8, asr #4
 8026766:	f000 80a9 	beq.w	80268bc <_dtoa_r+0x454>
 802676a:	4ac5      	ldr	r2, [pc, #788]	@ (8026a80 <_dtoa_r+0x618>)
 802676c:	ed92 6b08 	vldr	d6, [r2, #32]
 8026770:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8026774:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026778:	f001 010f 	and.w	r1, r1, #15
 802677c:	2203      	movs	r2, #3
 802677e:	48c0      	ldr	r0, [pc, #768]	@ (8026a80 <_dtoa_r+0x618>)
 8026780:	2900      	cmp	r1, #0
 8026782:	f040 809d 	bne.w	80268c0 <_dtoa_r+0x458>
 8026786:	ed9d 6b02 	vldr	d6, [sp, #8]
 802678a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802678e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026792:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8026794:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026798:	2900      	cmp	r1, #0
 802679a:	f000 80c1 	beq.w	8026920 <_dtoa_r+0x4b8>
 802679e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80267a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80267a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80267aa:	f140 80b9 	bpl.w	8026920 <_dtoa_r+0x4b8>
 80267ae:	f1ba 0f00 	cmp.w	sl, #0
 80267b2:	f000 80b5 	beq.w	8026920 <_dtoa_r+0x4b8>
 80267b6:	f1bb 0f00 	cmp.w	fp, #0
 80267ba:	dd31      	ble.n	8026820 <_dtoa_r+0x3b8>
 80267bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80267c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80267c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80267c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80267cc:	9104      	str	r1, [sp, #16]
 80267ce:	3201      	adds	r2, #1
 80267d0:	465c      	mov	r4, fp
 80267d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80267d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80267da:	ee07 2a90 	vmov	s15, r2
 80267de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80267e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80267e6:	ee15 2a90 	vmov	r2, s11
 80267ea:	ec51 0b15 	vmov	r0, r1, d5
 80267ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80267f2:	2c00      	cmp	r4, #0
 80267f4:	f040 8098 	bne.w	8026928 <_dtoa_r+0x4c0>
 80267f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80267fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8026800:	ec41 0b17 	vmov	d7, r0, r1
 8026804:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802680c:	f300 8261 	bgt.w	8026cd2 <_dtoa_r+0x86a>
 8026810:	eeb1 7b47 	vneg.f64	d7, d7
 8026814:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802681c:	f100 80f5 	bmi.w	8026a0a <_dtoa_r+0x5a2>
 8026820:	ed8d 8b02 	vstr	d8, [sp, #8]
 8026824:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8026826:	2a00      	cmp	r2, #0
 8026828:	f2c0 812c 	blt.w	8026a84 <_dtoa_r+0x61c>
 802682c:	f1b8 0f0e 	cmp.w	r8, #14
 8026830:	f300 8128 	bgt.w	8026a84 <_dtoa_r+0x61c>
 8026834:	4b91      	ldr	r3, [pc, #580]	@ (8026a7c <_dtoa_r+0x614>)
 8026836:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802683a:	ed93 6b00 	vldr	d6, [r3]
 802683e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026840:	2b00      	cmp	r3, #0
 8026842:	da03      	bge.n	802684c <_dtoa_r+0x3e4>
 8026844:	f1ba 0f00 	cmp.w	sl, #0
 8026848:	f340 80d2 	ble.w	80269f0 <_dtoa_r+0x588>
 802684c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8026850:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026854:	463e      	mov	r6, r7
 8026856:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802685a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802685e:	ee15 3a10 	vmov	r3, s10
 8026862:	3330      	adds	r3, #48	@ 0x30
 8026864:	f806 3b01 	strb.w	r3, [r6], #1
 8026868:	1bf3      	subs	r3, r6, r7
 802686a:	459a      	cmp	sl, r3
 802686c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8026870:	eea3 7b46 	vfms.f64	d7, d3, d6
 8026874:	f040 80f8 	bne.w	8026a68 <_dtoa_r+0x600>
 8026878:	ee37 7b07 	vadd.f64	d7, d7, d7
 802687c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026884:	f300 80dd 	bgt.w	8026a42 <_dtoa_r+0x5da>
 8026888:	eeb4 7b46 	vcmp.f64	d7, d6
 802688c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026890:	d104      	bne.n	802689c <_dtoa_r+0x434>
 8026892:	ee15 3a10 	vmov	r3, s10
 8026896:	07db      	lsls	r3, r3, #31
 8026898:	f100 80d3 	bmi.w	8026a42 <_dtoa_r+0x5da>
 802689c:	9901      	ldr	r1, [sp, #4]
 802689e:	4648      	mov	r0, r9
 80268a0:	f000 fc78 	bl	8027194 <_Bfree>
 80268a4:	2300      	movs	r3, #0
 80268a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80268a8:	7033      	strb	r3, [r6, #0]
 80268aa:	f108 0301 	add.w	r3, r8, #1
 80268ae:	6013      	str	r3, [r2, #0]
 80268b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80268b2:	2b00      	cmp	r3, #0
 80268b4:	f000 8304 	beq.w	8026ec0 <_dtoa_r+0xa58>
 80268b8:	601e      	str	r6, [r3, #0]
 80268ba:	e301      	b.n	8026ec0 <_dtoa_r+0xa58>
 80268bc:	2202      	movs	r2, #2
 80268be:	e75e      	b.n	802677e <_dtoa_r+0x316>
 80268c0:	07cc      	lsls	r4, r1, #31
 80268c2:	d504      	bpl.n	80268ce <_dtoa_r+0x466>
 80268c4:	ed90 6b00 	vldr	d6, [r0]
 80268c8:	3201      	adds	r2, #1
 80268ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80268ce:	1049      	asrs	r1, r1, #1
 80268d0:	3008      	adds	r0, #8
 80268d2:	e755      	b.n	8026780 <_dtoa_r+0x318>
 80268d4:	d022      	beq.n	802691c <_dtoa_r+0x4b4>
 80268d6:	f1c8 0100 	rsb	r1, r8, #0
 80268da:	4a68      	ldr	r2, [pc, #416]	@ (8026a7c <_dtoa_r+0x614>)
 80268dc:	f001 000f 	and.w	r0, r1, #15
 80268e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80268e4:	ed92 7b00 	vldr	d7, [r2]
 80268e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80268ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80268f0:	4863      	ldr	r0, [pc, #396]	@ (8026a80 <_dtoa_r+0x618>)
 80268f2:	1109      	asrs	r1, r1, #4
 80268f4:	2400      	movs	r4, #0
 80268f6:	2202      	movs	r2, #2
 80268f8:	b929      	cbnz	r1, 8026906 <_dtoa_r+0x49e>
 80268fa:	2c00      	cmp	r4, #0
 80268fc:	f43f af49 	beq.w	8026792 <_dtoa_r+0x32a>
 8026900:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026904:	e745      	b.n	8026792 <_dtoa_r+0x32a>
 8026906:	07ce      	lsls	r6, r1, #31
 8026908:	d505      	bpl.n	8026916 <_dtoa_r+0x4ae>
 802690a:	ed90 6b00 	vldr	d6, [r0]
 802690e:	3201      	adds	r2, #1
 8026910:	2401      	movs	r4, #1
 8026912:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026916:	1049      	asrs	r1, r1, #1
 8026918:	3008      	adds	r0, #8
 802691a:	e7ed      	b.n	80268f8 <_dtoa_r+0x490>
 802691c:	2202      	movs	r2, #2
 802691e:	e738      	b.n	8026792 <_dtoa_r+0x32a>
 8026920:	f8cd 8010 	str.w	r8, [sp, #16]
 8026924:	4654      	mov	r4, sl
 8026926:	e754      	b.n	80267d2 <_dtoa_r+0x36a>
 8026928:	4a54      	ldr	r2, [pc, #336]	@ (8026a7c <_dtoa_r+0x614>)
 802692a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 802692e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8026932:	9a08      	ldr	r2, [sp, #32]
 8026934:	ec41 0b17 	vmov	d7, r0, r1
 8026938:	443c      	add	r4, r7
 802693a:	b34a      	cbz	r2, 8026990 <_dtoa_r+0x528>
 802693c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8026940:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8026944:	463e      	mov	r6, r7
 8026946:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802694a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802694e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026952:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026956:	ee14 2a90 	vmov	r2, s9
 802695a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 802695e:	3230      	adds	r2, #48	@ 0x30
 8026960:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026964:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802696c:	f806 2b01 	strb.w	r2, [r6], #1
 8026970:	d438      	bmi.n	80269e4 <_dtoa_r+0x57c>
 8026972:	ee32 5b46 	vsub.f64	d5, d2, d6
 8026976:	eeb4 5bc7 	vcmpe.f64	d5, d7
 802697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802697e:	d462      	bmi.n	8026a46 <_dtoa_r+0x5de>
 8026980:	42a6      	cmp	r6, r4
 8026982:	f43f af4d 	beq.w	8026820 <_dtoa_r+0x3b8>
 8026986:	ee27 7b03 	vmul.f64	d7, d7, d3
 802698a:	ee26 6b03 	vmul.f64	d6, d6, d3
 802698e:	e7e0      	b.n	8026952 <_dtoa_r+0x4ea>
 8026990:	4621      	mov	r1, r4
 8026992:	463e      	mov	r6, r7
 8026994:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026998:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 802699c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80269a0:	ee14 2a90 	vmov	r2, s9
 80269a4:	3230      	adds	r2, #48	@ 0x30
 80269a6:	f806 2b01 	strb.w	r2, [r6], #1
 80269aa:	42a6      	cmp	r6, r4
 80269ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80269b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80269b4:	d119      	bne.n	80269ea <_dtoa_r+0x582>
 80269b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80269ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80269be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80269c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269c6:	dc3e      	bgt.n	8026a46 <_dtoa_r+0x5de>
 80269c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80269cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80269d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80269d4:	f57f af24 	bpl.w	8026820 <_dtoa_r+0x3b8>
 80269d8:	460e      	mov	r6, r1
 80269da:	3901      	subs	r1, #1
 80269dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80269e0:	2b30      	cmp	r3, #48	@ 0x30
 80269e2:	d0f9      	beq.n	80269d8 <_dtoa_r+0x570>
 80269e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80269e8:	e758      	b.n	802689c <_dtoa_r+0x434>
 80269ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80269ee:	e7d5      	b.n	802699c <_dtoa_r+0x534>
 80269f0:	d10b      	bne.n	8026a0a <_dtoa_r+0x5a2>
 80269f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80269f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80269fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80269fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a06:	f2c0 8161 	blt.w	8026ccc <_dtoa_r+0x864>
 8026a0a:	2400      	movs	r4, #0
 8026a0c:	4625      	mov	r5, r4
 8026a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026a10:	43db      	mvns	r3, r3
 8026a12:	9304      	str	r3, [sp, #16]
 8026a14:	463e      	mov	r6, r7
 8026a16:	f04f 0800 	mov.w	r8, #0
 8026a1a:	4621      	mov	r1, r4
 8026a1c:	4648      	mov	r0, r9
 8026a1e:	f000 fbb9 	bl	8027194 <_Bfree>
 8026a22:	2d00      	cmp	r5, #0
 8026a24:	d0de      	beq.n	80269e4 <_dtoa_r+0x57c>
 8026a26:	f1b8 0f00 	cmp.w	r8, #0
 8026a2a:	d005      	beq.n	8026a38 <_dtoa_r+0x5d0>
 8026a2c:	45a8      	cmp	r8, r5
 8026a2e:	d003      	beq.n	8026a38 <_dtoa_r+0x5d0>
 8026a30:	4641      	mov	r1, r8
 8026a32:	4648      	mov	r0, r9
 8026a34:	f000 fbae 	bl	8027194 <_Bfree>
 8026a38:	4629      	mov	r1, r5
 8026a3a:	4648      	mov	r0, r9
 8026a3c:	f000 fbaa 	bl	8027194 <_Bfree>
 8026a40:	e7d0      	b.n	80269e4 <_dtoa_r+0x57c>
 8026a42:	f8cd 8010 	str.w	r8, [sp, #16]
 8026a46:	4633      	mov	r3, r6
 8026a48:	461e      	mov	r6, r3
 8026a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026a4e:	2a39      	cmp	r2, #57	@ 0x39
 8026a50:	d106      	bne.n	8026a60 <_dtoa_r+0x5f8>
 8026a52:	429f      	cmp	r7, r3
 8026a54:	d1f8      	bne.n	8026a48 <_dtoa_r+0x5e0>
 8026a56:	9a04      	ldr	r2, [sp, #16]
 8026a58:	3201      	adds	r2, #1
 8026a5a:	9204      	str	r2, [sp, #16]
 8026a5c:	2230      	movs	r2, #48	@ 0x30
 8026a5e:	703a      	strb	r2, [r7, #0]
 8026a60:	781a      	ldrb	r2, [r3, #0]
 8026a62:	3201      	adds	r2, #1
 8026a64:	701a      	strb	r2, [r3, #0]
 8026a66:	e7bd      	b.n	80269e4 <_dtoa_r+0x57c>
 8026a68:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026a6c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026a74:	f47f aeef 	bne.w	8026856 <_dtoa_r+0x3ee>
 8026a78:	e710      	b.n	802689c <_dtoa_r+0x434>
 8026a7a:	bf00      	nop
 8026a7c:	08029a08 	.word	0x08029a08
 8026a80:	080299e0 	.word	0x080299e0
 8026a84:	9908      	ldr	r1, [sp, #32]
 8026a86:	2900      	cmp	r1, #0
 8026a88:	f000 80e3 	beq.w	8026c52 <_dtoa_r+0x7ea>
 8026a8c:	9907      	ldr	r1, [sp, #28]
 8026a8e:	2901      	cmp	r1, #1
 8026a90:	f300 80c8 	bgt.w	8026c24 <_dtoa_r+0x7bc>
 8026a94:	2d00      	cmp	r5, #0
 8026a96:	f000 80c1 	beq.w	8026c1c <_dtoa_r+0x7b4>
 8026a9a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8026a9e:	9e05      	ldr	r6, [sp, #20]
 8026aa0:	461c      	mov	r4, r3
 8026aa2:	9304      	str	r3, [sp, #16]
 8026aa4:	9b05      	ldr	r3, [sp, #20]
 8026aa6:	4413      	add	r3, r2
 8026aa8:	9305      	str	r3, [sp, #20]
 8026aaa:	9b06      	ldr	r3, [sp, #24]
 8026aac:	2101      	movs	r1, #1
 8026aae:	4413      	add	r3, r2
 8026ab0:	4648      	mov	r0, r9
 8026ab2:	9306      	str	r3, [sp, #24]
 8026ab4:	f000 fc6c 	bl	8027390 <__i2b>
 8026ab8:	9b04      	ldr	r3, [sp, #16]
 8026aba:	4605      	mov	r5, r0
 8026abc:	b166      	cbz	r6, 8026ad8 <_dtoa_r+0x670>
 8026abe:	9a06      	ldr	r2, [sp, #24]
 8026ac0:	2a00      	cmp	r2, #0
 8026ac2:	dd09      	ble.n	8026ad8 <_dtoa_r+0x670>
 8026ac4:	42b2      	cmp	r2, r6
 8026ac6:	9905      	ldr	r1, [sp, #20]
 8026ac8:	bfa8      	it	ge
 8026aca:	4632      	movge	r2, r6
 8026acc:	1a89      	subs	r1, r1, r2
 8026ace:	9105      	str	r1, [sp, #20]
 8026ad0:	9906      	ldr	r1, [sp, #24]
 8026ad2:	1ab6      	subs	r6, r6, r2
 8026ad4:	1a8a      	subs	r2, r1, r2
 8026ad6:	9206      	str	r2, [sp, #24]
 8026ad8:	b1fb      	cbz	r3, 8026b1a <_dtoa_r+0x6b2>
 8026ada:	9a08      	ldr	r2, [sp, #32]
 8026adc:	2a00      	cmp	r2, #0
 8026ade:	f000 80bc 	beq.w	8026c5a <_dtoa_r+0x7f2>
 8026ae2:	b19c      	cbz	r4, 8026b0c <_dtoa_r+0x6a4>
 8026ae4:	4629      	mov	r1, r5
 8026ae6:	4622      	mov	r2, r4
 8026ae8:	4648      	mov	r0, r9
 8026aea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026aec:	f000 fd10 	bl	8027510 <__pow5mult>
 8026af0:	9a01      	ldr	r2, [sp, #4]
 8026af2:	4601      	mov	r1, r0
 8026af4:	4605      	mov	r5, r0
 8026af6:	4648      	mov	r0, r9
 8026af8:	f000 fc60 	bl	80273bc <__multiply>
 8026afc:	9901      	ldr	r1, [sp, #4]
 8026afe:	9004      	str	r0, [sp, #16]
 8026b00:	4648      	mov	r0, r9
 8026b02:	f000 fb47 	bl	8027194 <_Bfree>
 8026b06:	9a04      	ldr	r2, [sp, #16]
 8026b08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026b0a:	9201      	str	r2, [sp, #4]
 8026b0c:	1b1a      	subs	r2, r3, r4
 8026b0e:	d004      	beq.n	8026b1a <_dtoa_r+0x6b2>
 8026b10:	9901      	ldr	r1, [sp, #4]
 8026b12:	4648      	mov	r0, r9
 8026b14:	f000 fcfc 	bl	8027510 <__pow5mult>
 8026b18:	9001      	str	r0, [sp, #4]
 8026b1a:	2101      	movs	r1, #1
 8026b1c:	4648      	mov	r0, r9
 8026b1e:	f000 fc37 	bl	8027390 <__i2b>
 8026b22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026b24:	4604      	mov	r4, r0
 8026b26:	2b00      	cmp	r3, #0
 8026b28:	f000 81d0 	beq.w	8026ecc <_dtoa_r+0xa64>
 8026b2c:	461a      	mov	r2, r3
 8026b2e:	4601      	mov	r1, r0
 8026b30:	4648      	mov	r0, r9
 8026b32:	f000 fced 	bl	8027510 <__pow5mult>
 8026b36:	9b07      	ldr	r3, [sp, #28]
 8026b38:	2b01      	cmp	r3, #1
 8026b3a:	4604      	mov	r4, r0
 8026b3c:	f300 8095 	bgt.w	8026c6a <_dtoa_r+0x802>
 8026b40:	9b02      	ldr	r3, [sp, #8]
 8026b42:	2b00      	cmp	r3, #0
 8026b44:	f040 808b 	bne.w	8026c5e <_dtoa_r+0x7f6>
 8026b48:	9b03      	ldr	r3, [sp, #12]
 8026b4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8026b4e:	2a00      	cmp	r2, #0
 8026b50:	f040 8087 	bne.w	8026c62 <_dtoa_r+0x7fa>
 8026b54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8026b58:	0d12      	lsrs	r2, r2, #20
 8026b5a:	0512      	lsls	r2, r2, #20
 8026b5c:	2a00      	cmp	r2, #0
 8026b5e:	f000 8082 	beq.w	8026c66 <_dtoa_r+0x7fe>
 8026b62:	9b05      	ldr	r3, [sp, #20]
 8026b64:	3301      	adds	r3, #1
 8026b66:	9305      	str	r3, [sp, #20]
 8026b68:	9b06      	ldr	r3, [sp, #24]
 8026b6a:	3301      	adds	r3, #1
 8026b6c:	9306      	str	r3, [sp, #24]
 8026b6e:	2301      	movs	r3, #1
 8026b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026b74:	2b00      	cmp	r3, #0
 8026b76:	f000 81af 	beq.w	8026ed8 <_dtoa_r+0xa70>
 8026b7a:	6922      	ldr	r2, [r4, #16]
 8026b7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026b80:	6910      	ldr	r0, [r2, #16]
 8026b82:	f000 fbb9 	bl	80272f8 <__hi0bits>
 8026b86:	f1c0 0020 	rsb	r0, r0, #32
 8026b8a:	9b06      	ldr	r3, [sp, #24]
 8026b8c:	4418      	add	r0, r3
 8026b8e:	f010 001f 	ands.w	r0, r0, #31
 8026b92:	d076      	beq.n	8026c82 <_dtoa_r+0x81a>
 8026b94:	f1c0 0220 	rsb	r2, r0, #32
 8026b98:	2a04      	cmp	r2, #4
 8026b9a:	dd69      	ble.n	8026c70 <_dtoa_r+0x808>
 8026b9c:	9b05      	ldr	r3, [sp, #20]
 8026b9e:	f1c0 001c 	rsb	r0, r0, #28
 8026ba2:	4403      	add	r3, r0
 8026ba4:	9305      	str	r3, [sp, #20]
 8026ba6:	9b06      	ldr	r3, [sp, #24]
 8026ba8:	4406      	add	r6, r0
 8026baa:	4403      	add	r3, r0
 8026bac:	9306      	str	r3, [sp, #24]
 8026bae:	9b05      	ldr	r3, [sp, #20]
 8026bb0:	2b00      	cmp	r3, #0
 8026bb2:	dd05      	ble.n	8026bc0 <_dtoa_r+0x758>
 8026bb4:	9901      	ldr	r1, [sp, #4]
 8026bb6:	461a      	mov	r2, r3
 8026bb8:	4648      	mov	r0, r9
 8026bba:	f000 fd03 	bl	80275c4 <__lshift>
 8026bbe:	9001      	str	r0, [sp, #4]
 8026bc0:	9b06      	ldr	r3, [sp, #24]
 8026bc2:	2b00      	cmp	r3, #0
 8026bc4:	dd05      	ble.n	8026bd2 <_dtoa_r+0x76a>
 8026bc6:	4621      	mov	r1, r4
 8026bc8:	461a      	mov	r2, r3
 8026bca:	4648      	mov	r0, r9
 8026bcc:	f000 fcfa 	bl	80275c4 <__lshift>
 8026bd0:	4604      	mov	r4, r0
 8026bd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026bd4:	2b00      	cmp	r3, #0
 8026bd6:	d056      	beq.n	8026c86 <_dtoa_r+0x81e>
 8026bd8:	9801      	ldr	r0, [sp, #4]
 8026bda:	4621      	mov	r1, r4
 8026bdc:	f000 fd5e 	bl	802769c <__mcmp>
 8026be0:	2800      	cmp	r0, #0
 8026be2:	da50      	bge.n	8026c86 <_dtoa_r+0x81e>
 8026be4:	f108 33ff 	add.w	r3, r8, #4294967295
 8026be8:	9304      	str	r3, [sp, #16]
 8026bea:	9901      	ldr	r1, [sp, #4]
 8026bec:	2300      	movs	r3, #0
 8026bee:	220a      	movs	r2, #10
 8026bf0:	4648      	mov	r0, r9
 8026bf2:	f000 faf1 	bl	80271d8 <__multadd>
 8026bf6:	9b08      	ldr	r3, [sp, #32]
 8026bf8:	9001      	str	r0, [sp, #4]
 8026bfa:	2b00      	cmp	r3, #0
 8026bfc:	f000 816e 	beq.w	8026edc <_dtoa_r+0xa74>
 8026c00:	4629      	mov	r1, r5
 8026c02:	2300      	movs	r3, #0
 8026c04:	220a      	movs	r2, #10
 8026c06:	4648      	mov	r0, r9
 8026c08:	f000 fae6 	bl	80271d8 <__multadd>
 8026c0c:	f1bb 0f00 	cmp.w	fp, #0
 8026c10:	4605      	mov	r5, r0
 8026c12:	dc64      	bgt.n	8026cde <_dtoa_r+0x876>
 8026c14:	9b07      	ldr	r3, [sp, #28]
 8026c16:	2b02      	cmp	r3, #2
 8026c18:	dc3e      	bgt.n	8026c98 <_dtoa_r+0x830>
 8026c1a:	e060      	b.n	8026cde <_dtoa_r+0x876>
 8026c1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8026c1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8026c22:	e73c      	b.n	8026a9e <_dtoa_r+0x636>
 8026c24:	f10a 34ff 	add.w	r4, sl, #4294967295
 8026c28:	42a3      	cmp	r3, r4
 8026c2a:	bfbf      	itttt	lt
 8026c2c:	1ae2      	sublt	r2, r4, r3
 8026c2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8026c30:	189b      	addlt	r3, r3, r2
 8026c32:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8026c34:	bfae      	itee	ge
 8026c36:	1b1c      	subge	r4, r3, r4
 8026c38:	4623      	movlt	r3, r4
 8026c3a:	2400      	movlt	r4, #0
 8026c3c:	f1ba 0f00 	cmp.w	sl, #0
 8026c40:	bfb5      	itete	lt
 8026c42:	9a05      	ldrlt	r2, [sp, #20]
 8026c44:	9e05      	ldrge	r6, [sp, #20]
 8026c46:	eba2 060a 	sublt.w	r6, r2, sl
 8026c4a:	4652      	movge	r2, sl
 8026c4c:	bfb8      	it	lt
 8026c4e:	2200      	movlt	r2, #0
 8026c50:	e727      	b.n	8026aa2 <_dtoa_r+0x63a>
 8026c52:	9e05      	ldr	r6, [sp, #20]
 8026c54:	9d08      	ldr	r5, [sp, #32]
 8026c56:	461c      	mov	r4, r3
 8026c58:	e730      	b.n	8026abc <_dtoa_r+0x654>
 8026c5a:	461a      	mov	r2, r3
 8026c5c:	e758      	b.n	8026b10 <_dtoa_r+0x6a8>
 8026c5e:	2300      	movs	r3, #0
 8026c60:	e786      	b.n	8026b70 <_dtoa_r+0x708>
 8026c62:	9b02      	ldr	r3, [sp, #8]
 8026c64:	e784      	b.n	8026b70 <_dtoa_r+0x708>
 8026c66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8026c68:	e783      	b.n	8026b72 <_dtoa_r+0x70a>
 8026c6a:	2300      	movs	r3, #0
 8026c6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026c6e:	e784      	b.n	8026b7a <_dtoa_r+0x712>
 8026c70:	d09d      	beq.n	8026bae <_dtoa_r+0x746>
 8026c72:	9b05      	ldr	r3, [sp, #20]
 8026c74:	321c      	adds	r2, #28
 8026c76:	4413      	add	r3, r2
 8026c78:	9305      	str	r3, [sp, #20]
 8026c7a:	9b06      	ldr	r3, [sp, #24]
 8026c7c:	4416      	add	r6, r2
 8026c7e:	4413      	add	r3, r2
 8026c80:	e794      	b.n	8026bac <_dtoa_r+0x744>
 8026c82:	4602      	mov	r2, r0
 8026c84:	e7f5      	b.n	8026c72 <_dtoa_r+0x80a>
 8026c86:	f1ba 0f00 	cmp.w	sl, #0
 8026c8a:	f8cd 8010 	str.w	r8, [sp, #16]
 8026c8e:	46d3      	mov	fp, sl
 8026c90:	dc21      	bgt.n	8026cd6 <_dtoa_r+0x86e>
 8026c92:	9b07      	ldr	r3, [sp, #28]
 8026c94:	2b02      	cmp	r3, #2
 8026c96:	dd1e      	ble.n	8026cd6 <_dtoa_r+0x86e>
 8026c98:	f1bb 0f00 	cmp.w	fp, #0
 8026c9c:	f47f aeb7 	bne.w	8026a0e <_dtoa_r+0x5a6>
 8026ca0:	4621      	mov	r1, r4
 8026ca2:	465b      	mov	r3, fp
 8026ca4:	2205      	movs	r2, #5
 8026ca6:	4648      	mov	r0, r9
 8026ca8:	f000 fa96 	bl	80271d8 <__multadd>
 8026cac:	4601      	mov	r1, r0
 8026cae:	4604      	mov	r4, r0
 8026cb0:	9801      	ldr	r0, [sp, #4]
 8026cb2:	f000 fcf3 	bl	802769c <__mcmp>
 8026cb6:	2800      	cmp	r0, #0
 8026cb8:	f77f aea9 	ble.w	8026a0e <_dtoa_r+0x5a6>
 8026cbc:	463e      	mov	r6, r7
 8026cbe:	2331      	movs	r3, #49	@ 0x31
 8026cc0:	f806 3b01 	strb.w	r3, [r6], #1
 8026cc4:	9b04      	ldr	r3, [sp, #16]
 8026cc6:	3301      	adds	r3, #1
 8026cc8:	9304      	str	r3, [sp, #16]
 8026cca:	e6a4      	b.n	8026a16 <_dtoa_r+0x5ae>
 8026ccc:	f8cd 8010 	str.w	r8, [sp, #16]
 8026cd0:	4654      	mov	r4, sl
 8026cd2:	4625      	mov	r5, r4
 8026cd4:	e7f2      	b.n	8026cbc <_dtoa_r+0x854>
 8026cd6:	9b08      	ldr	r3, [sp, #32]
 8026cd8:	2b00      	cmp	r3, #0
 8026cda:	f000 8103 	beq.w	8026ee4 <_dtoa_r+0xa7c>
 8026cde:	2e00      	cmp	r6, #0
 8026ce0:	dd05      	ble.n	8026cee <_dtoa_r+0x886>
 8026ce2:	4629      	mov	r1, r5
 8026ce4:	4632      	mov	r2, r6
 8026ce6:	4648      	mov	r0, r9
 8026ce8:	f000 fc6c 	bl	80275c4 <__lshift>
 8026cec:	4605      	mov	r5, r0
 8026cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026cf0:	2b00      	cmp	r3, #0
 8026cf2:	d058      	beq.n	8026da6 <_dtoa_r+0x93e>
 8026cf4:	6869      	ldr	r1, [r5, #4]
 8026cf6:	4648      	mov	r0, r9
 8026cf8:	f000 fa0c 	bl	8027114 <_Balloc>
 8026cfc:	4606      	mov	r6, r0
 8026cfe:	b928      	cbnz	r0, 8026d0c <_dtoa_r+0x8a4>
 8026d00:	4b82      	ldr	r3, [pc, #520]	@ (8026f0c <_dtoa_r+0xaa4>)
 8026d02:	4602      	mov	r2, r0
 8026d04:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8026d08:	f7ff bbc7 	b.w	802649a <_dtoa_r+0x32>
 8026d0c:	692a      	ldr	r2, [r5, #16]
 8026d0e:	3202      	adds	r2, #2
 8026d10:	0092      	lsls	r2, r2, #2
 8026d12:	f105 010c 	add.w	r1, r5, #12
 8026d16:	300c      	adds	r0, #12
 8026d18:	f001 ff1e 	bl	8028b58 <memcpy>
 8026d1c:	2201      	movs	r2, #1
 8026d1e:	4631      	mov	r1, r6
 8026d20:	4648      	mov	r0, r9
 8026d22:	f000 fc4f 	bl	80275c4 <__lshift>
 8026d26:	1c7b      	adds	r3, r7, #1
 8026d28:	9305      	str	r3, [sp, #20]
 8026d2a:	eb07 030b 	add.w	r3, r7, fp
 8026d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026d30:	9b02      	ldr	r3, [sp, #8]
 8026d32:	f003 0301 	and.w	r3, r3, #1
 8026d36:	46a8      	mov	r8, r5
 8026d38:	9308      	str	r3, [sp, #32]
 8026d3a:	4605      	mov	r5, r0
 8026d3c:	9b05      	ldr	r3, [sp, #20]
 8026d3e:	9801      	ldr	r0, [sp, #4]
 8026d40:	4621      	mov	r1, r4
 8026d42:	f103 3bff 	add.w	fp, r3, #4294967295
 8026d46:	f7ff fb07 	bl	8026358 <quorem>
 8026d4a:	4641      	mov	r1, r8
 8026d4c:	9002      	str	r0, [sp, #8]
 8026d4e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8026d52:	9801      	ldr	r0, [sp, #4]
 8026d54:	f000 fca2 	bl	802769c <__mcmp>
 8026d58:	462a      	mov	r2, r5
 8026d5a:	9006      	str	r0, [sp, #24]
 8026d5c:	4621      	mov	r1, r4
 8026d5e:	4648      	mov	r0, r9
 8026d60:	f000 fcb8 	bl	80276d4 <__mdiff>
 8026d64:	68c2      	ldr	r2, [r0, #12]
 8026d66:	4606      	mov	r6, r0
 8026d68:	b9fa      	cbnz	r2, 8026daa <_dtoa_r+0x942>
 8026d6a:	4601      	mov	r1, r0
 8026d6c:	9801      	ldr	r0, [sp, #4]
 8026d6e:	f000 fc95 	bl	802769c <__mcmp>
 8026d72:	4602      	mov	r2, r0
 8026d74:	4631      	mov	r1, r6
 8026d76:	4648      	mov	r0, r9
 8026d78:	920a      	str	r2, [sp, #40]	@ 0x28
 8026d7a:	f000 fa0b 	bl	8027194 <_Bfree>
 8026d7e:	9b07      	ldr	r3, [sp, #28]
 8026d80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026d82:	9e05      	ldr	r6, [sp, #20]
 8026d84:	ea43 0102 	orr.w	r1, r3, r2
 8026d88:	9b08      	ldr	r3, [sp, #32]
 8026d8a:	4319      	orrs	r1, r3
 8026d8c:	d10f      	bne.n	8026dae <_dtoa_r+0x946>
 8026d8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026d92:	d028      	beq.n	8026de6 <_dtoa_r+0x97e>
 8026d94:	9b06      	ldr	r3, [sp, #24]
 8026d96:	2b00      	cmp	r3, #0
 8026d98:	dd02      	ble.n	8026da0 <_dtoa_r+0x938>
 8026d9a:	9b02      	ldr	r3, [sp, #8]
 8026d9c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8026da0:	f88b a000 	strb.w	sl, [fp]
 8026da4:	e639      	b.n	8026a1a <_dtoa_r+0x5b2>
 8026da6:	4628      	mov	r0, r5
 8026da8:	e7bd      	b.n	8026d26 <_dtoa_r+0x8be>
 8026daa:	2201      	movs	r2, #1
 8026dac:	e7e2      	b.n	8026d74 <_dtoa_r+0x90c>
 8026dae:	9b06      	ldr	r3, [sp, #24]
 8026db0:	2b00      	cmp	r3, #0
 8026db2:	db04      	blt.n	8026dbe <_dtoa_r+0x956>
 8026db4:	9907      	ldr	r1, [sp, #28]
 8026db6:	430b      	orrs	r3, r1
 8026db8:	9908      	ldr	r1, [sp, #32]
 8026dba:	430b      	orrs	r3, r1
 8026dbc:	d120      	bne.n	8026e00 <_dtoa_r+0x998>
 8026dbe:	2a00      	cmp	r2, #0
 8026dc0:	ddee      	ble.n	8026da0 <_dtoa_r+0x938>
 8026dc2:	9901      	ldr	r1, [sp, #4]
 8026dc4:	2201      	movs	r2, #1
 8026dc6:	4648      	mov	r0, r9
 8026dc8:	f000 fbfc 	bl	80275c4 <__lshift>
 8026dcc:	4621      	mov	r1, r4
 8026dce:	9001      	str	r0, [sp, #4]
 8026dd0:	f000 fc64 	bl	802769c <__mcmp>
 8026dd4:	2800      	cmp	r0, #0
 8026dd6:	dc03      	bgt.n	8026de0 <_dtoa_r+0x978>
 8026dd8:	d1e2      	bne.n	8026da0 <_dtoa_r+0x938>
 8026dda:	f01a 0f01 	tst.w	sl, #1
 8026dde:	d0df      	beq.n	8026da0 <_dtoa_r+0x938>
 8026de0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026de4:	d1d9      	bne.n	8026d9a <_dtoa_r+0x932>
 8026de6:	2339      	movs	r3, #57	@ 0x39
 8026de8:	f88b 3000 	strb.w	r3, [fp]
 8026dec:	4633      	mov	r3, r6
 8026dee:	461e      	mov	r6, r3
 8026df0:	3b01      	subs	r3, #1
 8026df2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8026df6:	2a39      	cmp	r2, #57	@ 0x39
 8026df8:	d053      	beq.n	8026ea2 <_dtoa_r+0xa3a>
 8026dfa:	3201      	adds	r2, #1
 8026dfc:	701a      	strb	r2, [r3, #0]
 8026dfe:	e60c      	b.n	8026a1a <_dtoa_r+0x5b2>
 8026e00:	2a00      	cmp	r2, #0
 8026e02:	dd07      	ble.n	8026e14 <_dtoa_r+0x9ac>
 8026e04:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8026e08:	d0ed      	beq.n	8026de6 <_dtoa_r+0x97e>
 8026e0a:	f10a 0301 	add.w	r3, sl, #1
 8026e0e:	f88b 3000 	strb.w	r3, [fp]
 8026e12:	e602      	b.n	8026a1a <_dtoa_r+0x5b2>
 8026e14:	9b05      	ldr	r3, [sp, #20]
 8026e16:	9a05      	ldr	r2, [sp, #20]
 8026e18:	f803 ac01 	strb.w	sl, [r3, #-1]
 8026e1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026e1e:	4293      	cmp	r3, r2
 8026e20:	d029      	beq.n	8026e76 <_dtoa_r+0xa0e>
 8026e22:	9901      	ldr	r1, [sp, #4]
 8026e24:	2300      	movs	r3, #0
 8026e26:	220a      	movs	r2, #10
 8026e28:	4648      	mov	r0, r9
 8026e2a:	f000 f9d5 	bl	80271d8 <__multadd>
 8026e2e:	45a8      	cmp	r8, r5
 8026e30:	9001      	str	r0, [sp, #4]
 8026e32:	f04f 0300 	mov.w	r3, #0
 8026e36:	f04f 020a 	mov.w	r2, #10
 8026e3a:	4641      	mov	r1, r8
 8026e3c:	4648      	mov	r0, r9
 8026e3e:	d107      	bne.n	8026e50 <_dtoa_r+0x9e8>
 8026e40:	f000 f9ca 	bl	80271d8 <__multadd>
 8026e44:	4680      	mov	r8, r0
 8026e46:	4605      	mov	r5, r0
 8026e48:	9b05      	ldr	r3, [sp, #20]
 8026e4a:	3301      	adds	r3, #1
 8026e4c:	9305      	str	r3, [sp, #20]
 8026e4e:	e775      	b.n	8026d3c <_dtoa_r+0x8d4>
 8026e50:	f000 f9c2 	bl	80271d8 <__multadd>
 8026e54:	4629      	mov	r1, r5
 8026e56:	4680      	mov	r8, r0
 8026e58:	2300      	movs	r3, #0
 8026e5a:	220a      	movs	r2, #10
 8026e5c:	4648      	mov	r0, r9
 8026e5e:	f000 f9bb 	bl	80271d8 <__multadd>
 8026e62:	4605      	mov	r5, r0
 8026e64:	e7f0      	b.n	8026e48 <_dtoa_r+0x9e0>
 8026e66:	f1bb 0f00 	cmp.w	fp, #0
 8026e6a:	bfcc      	ite	gt
 8026e6c:	465e      	movgt	r6, fp
 8026e6e:	2601      	movle	r6, #1
 8026e70:	443e      	add	r6, r7
 8026e72:	f04f 0800 	mov.w	r8, #0
 8026e76:	9901      	ldr	r1, [sp, #4]
 8026e78:	2201      	movs	r2, #1
 8026e7a:	4648      	mov	r0, r9
 8026e7c:	f000 fba2 	bl	80275c4 <__lshift>
 8026e80:	4621      	mov	r1, r4
 8026e82:	9001      	str	r0, [sp, #4]
 8026e84:	f000 fc0a 	bl	802769c <__mcmp>
 8026e88:	2800      	cmp	r0, #0
 8026e8a:	dcaf      	bgt.n	8026dec <_dtoa_r+0x984>
 8026e8c:	d102      	bne.n	8026e94 <_dtoa_r+0xa2c>
 8026e8e:	f01a 0f01 	tst.w	sl, #1
 8026e92:	d1ab      	bne.n	8026dec <_dtoa_r+0x984>
 8026e94:	4633      	mov	r3, r6
 8026e96:	461e      	mov	r6, r3
 8026e98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026e9c:	2a30      	cmp	r2, #48	@ 0x30
 8026e9e:	d0fa      	beq.n	8026e96 <_dtoa_r+0xa2e>
 8026ea0:	e5bb      	b.n	8026a1a <_dtoa_r+0x5b2>
 8026ea2:	429f      	cmp	r7, r3
 8026ea4:	d1a3      	bne.n	8026dee <_dtoa_r+0x986>
 8026ea6:	9b04      	ldr	r3, [sp, #16]
 8026ea8:	3301      	adds	r3, #1
 8026eaa:	9304      	str	r3, [sp, #16]
 8026eac:	2331      	movs	r3, #49	@ 0x31
 8026eae:	703b      	strb	r3, [r7, #0]
 8026eb0:	e5b3      	b.n	8026a1a <_dtoa_r+0x5b2>
 8026eb2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8026eb4:	4f16      	ldr	r7, [pc, #88]	@ (8026f10 <_dtoa_r+0xaa8>)
 8026eb6:	b11b      	cbz	r3, 8026ec0 <_dtoa_r+0xa58>
 8026eb8:	f107 0308 	add.w	r3, r7, #8
 8026ebc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8026ebe:	6013      	str	r3, [r2, #0]
 8026ec0:	4638      	mov	r0, r7
 8026ec2:	b011      	add	sp, #68	@ 0x44
 8026ec4:	ecbd 8b02 	vpop	{d8}
 8026ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026ecc:	9b07      	ldr	r3, [sp, #28]
 8026ece:	2b01      	cmp	r3, #1
 8026ed0:	f77f ae36 	ble.w	8026b40 <_dtoa_r+0x6d8>
 8026ed4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026ed6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8026ed8:	2001      	movs	r0, #1
 8026eda:	e656      	b.n	8026b8a <_dtoa_r+0x722>
 8026edc:	f1bb 0f00 	cmp.w	fp, #0
 8026ee0:	f77f aed7 	ble.w	8026c92 <_dtoa_r+0x82a>
 8026ee4:	463e      	mov	r6, r7
 8026ee6:	9801      	ldr	r0, [sp, #4]
 8026ee8:	4621      	mov	r1, r4
 8026eea:	f7ff fa35 	bl	8026358 <quorem>
 8026eee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8026ef2:	f806 ab01 	strb.w	sl, [r6], #1
 8026ef6:	1bf2      	subs	r2, r6, r7
 8026ef8:	4593      	cmp	fp, r2
 8026efa:	ddb4      	ble.n	8026e66 <_dtoa_r+0x9fe>
 8026efc:	9901      	ldr	r1, [sp, #4]
 8026efe:	2300      	movs	r3, #0
 8026f00:	220a      	movs	r2, #10
 8026f02:	4648      	mov	r0, r9
 8026f04:	f000 f968 	bl	80271d8 <__multadd>
 8026f08:	9001      	str	r0, [sp, #4]
 8026f0a:	e7ec      	b.n	8026ee6 <_dtoa_r+0xa7e>
 8026f0c:	08029965 	.word	0x08029965
 8026f10:	080298e9 	.word	0x080298e9

08026f14 <_free_r>:
 8026f14:	b538      	push	{r3, r4, r5, lr}
 8026f16:	4605      	mov	r5, r0
 8026f18:	2900      	cmp	r1, #0
 8026f1a:	d041      	beq.n	8026fa0 <_free_r+0x8c>
 8026f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026f20:	1f0c      	subs	r4, r1, #4
 8026f22:	2b00      	cmp	r3, #0
 8026f24:	bfb8      	it	lt
 8026f26:	18e4      	addlt	r4, r4, r3
 8026f28:	f000 f8e8 	bl	80270fc <__malloc_lock>
 8026f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8026fa4 <_free_r+0x90>)
 8026f2e:	6813      	ldr	r3, [r2, #0]
 8026f30:	b933      	cbnz	r3, 8026f40 <_free_r+0x2c>
 8026f32:	6063      	str	r3, [r4, #4]
 8026f34:	6014      	str	r4, [r2, #0]
 8026f36:	4628      	mov	r0, r5
 8026f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026f3c:	f000 b8e4 	b.w	8027108 <__malloc_unlock>
 8026f40:	42a3      	cmp	r3, r4
 8026f42:	d908      	bls.n	8026f56 <_free_r+0x42>
 8026f44:	6820      	ldr	r0, [r4, #0]
 8026f46:	1821      	adds	r1, r4, r0
 8026f48:	428b      	cmp	r3, r1
 8026f4a:	bf01      	itttt	eq
 8026f4c:	6819      	ldreq	r1, [r3, #0]
 8026f4e:	685b      	ldreq	r3, [r3, #4]
 8026f50:	1809      	addeq	r1, r1, r0
 8026f52:	6021      	streq	r1, [r4, #0]
 8026f54:	e7ed      	b.n	8026f32 <_free_r+0x1e>
 8026f56:	461a      	mov	r2, r3
 8026f58:	685b      	ldr	r3, [r3, #4]
 8026f5a:	b10b      	cbz	r3, 8026f60 <_free_r+0x4c>
 8026f5c:	42a3      	cmp	r3, r4
 8026f5e:	d9fa      	bls.n	8026f56 <_free_r+0x42>
 8026f60:	6811      	ldr	r1, [r2, #0]
 8026f62:	1850      	adds	r0, r2, r1
 8026f64:	42a0      	cmp	r0, r4
 8026f66:	d10b      	bne.n	8026f80 <_free_r+0x6c>
 8026f68:	6820      	ldr	r0, [r4, #0]
 8026f6a:	4401      	add	r1, r0
 8026f6c:	1850      	adds	r0, r2, r1
 8026f6e:	4283      	cmp	r3, r0
 8026f70:	6011      	str	r1, [r2, #0]
 8026f72:	d1e0      	bne.n	8026f36 <_free_r+0x22>
 8026f74:	6818      	ldr	r0, [r3, #0]
 8026f76:	685b      	ldr	r3, [r3, #4]
 8026f78:	6053      	str	r3, [r2, #4]
 8026f7a:	4408      	add	r0, r1
 8026f7c:	6010      	str	r0, [r2, #0]
 8026f7e:	e7da      	b.n	8026f36 <_free_r+0x22>
 8026f80:	d902      	bls.n	8026f88 <_free_r+0x74>
 8026f82:	230c      	movs	r3, #12
 8026f84:	602b      	str	r3, [r5, #0]
 8026f86:	e7d6      	b.n	8026f36 <_free_r+0x22>
 8026f88:	6820      	ldr	r0, [r4, #0]
 8026f8a:	1821      	adds	r1, r4, r0
 8026f8c:	428b      	cmp	r3, r1
 8026f8e:	bf04      	itt	eq
 8026f90:	6819      	ldreq	r1, [r3, #0]
 8026f92:	685b      	ldreq	r3, [r3, #4]
 8026f94:	6063      	str	r3, [r4, #4]
 8026f96:	bf04      	itt	eq
 8026f98:	1809      	addeq	r1, r1, r0
 8026f9a:	6021      	streq	r1, [r4, #0]
 8026f9c:	6054      	str	r4, [r2, #4]
 8026f9e:	e7ca      	b.n	8026f36 <_free_r+0x22>
 8026fa0:	bd38      	pop	{r3, r4, r5, pc}
 8026fa2:	bf00      	nop
 8026fa4:	24000428 	.word	0x24000428

08026fa8 <malloc>:
 8026fa8:	4b02      	ldr	r3, [pc, #8]	@ (8026fb4 <malloc+0xc>)
 8026faa:	4601      	mov	r1, r0
 8026fac:	6818      	ldr	r0, [r3, #0]
 8026fae:	f000 b825 	b.w	8026ffc <_malloc_r>
 8026fb2:	bf00      	nop
 8026fb4:	2400001c 	.word	0x2400001c

08026fb8 <sbrk_aligned>:
 8026fb8:	b570      	push	{r4, r5, r6, lr}
 8026fba:	4e0f      	ldr	r6, [pc, #60]	@ (8026ff8 <sbrk_aligned+0x40>)
 8026fbc:	460c      	mov	r4, r1
 8026fbe:	6831      	ldr	r1, [r6, #0]
 8026fc0:	4605      	mov	r5, r0
 8026fc2:	b911      	cbnz	r1, 8026fca <sbrk_aligned+0x12>
 8026fc4:	f001 fdb8 	bl	8028b38 <_sbrk_r>
 8026fc8:	6030      	str	r0, [r6, #0]
 8026fca:	4621      	mov	r1, r4
 8026fcc:	4628      	mov	r0, r5
 8026fce:	f001 fdb3 	bl	8028b38 <_sbrk_r>
 8026fd2:	1c43      	adds	r3, r0, #1
 8026fd4:	d103      	bne.n	8026fde <sbrk_aligned+0x26>
 8026fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8026fda:	4620      	mov	r0, r4
 8026fdc:	bd70      	pop	{r4, r5, r6, pc}
 8026fde:	1cc4      	adds	r4, r0, #3
 8026fe0:	f024 0403 	bic.w	r4, r4, #3
 8026fe4:	42a0      	cmp	r0, r4
 8026fe6:	d0f8      	beq.n	8026fda <sbrk_aligned+0x22>
 8026fe8:	1a21      	subs	r1, r4, r0
 8026fea:	4628      	mov	r0, r5
 8026fec:	f001 fda4 	bl	8028b38 <_sbrk_r>
 8026ff0:	3001      	adds	r0, #1
 8026ff2:	d1f2      	bne.n	8026fda <sbrk_aligned+0x22>
 8026ff4:	e7ef      	b.n	8026fd6 <sbrk_aligned+0x1e>
 8026ff6:	bf00      	nop
 8026ff8:	24000424 	.word	0x24000424

08026ffc <_malloc_r>:
 8026ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027000:	1ccd      	adds	r5, r1, #3
 8027002:	f025 0503 	bic.w	r5, r5, #3
 8027006:	3508      	adds	r5, #8
 8027008:	2d0c      	cmp	r5, #12
 802700a:	bf38      	it	cc
 802700c:	250c      	movcc	r5, #12
 802700e:	2d00      	cmp	r5, #0
 8027010:	4606      	mov	r6, r0
 8027012:	db01      	blt.n	8027018 <_malloc_r+0x1c>
 8027014:	42a9      	cmp	r1, r5
 8027016:	d904      	bls.n	8027022 <_malloc_r+0x26>
 8027018:	230c      	movs	r3, #12
 802701a:	6033      	str	r3, [r6, #0]
 802701c:	2000      	movs	r0, #0
 802701e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80270f8 <_malloc_r+0xfc>
 8027026:	f000 f869 	bl	80270fc <__malloc_lock>
 802702a:	f8d8 3000 	ldr.w	r3, [r8]
 802702e:	461c      	mov	r4, r3
 8027030:	bb44      	cbnz	r4, 8027084 <_malloc_r+0x88>
 8027032:	4629      	mov	r1, r5
 8027034:	4630      	mov	r0, r6
 8027036:	f7ff ffbf 	bl	8026fb8 <sbrk_aligned>
 802703a:	1c43      	adds	r3, r0, #1
 802703c:	4604      	mov	r4, r0
 802703e:	d158      	bne.n	80270f2 <_malloc_r+0xf6>
 8027040:	f8d8 4000 	ldr.w	r4, [r8]
 8027044:	4627      	mov	r7, r4
 8027046:	2f00      	cmp	r7, #0
 8027048:	d143      	bne.n	80270d2 <_malloc_r+0xd6>
 802704a:	2c00      	cmp	r4, #0
 802704c:	d04b      	beq.n	80270e6 <_malloc_r+0xea>
 802704e:	6823      	ldr	r3, [r4, #0]
 8027050:	4639      	mov	r1, r7
 8027052:	4630      	mov	r0, r6
 8027054:	eb04 0903 	add.w	r9, r4, r3
 8027058:	f001 fd6e 	bl	8028b38 <_sbrk_r>
 802705c:	4581      	cmp	r9, r0
 802705e:	d142      	bne.n	80270e6 <_malloc_r+0xea>
 8027060:	6821      	ldr	r1, [r4, #0]
 8027062:	1a6d      	subs	r5, r5, r1
 8027064:	4629      	mov	r1, r5
 8027066:	4630      	mov	r0, r6
 8027068:	f7ff ffa6 	bl	8026fb8 <sbrk_aligned>
 802706c:	3001      	adds	r0, #1
 802706e:	d03a      	beq.n	80270e6 <_malloc_r+0xea>
 8027070:	6823      	ldr	r3, [r4, #0]
 8027072:	442b      	add	r3, r5
 8027074:	6023      	str	r3, [r4, #0]
 8027076:	f8d8 3000 	ldr.w	r3, [r8]
 802707a:	685a      	ldr	r2, [r3, #4]
 802707c:	bb62      	cbnz	r2, 80270d8 <_malloc_r+0xdc>
 802707e:	f8c8 7000 	str.w	r7, [r8]
 8027082:	e00f      	b.n	80270a4 <_malloc_r+0xa8>
 8027084:	6822      	ldr	r2, [r4, #0]
 8027086:	1b52      	subs	r2, r2, r5
 8027088:	d420      	bmi.n	80270cc <_malloc_r+0xd0>
 802708a:	2a0b      	cmp	r2, #11
 802708c:	d917      	bls.n	80270be <_malloc_r+0xc2>
 802708e:	1961      	adds	r1, r4, r5
 8027090:	42a3      	cmp	r3, r4
 8027092:	6025      	str	r5, [r4, #0]
 8027094:	bf18      	it	ne
 8027096:	6059      	strne	r1, [r3, #4]
 8027098:	6863      	ldr	r3, [r4, #4]
 802709a:	bf08      	it	eq
 802709c:	f8c8 1000 	streq.w	r1, [r8]
 80270a0:	5162      	str	r2, [r4, r5]
 80270a2:	604b      	str	r3, [r1, #4]
 80270a4:	4630      	mov	r0, r6
 80270a6:	f000 f82f 	bl	8027108 <__malloc_unlock>
 80270aa:	f104 000b 	add.w	r0, r4, #11
 80270ae:	1d23      	adds	r3, r4, #4
 80270b0:	f020 0007 	bic.w	r0, r0, #7
 80270b4:	1ac2      	subs	r2, r0, r3
 80270b6:	bf1c      	itt	ne
 80270b8:	1a1b      	subne	r3, r3, r0
 80270ba:	50a3      	strne	r3, [r4, r2]
 80270bc:	e7af      	b.n	802701e <_malloc_r+0x22>
 80270be:	6862      	ldr	r2, [r4, #4]
 80270c0:	42a3      	cmp	r3, r4
 80270c2:	bf0c      	ite	eq
 80270c4:	f8c8 2000 	streq.w	r2, [r8]
 80270c8:	605a      	strne	r2, [r3, #4]
 80270ca:	e7eb      	b.n	80270a4 <_malloc_r+0xa8>
 80270cc:	4623      	mov	r3, r4
 80270ce:	6864      	ldr	r4, [r4, #4]
 80270d0:	e7ae      	b.n	8027030 <_malloc_r+0x34>
 80270d2:	463c      	mov	r4, r7
 80270d4:	687f      	ldr	r7, [r7, #4]
 80270d6:	e7b6      	b.n	8027046 <_malloc_r+0x4a>
 80270d8:	461a      	mov	r2, r3
 80270da:	685b      	ldr	r3, [r3, #4]
 80270dc:	42a3      	cmp	r3, r4
 80270de:	d1fb      	bne.n	80270d8 <_malloc_r+0xdc>
 80270e0:	2300      	movs	r3, #0
 80270e2:	6053      	str	r3, [r2, #4]
 80270e4:	e7de      	b.n	80270a4 <_malloc_r+0xa8>
 80270e6:	230c      	movs	r3, #12
 80270e8:	6033      	str	r3, [r6, #0]
 80270ea:	4630      	mov	r0, r6
 80270ec:	f000 f80c 	bl	8027108 <__malloc_unlock>
 80270f0:	e794      	b.n	802701c <_malloc_r+0x20>
 80270f2:	6005      	str	r5, [r0, #0]
 80270f4:	e7d6      	b.n	80270a4 <_malloc_r+0xa8>
 80270f6:	bf00      	nop
 80270f8:	24000428 	.word	0x24000428

080270fc <__malloc_lock>:
 80270fc:	4801      	ldr	r0, [pc, #4]	@ (8027104 <__malloc_lock+0x8>)
 80270fe:	f7ff b922 	b.w	8026346 <__retarget_lock_acquire_recursive>
 8027102:	bf00      	nop
 8027104:	24000420 	.word	0x24000420

08027108 <__malloc_unlock>:
 8027108:	4801      	ldr	r0, [pc, #4]	@ (8027110 <__malloc_unlock+0x8>)
 802710a:	f7ff b91d 	b.w	8026348 <__retarget_lock_release_recursive>
 802710e:	bf00      	nop
 8027110:	24000420 	.word	0x24000420

08027114 <_Balloc>:
 8027114:	b570      	push	{r4, r5, r6, lr}
 8027116:	69c6      	ldr	r6, [r0, #28]
 8027118:	4604      	mov	r4, r0
 802711a:	460d      	mov	r5, r1
 802711c:	b976      	cbnz	r6, 802713c <_Balloc+0x28>
 802711e:	2010      	movs	r0, #16
 8027120:	f7ff ff42 	bl	8026fa8 <malloc>
 8027124:	4602      	mov	r2, r0
 8027126:	61e0      	str	r0, [r4, #28]
 8027128:	b920      	cbnz	r0, 8027134 <_Balloc+0x20>
 802712a:	4b18      	ldr	r3, [pc, #96]	@ (802718c <_Balloc+0x78>)
 802712c:	4818      	ldr	r0, [pc, #96]	@ (8027190 <_Balloc+0x7c>)
 802712e:	216b      	movs	r1, #107	@ 0x6b
 8027130:	f001 fd2a 	bl	8028b88 <__assert_func>
 8027134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027138:	6006      	str	r6, [r0, #0]
 802713a:	60c6      	str	r6, [r0, #12]
 802713c:	69e6      	ldr	r6, [r4, #28]
 802713e:	68f3      	ldr	r3, [r6, #12]
 8027140:	b183      	cbz	r3, 8027164 <_Balloc+0x50>
 8027142:	69e3      	ldr	r3, [r4, #28]
 8027144:	68db      	ldr	r3, [r3, #12]
 8027146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802714a:	b9b8      	cbnz	r0, 802717c <_Balloc+0x68>
 802714c:	2101      	movs	r1, #1
 802714e:	fa01 f605 	lsl.w	r6, r1, r5
 8027152:	1d72      	adds	r2, r6, #5
 8027154:	0092      	lsls	r2, r2, #2
 8027156:	4620      	mov	r0, r4
 8027158:	f001 fd34 	bl	8028bc4 <_calloc_r>
 802715c:	b160      	cbz	r0, 8027178 <_Balloc+0x64>
 802715e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027162:	e00e      	b.n	8027182 <_Balloc+0x6e>
 8027164:	2221      	movs	r2, #33	@ 0x21
 8027166:	2104      	movs	r1, #4
 8027168:	4620      	mov	r0, r4
 802716a:	f001 fd2b 	bl	8028bc4 <_calloc_r>
 802716e:	69e3      	ldr	r3, [r4, #28]
 8027170:	60f0      	str	r0, [r6, #12]
 8027172:	68db      	ldr	r3, [r3, #12]
 8027174:	2b00      	cmp	r3, #0
 8027176:	d1e4      	bne.n	8027142 <_Balloc+0x2e>
 8027178:	2000      	movs	r0, #0
 802717a:	bd70      	pop	{r4, r5, r6, pc}
 802717c:	6802      	ldr	r2, [r0, #0]
 802717e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027182:	2300      	movs	r3, #0
 8027184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027188:	e7f7      	b.n	802717a <_Balloc+0x66>
 802718a:	bf00      	nop
 802718c:	080298f6 	.word	0x080298f6
 8027190:	08029976 	.word	0x08029976

08027194 <_Bfree>:
 8027194:	b570      	push	{r4, r5, r6, lr}
 8027196:	69c6      	ldr	r6, [r0, #28]
 8027198:	4605      	mov	r5, r0
 802719a:	460c      	mov	r4, r1
 802719c:	b976      	cbnz	r6, 80271bc <_Bfree+0x28>
 802719e:	2010      	movs	r0, #16
 80271a0:	f7ff ff02 	bl	8026fa8 <malloc>
 80271a4:	4602      	mov	r2, r0
 80271a6:	61e8      	str	r0, [r5, #28]
 80271a8:	b920      	cbnz	r0, 80271b4 <_Bfree+0x20>
 80271aa:	4b09      	ldr	r3, [pc, #36]	@ (80271d0 <_Bfree+0x3c>)
 80271ac:	4809      	ldr	r0, [pc, #36]	@ (80271d4 <_Bfree+0x40>)
 80271ae:	218f      	movs	r1, #143	@ 0x8f
 80271b0:	f001 fcea 	bl	8028b88 <__assert_func>
 80271b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80271b8:	6006      	str	r6, [r0, #0]
 80271ba:	60c6      	str	r6, [r0, #12]
 80271bc:	b13c      	cbz	r4, 80271ce <_Bfree+0x3a>
 80271be:	69eb      	ldr	r3, [r5, #28]
 80271c0:	6862      	ldr	r2, [r4, #4]
 80271c2:	68db      	ldr	r3, [r3, #12]
 80271c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80271c8:	6021      	str	r1, [r4, #0]
 80271ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80271ce:	bd70      	pop	{r4, r5, r6, pc}
 80271d0:	080298f6 	.word	0x080298f6
 80271d4:	08029976 	.word	0x08029976

080271d8 <__multadd>:
 80271d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80271dc:	690d      	ldr	r5, [r1, #16]
 80271de:	4607      	mov	r7, r0
 80271e0:	460c      	mov	r4, r1
 80271e2:	461e      	mov	r6, r3
 80271e4:	f101 0c14 	add.w	ip, r1, #20
 80271e8:	2000      	movs	r0, #0
 80271ea:	f8dc 3000 	ldr.w	r3, [ip]
 80271ee:	b299      	uxth	r1, r3
 80271f0:	fb02 6101 	mla	r1, r2, r1, r6
 80271f4:	0c1e      	lsrs	r6, r3, #16
 80271f6:	0c0b      	lsrs	r3, r1, #16
 80271f8:	fb02 3306 	mla	r3, r2, r6, r3
 80271fc:	b289      	uxth	r1, r1
 80271fe:	3001      	adds	r0, #1
 8027200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027204:	4285      	cmp	r5, r0
 8027206:	f84c 1b04 	str.w	r1, [ip], #4
 802720a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802720e:	dcec      	bgt.n	80271ea <__multadd+0x12>
 8027210:	b30e      	cbz	r6, 8027256 <__multadd+0x7e>
 8027212:	68a3      	ldr	r3, [r4, #8]
 8027214:	42ab      	cmp	r3, r5
 8027216:	dc19      	bgt.n	802724c <__multadd+0x74>
 8027218:	6861      	ldr	r1, [r4, #4]
 802721a:	4638      	mov	r0, r7
 802721c:	3101      	adds	r1, #1
 802721e:	f7ff ff79 	bl	8027114 <_Balloc>
 8027222:	4680      	mov	r8, r0
 8027224:	b928      	cbnz	r0, 8027232 <__multadd+0x5a>
 8027226:	4602      	mov	r2, r0
 8027228:	4b0c      	ldr	r3, [pc, #48]	@ (802725c <__multadd+0x84>)
 802722a:	480d      	ldr	r0, [pc, #52]	@ (8027260 <__multadd+0x88>)
 802722c:	21ba      	movs	r1, #186	@ 0xba
 802722e:	f001 fcab 	bl	8028b88 <__assert_func>
 8027232:	6922      	ldr	r2, [r4, #16]
 8027234:	3202      	adds	r2, #2
 8027236:	f104 010c 	add.w	r1, r4, #12
 802723a:	0092      	lsls	r2, r2, #2
 802723c:	300c      	adds	r0, #12
 802723e:	f001 fc8b 	bl	8028b58 <memcpy>
 8027242:	4621      	mov	r1, r4
 8027244:	4638      	mov	r0, r7
 8027246:	f7ff ffa5 	bl	8027194 <_Bfree>
 802724a:	4644      	mov	r4, r8
 802724c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027250:	3501      	adds	r5, #1
 8027252:	615e      	str	r6, [r3, #20]
 8027254:	6125      	str	r5, [r4, #16]
 8027256:	4620      	mov	r0, r4
 8027258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802725c:	08029965 	.word	0x08029965
 8027260:	08029976 	.word	0x08029976

08027264 <__s2b>:
 8027264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027268:	460c      	mov	r4, r1
 802726a:	4615      	mov	r5, r2
 802726c:	461f      	mov	r7, r3
 802726e:	2209      	movs	r2, #9
 8027270:	3308      	adds	r3, #8
 8027272:	4606      	mov	r6, r0
 8027274:	fb93 f3f2 	sdiv	r3, r3, r2
 8027278:	2100      	movs	r1, #0
 802727a:	2201      	movs	r2, #1
 802727c:	429a      	cmp	r2, r3
 802727e:	db09      	blt.n	8027294 <__s2b+0x30>
 8027280:	4630      	mov	r0, r6
 8027282:	f7ff ff47 	bl	8027114 <_Balloc>
 8027286:	b940      	cbnz	r0, 802729a <__s2b+0x36>
 8027288:	4602      	mov	r2, r0
 802728a:	4b19      	ldr	r3, [pc, #100]	@ (80272f0 <__s2b+0x8c>)
 802728c:	4819      	ldr	r0, [pc, #100]	@ (80272f4 <__s2b+0x90>)
 802728e:	21d3      	movs	r1, #211	@ 0xd3
 8027290:	f001 fc7a 	bl	8028b88 <__assert_func>
 8027294:	0052      	lsls	r2, r2, #1
 8027296:	3101      	adds	r1, #1
 8027298:	e7f0      	b.n	802727c <__s2b+0x18>
 802729a:	9b08      	ldr	r3, [sp, #32]
 802729c:	6143      	str	r3, [r0, #20]
 802729e:	2d09      	cmp	r5, #9
 80272a0:	f04f 0301 	mov.w	r3, #1
 80272a4:	6103      	str	r3, [r0, #16]
 80272a6:	dd16      	ble.n	80272d6 <__s2b+0x72>
 80272a8:	f104 0909 	add.w	r9, r4, #9
 80272ac:	46c8      	mov	r8, r9
 80272ae:	442c      	add	r4, r5
 80272b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80272b4:	4601      	mov	r1, r0
 80272b6:	3b30      	subs	r3, #48	@ 0x30
 80272b8:	220a      	movs	r2, #10
 80272ba:	4630      	mov	r0, r6
 80272bc:	f7ff ff8c 	bl	80271d8 <__multadd>
 80272c0:	45a0      	cmp	r8, r4
 80272c2:	d1f5      	bne.n	80272b0 <__s2b+0x4c>
 80272c4:	f1a5 0408 	sub.w	r4, r5, #8
 80272c8:	444c      	add	r4, r9
 80272ca:	1b2d      	subs	r5, r5, r4
 80272cc:	1963      	adds	r3, r4, r5
 80272ce:	42bb      	cmp	r3, r7
 80272d0:	db04      	blt.n	80272dc <__s2b+0x78>
 80272d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80272d6:	340a      	adds	r4, #10
 80272d8:	2509      	movs	r5, #9
 80272da:	e7f6      	b.n	80272ca <__s2b+0x66>
 80272dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80272e0:	4601      	mov	r1, r0
 80272e2:	3b30      	subs	r3, #48	@ 0x30
 80272e4:	220a      	movs	r2, #10
 80272e6:	4630      	mov	r0, r6
 80272e8:	f7ff ff76 	bl	80271d8 <__multadd>
 80272ec:	e7ee      	b.n	80272cc <__s2b+0x68>
 80272ee:	bf00      	nop
 80272f0:	08029965 	.word	0x08029965
 80272f4:	08029976 	.word	0x08029976

080272f8 <__hi0bits>:
 80272f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80272fc:	4603      	mov	r3, r0
 80272fe:	bf36      	itet	cc
 8027300:	0403      	lslcc	r3, r0, #16
 8027302:	2000      	movcs	r0, #0
 8027304:	2010      	movcc	r0, #16
 8027306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 802730a:	bf3c      	itt	cc
 802730c:	021b      	lslcc	r3, r3, #8
 802730e:	3008      	addcc	r0, #8
 8027310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8027314:	bf3c      	itt	cc
 8027316:	011b      	lslcc	r3, r3, #4
 8027318:	3004      	addcc	r0, #4
 802731a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802731e:	bf3c      	itt	cc
 8027320:	009b      	lslcc	r3, r3, #2
 8027322:	3002      	addcc	r0, #2
 8027324:	2b00      	cmp	r3, #0
 8027326:	db05      	blt.n	8027334 <__hi0bits+0x3c>
 8027328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 802732c:	f100 0001 	add.w	r0, r0, #1
 8027330:	bf08      	it	eq
 8027332:	2020      	moveq	r0, #32
 8027334:	4770      	bx	lr

08027336 <__lo0bits>:
 8027336:	6803      	ldr	r3, [r0, #0]
 8027338:	4602      	mov	r2, r0
 802733a:	f013 0007 	ands.w	r0, r3, #7
 802733e:	d00b      	beq.n	8027358 <__lo0bits+0x22>
 8027340:	07d9      	lsls	r1, r3, #31
 8027342:	d421      	bmi.n	8027388 <__lo0bits+0x52>
 8027344:	0798      	lsls	r0, r3, #30
 8027346:	bf49      	itett	mi
 8027348:	085b      	lsrmi	r3, r3, #1
 802734a:	089b      	lsrpl	r3, r3, #2
 802734c:	2001      	movmi	r0, #1
 802734e:	6013      	strmi	r3, [r2, #0]
 8027350:	bf5c      	itt	pl
 8027352:	6013      	strpl	r3, [r2, #0]
 8027354:	2002      	movpl	r0, #2
 8027356:	4770      	bx	lr
 8027358:	b299      	uxth	r1, r3
 802735a:	b909      	cbnz	r1, 8027360 <__lo0bits+0x2a>
 802735c:	0c1b      	lsrs	r3, r3, #16
 802735e:	2010      	movs	r0, #16
 8027360:	b2d9      	uxtb	r1, r3
 8027362:	b909      	cbnz	r1, 8027368 <__lo0bits+0x32>
 8027364:	3008      	adds	r0, #8
 8027366:	0a1b      	lsrs	r3, r3, #8
 8027368:	0719      	lsls	r1, r3, #28
 802736a:	bf04      	itt	eq
 802736c:	091b      	lsreq	r3, r3, #4
 802736e:	3004      	addeq	r0, #4
 8027370:	0799      	lsls	r1, r3, #30
 8027372:	bf04      	itt	eq
 8027374:	089b      	lsreq	r3, r3, #2
 8027376:	3002      	addeq	r0, #2
 8027378:	07d9      	lsls	r1, r3, #31
 802737a:	d403      	bmi.n	8027384 <__lo0bits+0x4e>
 802737c:	085b      	lsrs	r3, r3, #1
 802737e:	f100 0001 	add.w	r0, r0, #1
 8027382:	d003      	beq.n	802738c <__lo0bits+0x56>
 8027384:	6013      	str	r3, [r2, #0]
 8027386:	4770      	bx	lr
 8027388:	2000      	movs	r0, #0
 802738a:	4770      	bx	lr
 802738c:	2020      	movs	r0, #32
 802738e:	4770      	bx	lr

08027390 <__i2b>:
 8027390:	b510      	push	{r4, lr}
 8027392:	460c      	mov	r4, r1
 8027394:	2101      	movs	r1, #1
 8027396:	f7ff febd 	bl	8027114 <_Balloc>
 802739a:	4602      	mov	r2, r0
 802739c:	b928      	cbnz	r0, 80273aa <__i2b+0x1a>
 802739e:	4b05      	ldr	r3, [pc, #20]	@ (80273b4 <__i2b+0x24>)
 80273a0:	4805      	ldr	r0, [pc, #20]	@ (80273b8 <__i2b+0x28>)
 80273a2:	f240 1145 	movw	r1, #325	@ 0x145
 80273a6:	f001 fbef 	bl	8028b88 <__assert_func>
 80273aa:	2301      	movs	r3, #1
 80273ac:	6144      	str	r4, [r0, #20]
 80273ae:	6103      	str	r3, [r0, #16]
 80273b0:	bd10      	pop	{r4, pc}
 80273b2:	bf00      	nop
 80273b4:	08029965 	.word	0x08029965
 80273b8:	08029976 	.word	0x08029976

080273bc <__multiply>:
 80273bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273c0:	4614      	mov	r4, r2
 80273c2:	690a      	ldr	r2, [r1, #16]
 80273c4:	6923      	ldr	r3, [r4, #16]
 80273c6:	429a      	cmp	r2, r3
 80273c8:	bfa8      	it	ge
 80273ca:	4623      	movge	r3, r4
 80273cc:	460f      	mov	r7, r1
 80273ce:	bfa4      	itt	ge
 80273d0:	460c      	movge	r4, r1
 80273d2:	461f      	movge	r7, r3
 80273d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80273d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80273dc:	68a3      	ldr	r3, [r4, #8]
 80273de:	6861      	ldr	r1, [r4, #4]
 80273e0:	eb0a 0609 	add.w	r6, sl, r9
 80273e4:	42b3      	cmp	r3, r6
 80273e6:	b085      	sub	sp, #20
 80273e8:	bfb8      	it	lt
 80273ea:	3101      	addlt	r1, #1
 80273ec:	f7ff fe92 	bl	8027114 <_Balloc>
 80273f0:	b930      	cbnz	r0, 8027400 <__multiply+0x44>
 80273f2:	4602      	mov	r2, r0
 80273f4:	4b44      	ldr	r3, [pc, #272]	@ (8027508 <__multiply+0x14c>)
 80273f6:	4845      	ldr	r0, [pc, #276]	@ (802750c <__multiply+0x150>)
 80273f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80273fc:	f001 fbc4 	bl	8028b88 <__assert_func>
 8027400:	f100 0514 	add.w	r5, r0, #20
 8027404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027408:	462b      	mov	r3, r5
 802740a:	2200      	movs	r2, #0
 802740c:	4543      	cmp	r3, r8
 802740e:	d321      	bcc.n	8027454 <__multiply+0x98>
 8027410:	f107 0114 	add.w	r1, r7, #20
 8027414:	f104 0214 	add.w	r2, r4, #20
 8027418:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 802741c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8027420:	9302      	str	r3, [sp, #8]
 8027422:	1b13      	subs	r3, r2, r4
 8027424:	3b15      	subs	r3, #21
 8027426:	f023 0303 	bic.w	r3, r3, #3
 802742a:	3304      	adds	r3, #4
 802742c:	f104 0715 	add.w	r7, r4, #21
 8027430:	42ba      	cmp	r2, r7
 8027432:	bf38      	it	cc
 8027434:	2304      	movcc	r3, #4
 8027436:	9301      	str	r3, [sp, #4]
 8027438:	9b02      	ldr	r3, [sp, #8]
 802743a:	9103      	str	r1, [sp, #12]
 802743c:	428b      	cmp	r3, r1
 802743e:	d80c      	bhi.n	802745a <__multiply+0x9e>
 8027440:	2e00      	cmp	r6, #0
 8027442:	dd03      	ble.n	802744c <__multiply+0x90>
 8027444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027448:	2b00      	cmp	r3, #0
 802744a:	d05b      	beq.n	8027504 <__multiply+0x148>
 802744c:	6106      	str	r6, [r0, #16]
 802744e:	b005      	add	sp, #20
 8027450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027454:	f843 2b04 	str.w	r2, [r3], #4
 8027458:	e7d8      	b.n	802740c <__multiply+0x50>
 802745a:	f8b1 a000 	ldrh.w	sl, [r1]
 802745e:	f1ba 0f00 	cmp.w	sl, #0
 8027462:	d024      	beq.n	80274ae <__multiply+0xf2>
 8027464:	f104 0e14 	add.w	lr, r4, #20
 8027468:	46a9      	mov	r9, r5
 802746a:	f04f 0c00 	mov.w	ip, #0
 802746e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8027472:	f8d9 3000 	ldr.w	r3, [r9]
 8027476:	fa1f fb87 	uxth.w	fp, r7
 802747a:	b29b      	uxth	r3, r3
 802747c:	fb0a 330b 	mla	r3, sl, fp, r3
 8027480:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8027484:	f8d9 7000 	ldr.w	r7, [r9]
 8027488:	4463      	add	r3, ip
 802748a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802748e:	fb0a c70b 	mla	r7, sl, fp, ip
 8027492:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8027496:	b29b      	uxth	r3, r3
 8027498:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 802749c:	4572      	cmp	r2, lr
 802749e:	f849 3b04 	str.w	r3, [r9], #4
 80274a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80274a6:	d8e2      	bhi.n	802746e <__multiply+0xb2>
 80274a8:	9b01      	ldr	r3, [sp, #4]
 80274aa:	f845 c003 	str.w	ip, [r5, r3]
 80274ae:	9b03      	ldr	r3, [sp, #12]
 80274b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80274b4:	3104      	adds	r1, #4
 80274b6:	f1b9 0f00 	cmp.w	r9, #0
 80274ba:	d021      	beq.n	8027500 <__multiply+0x144>
 80274bc:	682b      	ldr	r3, [r5, #0]
 80274be:	f104 0c14 	add.w	ip, r4, #20
 80274c2:	46ae      	mov	lr, r5
 80274c4:	f04f 0a00 	mov.w	sl, #0
 80274c8:	f8bc b000 	ldrh.w	fp, [ip]
 80274cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80274d0:	fb09 770b 	mla	r7, r9, fp, r7
 80274d4:	4457      	add	r7, sl
 80274d6:	b29b      	uxth	r3, r3
 80274d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80274dc:	f84e 3b04 	str.w	r3, [lr], #4
 80274e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80274e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80274e8:	f8be 3000 	ldrh.w	r3, [lr]
 80274ec:	fb09 330a 	mla	r3, r9, sl, r3
 80274f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80274f4:	4562      	cmp	r2, ip
 80274f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80274fa:	d8e5      	bhi.n	80274c8 <__multiply+0x10c>
 80274fc:	9f01      	ldr	r7, [sp, #4]
 80274fe:	51eb      	str	r3, [r5, r7]
 8027500:	3504      	adds	r5, #4
 8027502:	e799      	b.n	8027438 <__multiply+0x7c>
 8027504:	3e01      	subs	r6, #1
 8027506:	e79b      	b.n	8027440 <__multiply+0x84>
 8027508:	08029965 	.word	0x08029965
 802750c:	08029976 	.word	0x08029976

08027510 <__pow5mult>:
 8027510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027514:	4615      	mov	r5, r2
 8027516:	f012 0203 	ands.w	r2, r2, #3
 802751a:	4607      	mov	r7, r0
 802751c:	460e      	mov	r6, r1
 802751e:	d007      	beq.n	8027530 <__pow5mult+0x20>
 8027520:	4c25      	ldr	r4, [pc, #148]	@ (80275b8 <__pow5mult+0xa8>)
 8027522:	3a01      	subs	r2, #1
 8027524:	2300      	movs	r3, #0
 8027526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802752a:	f7ff fe55 	bl	80271d8 <__multadd>
 802752e:	4606      	mov	r6, r0
 8027530:	10ad      	asrs	r5, r5, #2
 8027532:	d03d      	beq.n	80275b0 <__pow5mult+0xa0>
 8027534:	69fc      	ldr	r4, [r7, #28]
 8027536:	b97c      	cbnz	r4, 8027558 <__pow5mult+0x48>
 8027538:	2010      	movs	r0, #16
 802753a:	f7ff fd35 	bl	8026fa8 <malloc>
 802753e:	4602      	mov	r2, r0
 8027540:	61f8      	str	r0, [r7, #28]
 8027542:	b928      	cbnz	r0, 8027550 <__pow5mult+0x40>
 8027544:	4b1d      	ldr	r3, [pc, #116]	@ (80275bc <__pow5mult+0xac>)
 8027546:	481e      	ldr	r0, [pc, #120]	@ (80275c0 <__pow5mult+0xb0>)
 8027548:	f240 11b3 	movw	r1, #435	@ 0x1b3
 802754c:	f001 fb1c 	bl	8028b88 <__assert_func>
 8027550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027554:	6004      	str	r4, [r0, #0]
 8027556:	60c4      	str	r4, [r0, #12]
 8027558:	f8d7 801c 	ldr.w	r8, [r7, #28]
 802755c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027560:	b94c      	cbnz	r4, 8027576 <__pow5mult+0x66>
 8027562:	f240 2171 	movw	r1, #625	@ 0x271
 8027566:	4638      	mov	r0, r7
 8027568:	f7ff ff12 	bl	8027390 <__i2b>
 802756c:	2300      	movs	r3, #0
 802756e:	f8c8 0008 	str.w	r0, [r8, #8]
 8027572:	4604      	mov	r4, r0
 8027574:	6003      	str	r3, [r0, #0]
 8027576:	f04f 0900 	mov.w	r9, #0
 802757a:	07eb      	lsls	r3, r5, #31
 802757c:	d50a      	bpl.n	8027594 <__pow5mult+0x84>
 802757e:	4631      	mov	r1, r6
 8027580:	4622      	mov	r2, r4
 8027582:	4638      	mov	r0, r7
 8027584:	f7ff ff1a 	bl	80273bc <__multiply>
 8027588:	4631      	mov	r1, r6
 802758a:	4680      	mov	r8, r0
 802758c:	4638      	mov	r0, r7
 802758e:	f7ff fe01 	bl	8027194 <_Bfree>
 8027592:	4646      	mov	r6, r8
 8027594:	106d      	asrs	r5, r5, #1
 8027596:	d00b      	beq.n	80275b0 <__pow5mult+0xa0>
 8027598:	6820      	ldr	r0, [r4, #0]
 802759a:	b938      	cbnz	r0, 80275ac <__pow5mult+0x9c>
 802759c:	4622      	mov	r2, r4
 802759e:	4621      	mov	r1, r4
 80275a0:	4638      	mov	r0, r7
 80275a2:	f7ff ff0b 	bl	80273bc <__multiply>
 80275a6:	6020      	str	r0, [r4, #0]
 80275a8:	f8c0 9000 	str.w	r9, [r0]
 80275ac:	4604      	mov	r4, r0
 80275ae:	e7e4      	b.n	802757a <__pow5mult+0x6a>
 80275b0:	4630      	mov	r0, r6
 80275b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80275b6:	bf00      	nop
 80275b8:	080299d0 	.word	0x080299d0
 80275bc:	080298f6 	.word	0x080298f6
 80275c0:	08029976 	.word	0x08029976

080275c4 <__lshift>:
 80275c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80275c8:	460c      	mov	r4, r1
 80275ca:	6849      	ldr	r1, [r1, #4]
 80275cc:	6923      	ldr	r3, [r4, #16]
 80275ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80275d2:	68a3      	ldr	r3, [r4, #8]
 80275d4:	4607      	mov	r7, r0
 80275d6:	4691      	mov	r9, r2
 80275d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80275dc:	f108 0601 	add.w	r6, r8, #1
 80275e0:	42b3      	cmp	r3, r6
 80275e2:	db0b      	blt.n	80275fc <__lshift+0x38>
 80275e4:	4638      	mov	r0, r7
 80275e6:	f7ff fd95 	bl	8027114 <_Balloc>
 80275ea:	4605      	mov	r5, r0
 80275ec:	b948      	cbnz	r0, 8027602 <__lshift+0x3e>
 80275ee:	4602      	mov	r2, r0
 80275f0:	4b28      	ldr	r3, [pc, #160]	@ (8027694 <__lshift+0xd0>)
 80275f2:	4829      	ldr	r0, [pc, #164]	@ (8027698 <__lshift+0xd4>)
 80275f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80275f8:	f001 fac6 	bl	8028b88 <__assert_func>
 80275fc:	3101      	adds	r1, #1
 80275fe:	005b      	lsls	r3, r3, #1
 8027600:	e7ee      	b.n	80275e0 <__lshift+0x1c>
 8027602:	2300      	movs	r3, #0
 8027604:	f100 0114 	add.w	r1, r0, #20
 8027608:	f100 0210 	add.w	r2, r0, #16
 802760c:	4618      	mov	r0, r3
 802760e:	4553      	cmp	r3, sl
 8027610:	db33      	blt.n	802767a <__lshift+0xb6>
 8027612:	6920      	ldr	r0, [r4, #16]
 8027614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027618:	f104 0314 	add.w	r3, r4, #20
 802761c:	f019 091f 	ands.w	r9, r9, #31
 8027620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8027628:	d02b      	beq.n	8027682 <__lshift+0xbe>
 802762a:	f1c9 0e20 	rsb	lr, r9, #32
 802762e:	468a      	mov	sl, r1
 8027630:	2200      	movs	r2, #0
 8027632:	6818      	ldr	r0, [r3, #0]
 8027634:	fa00 f009 	lsl.w	r0, r0, r9
 8027638:	4310      	orrs	r0, r2
 802763a:	f84a 0b04 	str.w	r0, [sl], #4
 802763e:	f853 2b04 	ldr.w	r2, [r3], #4
 8027642:	459c      	cmp	ip, r3
 8027644:	fa22 f20e 	lsr.w	r2, r2, lr
 8027648:	d8f3      	bhi.n	8027632 <__lshift+0x6e>
 802764a:	ebac 0304 	sub.w	r3, ip, r4
 802764e:	3b15      	subs	r3, #21
 8027650:	f023 0303 	bic.w	r3, r3, #3
 8027654:	3304      	adds	r3, #4
 8027656:	f104 0015 	add.w	r0, r4, #21
 802765a:	4584      	cmp	ip, r0
 802765c:	bf38      	it	cc
 802765e:	2304      	movcc	r3, #4
 8027660:	50ca      	str	r2, [r1, r3]
 8027662:	b10a      	cbz	r2, 8027668 <__lshift+0xa4>
 8027664:	f108 0602 	add.w	r6, r8, #2
 8027668:	3e01      	subs	r6, #1
 802766a:	4638      	mov	r0, r7
 802766c:	612e      	str	r6, [r5, #16]
 802766e:	4621      	mov	r1, r4
 8027670:	f7ff fd90 	bl	8027194 <_Bfree>
 8027674:	4628      	mov	r0, r5
 8027676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802767a:	f842 0f04 	str.w	r0, [r2, #4]!
 802767e:	3301      	adds	r3, #1
 8027680:	e7c5      	b.n	802760e <__lshift+0x4a>
 8027682:	3904      	subs	r1, #4
 8027684:	f853 2b04 	ldr.w	r2, [r3], #4
 8027688:	f841 2f04 	str.w	r2, [r1, #4]!
 802768c:	459c      	cmp	ip, r3
 802768e:	d8f9      	bhi.n	8027684 <__lshift+0xc0>
 8027690:	e7ea      	b.n	8027668 <__lshift+0xa4>
 8027692:	bf00      	nop
 8027694:	08029965 	.word	0x08029965
 8027698:	08029976 	.word	0x08029976

0802769c <__mcmp>:
 802769c:	690a      	ldr	r2, [r1, #16]
 802769e:	4603      	mov	r3, r0
 80276a0:	6900      	ldr	r0, [r0, #16]
 80276a2:	1a80      	subs	r0, r0, r2
 80276a4:	b530      	push	{r4, r5, lr}
 80276a6:	d10e      	bne.n	80276c6 <__mcmp+0x2a>
 80276a8:	3314      	adds	r3, #20
 80276aa:	3114      	adds	r1, #20
 80276ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80276b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80276b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80276b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80276bc:	4295      	cmp	r5, r2
 80276be:	d003      	beq.n	80276c8 <__mcmp+0x2c>
 80276c0:	d205      	bcs.n	80276ce <__mcmp+0x32>
 80276c2:	f04f 30ff 	mov.w	r0, #4294967295
 80276c6:	bd30      	pop	{r4, r5, pc}
 80276c8:	42a3      	cmp	r3, r4
 80276ca:	d3f3      	bcc.n	80276b4 <__mcmp+0x18>
 80276cc:	e7fb      	b.n	80276c6 <__mcmp+0x2a>
 80276ce:	2001      	movs	r0, #1
 80276d0:	e7f9      	b.n	80276c6 <__mcmp+0x2a>
	...

080276d4 <__mdiff>:
 80276d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276d8:	4689      	mov	r9, r1
 80276da:	4606      	mov	r6, r0
 80276dc:	4611      	mov	r1, r2
 80276de:	4648      	mov	r0, r9
 80276e0:	4614      	mov	r4, r2
 80276e2:	f7ff ffdb 	bl	802769c <__mcmp>
 80276e6:	1e05      	subs	r5, r0, #0
 80276e8:	d112      	bne.n	8027710 <__mdiff+0x3c>
 80276ea:	4629      	mov	r1, r5
 80276ec:	4630      	mov	r0, r6
 80276ee:	f7ff fd11 	bl	8027114 <_Balloc>
 80276f2:	4602      	mov	r2, r0
 80276f4:	b928      	cbnz	r0, 8027702 <__mdiff+0x2e>
 80276f6:	4b3f      	ldr	r3, [pc, #252]	@ (80277f4 <__mdiff+0x120>)
 80276f8:	f240 2137 	movw	r1, #567	@ 0x237
 80276fc:	483e      	ldr	r0, [pc, #248]	@ (80277f8 <__mdiff+0x124>)
 80276fe:	f001 fa43 	bl	8028b88 <__assert_func>
 8027702:	2301      	movs	r3, #1
 8027704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027708:	4610      	mov	r0, r2
 802770a:	b003      	add	sp, #12
 802770c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027710:	bfbc      	itt	lt
 8027712:	464b      	movlt	r3, r9
 8027714:	46a1      	movlt	r9, r4
 8027716:	4630      	mov	r0, r6
 8027718:	f8d9 1004 	ldr.w	r1, [r9, #4]
 802771c:	bfba      	itte	lt
 802771e:	461c      	movlt	r4, r3
 8027720:	2501      	movlt	r5, #1
 8027722:	2500      	movge	r5, #0
 8027724:	f7ff fcf6 	bl	8027114 <_Balloc>
 8027728:	4602      	mov	r2, r0
 802772a:	b918      	cbnz	r0, 8027734 <__mdiff+0x60>
 802772c:	4b31      	ldr	r3, [pc, #196]	@ (80277f4 <__mdiff+0x120>)
 802772e:	f240 2145 	movw	r1, #581	@ 0x245
 8027732:	e7e3      	b.n	80276fc <__mdiff+0x28>
 8027734:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8027738:	6926      	ldr	r6, [r4, #16]
 802773a:	60c5      	str	r5, [r0, #12]
 802773c:	f109 0310 	add.w	r3, r9, #16
 8027740:	f109 0514 	add.w	r5, r9, #20
 8027744:	f104 0e14 	add.w	lr, r4, #20
 8027748:	f100 0b14 	add.w	fp, r0, #20
 802774c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8027750:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8027754:	9301      	str	r3, [sp, #4]
 8027756:	46d9      	mov	r9, fp
 8027758:	f04f 0c00 	mov.w	ip, #0
 802775c:	9b01      	ldr	r3, [sp, #4]
 802775e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8027762:	f853 af04 	ldr.w	sl, [r3, #4]!
 8027766:	9301      	str	r3, [sp, #4]
 8027768:	fa1f f38a 	uxth.w	r3, sl
 802776c:	4619      	mov	r1, r3
 802776e:	b283      	uxth	r3, r0
 8027770:	1acb      	subs	r3, r1, r3
 8027772:	0c00      	lsrs	r0, r0, #16
 8027774:	4463      	add	r3, ip
 8027776:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802777a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802777e:	b29b      	uxth	r3, r3
 8027780:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8027784:	4576      	cmp	r6, lr
 8027786:	f849 3b04 	str.w	r3, [r9], #4
 802778a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802778e:	d8e5      	bhi.n	802775c <__mdiff+0x88>
 8027790:	1b33      	subs	r3, r6, r4
 8027792:	3b15      	subs	r3, #21
 8027794:	f023 0303 	bic.w	r3, r3, #3
 8027798:	3415      	adds	r4, #21
 802779a:	3304      	adds	r3, #4
 802779c:	42a6      	cmp	r6, r4
 802779e:	bf38      	it	cc
 80277a0:	2304      	movcc	r3, #4
 80277a2:	441d      	add	r5, r3
 80277a4:	445b      	add	r3, fp
 80277a6:	461e      	mov	r6, r3
 80277a8:	462c      	mov	r4, r5
 80277aa:	4544      	cmp	r4, r8
 80277ac:	d30e      	bcc.n	80277cc <__mdiff+0xf8>
 80277ae:	f108 0103 	add.w	r1, r8, #3
 80277b2:	1b49      	subs	r1, r1, r5
 80277b4:	f021 0103 	bic.w	r1, r1, #3
 80277b8:	3d03      	subs	r5, #3
 80277ba:	45a8      	cmp	r8, r5
 80277bc:	bf38      	it	cc
 80277be:	2100      	movcc	r1, #0
 80277c0:	440b      	add	r3, r1
 80277c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80277c6:	b191      	cbz	r1, 80277ee <__mdiff+0x11a>
 80277c8:	6117      	str	r7, [r2, #16]
 80277ca:	e79d      	b.n	8027708 <__mdiff+0x34>
 80277cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80277d0:	46e6      	mov	lr, ip
 80277d2:	0c08      	lsrs	r0, r1, #16
 80277d4:	fa1c fc81 	uxtah	ip, ip, r1
 80277d8:	4471      	add	r1, lr
 80277da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80277de:	b289      	uxth	r1, r1
 80277e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80277e4:	f846 1b04 	str.w	r1, [r6], #4
 80277e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80277ec:	e7dd      	b.n	80277aa <__mdiff+0xd6>
 80277ee:	3f01      	subs	r7, #1
 80277f0:	e7e7      	b.n	80277c2 <__mdiff+0xee>
 80277f2:	bf00      	nop
 80277f4:	08029965 	.word	0x08029965
 80277f8:	08029976 	.word	0x08029976

080277fc <__ulp>:
 80277fc:	b082      	sub	sp, #8
 80277fe:	ed8d 0b00 	vstr	d0, [sp]
 8027802:	9a01      	ldr	r2, [sp, #4]
 8027804:	4b0f      	ldr	r3, [pc, #60]	@ (8027844 <__ulp+0x48>)
 8027806:	4013      	ands	r3, r2
 8027808:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 802780c:	2b00      	cmp	r3, #0
 802780e:	dc08      	bgt.n	8027822 <__ulp+0x26>
 8027810:	425b      	negs	r3, r3
 8027812:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8027816:	ea4f 5223 	mov.w	r2, r3, asr #20
 802781a:	da04      	bge.n	8027826 <__ulp+0x2a>
 802781c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8027820:	4113      	asrs	r3, r2
 8027822:	2200      	movs	r2, #0
 8027824:	e008      	b.n	8027838 <__ulp+0x3c>
 8027826:	f1a2 0314 	sub.w	r3, r2, #20
 802782a:	2b1e      	cmp	r3, #30
 802782c:	bfda      	itte	le
 802782e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8027832:	40da      	lsrle	r2, r3
 8027834:	2201      	movgt	r2, #1
 8027836:	2300      	movs	r3, #0
 8027838:	4619      	mov	r1, r3
 802783a:	4610      	mov	r0, r2
 802783c:	ec41 0b10 	vmov	d0, r0, r1
 8027840:	b002      	add	sp, #8
 8027842:	4770      	bx	lr
 8027844:	7ff00000 	.word	0x7ff00000

08027848 <__b2d>:
 8027848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802784c:	6906      	ldr	r6, [r0, #16]
 802784e:	f100 0814 	add.w	r8, r0, #20
 8027852:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8027856:	1f37      	subs	r7, r6, #4
 8027858:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802785c:	4610      	mov	r0, r2
 802785e:	f7ff fd4b 	bl	80272f8 <__hi0bits>
 8027862:	f1c0 0320 	rsb	r3, r0, #32
 8027866:	280a      	cmp	r0, #10
 8027868:	600b      	str	r3, [r1, #0]
 802786a:	491b      	ldr	r1, [pc, #108]	@ (80278d8 <__b2d+0x90>)
 802786c:	dc15      	bgt.n	802789a <__b2d+0x52>
 802786e:	f1c0 0c0b 	rsb	ip, r0, #11
 8027872:	fa22 f30c 	lsr.w	r3, r2, ip
 8027876:	45b8      	cmp	r8, r7
 8027878:	ea43 0501 	orr.w	r5, r3, r1
 802787c:	bf34      	ite	cc
 802787e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8027882:	2300      	movcs	r3, #0
 8027884:	3015      	adds	r0, #21
 8027886:	fa02 f000 	lsl.w	r0, r2, r0
 802788a:	fa23 f30c 	lsr.w	r3, r3, ip
 802788e:	4303      	orrs	r3, r0
 8027890:	461c      	mov	r4, r3
 8027892:	ec45 4b10 	vmov	d0, r4, r5
 8027896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802789a:	45b8      	cmp	r8, r7
 802789c:	bf3a      	itte	cc
 802789e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80278a2:	f1a6 0708 	subcc.w	r7, r6, #8
 80278a6:	2300      	movcs	r3, #0
 80278a8:	380b      	subs	r0, #11
 80278aa:	d012      	beq.n	80278d2 <__b2d+0x8a>
 80278ac:	f1c0 0120 	rsb	r1, r0, #32
 80278b0:	fa23 f401 	lsr.w	r4, r3, r1
 80278b4:	4082      	lsls	r2, r0
 80278b6:	4322      	orrs	r2, r4
 80278b8:	4547      	cmp	r7, r8
 80278ba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80278be:	bf8c      	ite	hi
 80278c0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80278c4:	2200      	movls	r2, #0
 80278c6:	4083      	lsls	r3, r0
 80278c8:	40ca      	lsrs	r2, r1
 80278ca:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80278ce:	4313      	orrs	r3, r2
 80278d0:	e7de      	b.n	8027890 <__b2d+0x48>
 80278d2:	ea42 0501 	orr.w	r5, r2, r1
 80278d6:	e7db      	b.n	8027890 <__b2d+0x48>
 80278d8:	3ff00000 	.word	0x3ff00000

080278dc <__d2b>:
 80278dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80278e0:	460f      	mov	r7, r1
 80278e2:	2101      	movs	r1, #1
 80278e4:	ec59 8b10 	vmov	r8, r9, d0
 80278e8:	4616      	mov	r6, r2
 80278ea:	f7ff fc13 	bl	8027114 <_Balloc>
 80278ee:	4604      	mov	r4, r0
 80278f0:	b930      	cbnz	r0, 8027900 <__d2b+0x24>
 80278f2:	4602      	mov	r2, r0
 80278f4:	4b23      	ldr	r3, [pc, #140]	@ (8027984 <__d2b+0xa8>)
 80278f6:	4824      	ldr	r0, [pc, #144]	@ (8027988 <__d2b+0xac>)
 80278f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80278fc:	f001 f944 	bl	8028b88 <__assert_func>
 8027900:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8027904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027908:	b10d      	cbz	r5, 802790e <__d2b+0x32>
 802790a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802790e:	9301      	str	r3, [sp, #4]
 8027910:	f1b8 0300 	subs.w	r3, r8, #0
 8027914:	d023      	beq.n	802795e <__d2b+0x82>
 8027916:	4668      	mov	r0, sp
 8027918:	9300      	str	r3, [sp, #0]
 802791a:	f7ff fd0c 	bl	8027336 <__lo0bits>
 802791e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8027922:	b1d0      	cbz	r0, 802795a <__d2b+0x7e>
 8027924:	f1c0 0320 	rsb	r3, r0, #32
 8027928:	fa02 f303 	lsl.w	r3, r2, r3
 802792c:	430b      	orrs	r3, r1
 802792e:	40c2      	lsrs	r2, r0
 8027930:	6163      	str	r3, [r4, #20]
 8027932:	9201      	str	r2, [sp, #4]
 8027934:	9b01      	ldr	r3, [sp, #4]
 8027936:	61a3      	str	r3, [r4, #24]
 8027938:	2b00      	cmp	r3, #0
 802793a:	bf0c      	ite	eq
 802793c:	2201      	moveq	r2, #1
 802793e:	2202      	movne	r2, #2
 8027940:	6122      	str	r2, [r4, #16]
 8027942:	b1a5      	cbz	r5, 802796e <__d2b+0x92>
 8027944:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8027948:	4405      	add	r5, r0
 802794a:	603d      	str	r5, [r7, #0]
 802794c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8027950:	6030      	str	r0, [r6, #0]
 8027952:	4620      	mov	r0, r4
 8027954:	b003      	add	sp, #12
 8027956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802795a:	6161      	str	r1, [r4, #20]
 802795c:	e7ea      	b.n	8027934 <__d2b+0x58>
 802795e:	a801      	add	r0, sp, #4
 8027960:	f7ff fce9 	bl	8027336 <__lo0bits>
 8027964:	9b01      	ldr	r3, [sp, #4]
 8027966:	6163      	str	r3, [r4, #20]
 8027968:	3020      	adds	r0, #32
 802796a:	2201      	movs	r2, #1
 802796c:	e7e8      	b.n	8027940 <__d2b+0x64>
 802796e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027972:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8027976:	6038      	str	r0, [r7, #0]
 8027978:	6918      	ldr	r0, [r3, #16]
 802797a:	f7ff fcbd 	bl	80272f8 <__hi0bits>
 802797e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8027982:	e7e5      	b.n	8027950 <__d2b+0x74>
 8027984:	08029965 	.word	0x08029965
 8027988:	08029976 	.word	0x08029976

0802798c <__ratio>:
 802798c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027990:	4688      	mov	r8, r1
 8027992:	4669      	mov	r1, sp
 8027994:	4681      	mov	r9, r0
 8027996:	f7ff ff57 	bl	8027848 <__b2d>
 802799a:	a901      	add	r1, sp, #4
 802799c:	4640      	mov	r0, r8
 802799e:	ec55 4b10 	vmov	r4, r5, d0
 80279a2:	f7ff ff51 	bl	8027848 <__b2d>
 80279a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80279aa:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80279ae:	1ad2      	subs	r2, r2, r3
 80279b0:	e9dd 3100 	ldrd	r3, r1, [sp]
 80279b4:	1a5b      	subs	r3, r3, r1
 80279b6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80279ba:	ec57 6b10 	vmov	r6, r7, d0
 80279be:	2b00      	cmp	r3, #0
 80279c0:	bfd6      	itet	le
 80279c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80279c6:	462a      	movgt	r2, r5
 80279c8:	463a      	movle	r2, r7
 80279ca:	46ab      	mov	fp, r5
 80279cc:	46a2      	mov	sl, r4
 80279ce:	bfce      	itee	gt
 80279d0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80279d4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80279d8:	ee00 3a90 	vmovle	s1, r3
 80279dc:	ec4b ab17 	vmov	d7, sl, fp
 80279e0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80279e4:	b003      	add	sp, #12
 80279e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080279ea <__copybits>:
 80279ea:	3901      	subs	r1, #1
 80279ec:	b570      	push	{r4, r5, r6, lr}
 80279ee:	1149      	asrs	r1, r1, #5
 80279f0:	6914      	ldr	r4, [r2, #16]
 80279f2:	3101      	adds	r1, #1
 80279f4:	f102 0314 	add.w	r3, r2, #20
 80279f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80279fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8027a00:	1f05      	subs	r5, r0, #4
 8027a02:	42a3      	cmp	r3, r4
 8027a04:	d30c      	bcc.n	8027a20 <__copybits+0x36>
 8027a06:	1aa3      	subs	r3, r4, r2
 8027a08:	3b11      	subs	r3, #17
 8027a0a:	f023 0303 	bic.w	r3, r3, #3
 8027a0e:	3211      	adds	r2, #17
 8027a10:	42a2      	cmp	r2, r4
 8027a12:	bf88      	it	hi
 8027a14:	2300      	movhi	r3, #0
 8027a16:	4418      	add	r0, r3
 8027a18:	2300      	movs	r3, #0
 8027a1a:	4288      	cmp	r0, r1
 8027a1c:	d305      	bcc.n	8027a2a <__copybits+0x40>
 8027a1e:	bd70      	pop	{r4, r5, r6, pc}
 8027a20:	f853 6b04 	ldr.w	r6, [r3], #4
 8027a24:	f845 6f04 	str.w	r6, [r5, #4]!
 8027a28:	e7eb      	b.n	8027a02 <__copybits+0x18>
 8027a2a:	f840 3b04 	str.w	r3, [r0], #4
 8027a2e:	e7f4      	b.n	8027a1a <__copybits+0x30>

08027a30 <__any_on>:
 8027a30:	f100 0214 	add.w	r2, r0, #20
 8027a34:	6900      	ldr	r0, [r0, #16]
 8027a36:	114b      	asrs	r3, r1, #5
 8027a38:	4298      	cmp	r0, r3
 8027a3a:	b510      	push	{r4, lr}
 8027a3c:	db11      	blt.n	8027a62 <__any_on+0x32>
 8027a3e:	dd0a      	ble.n	8027a56 <__any_on+0x26>
 8027a40:	f011 011f 	ands.w	r1, r1, #31
 8027a44:	d007      	beq.n	8027a56 <__any_on+0x26>
 8027a46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8027a4a:	fa24 f001 	lsr.w	r0, r4, r1
 8027a4e:	fa00 f101 	lsl.w	r1, r0, r1
 8027a52:	428c      	cmp	r4, r1
 8027a54:	d10b      	bne.n	8027a6e <__any_on+0x3e>
 8027a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027a5a:	4293      	cmp	r3, r2
 8027a5c:	d803      	bhi.n	8027a66 <__any_on+0x36>
 8027a5e:	2000      	movs	r0, #0
 8027a60:	bd10      	pop	{r4, pc}
 8027a62:	4603      	mov	r3, r0
 8027a64:	e7f7      	b.n	8027a56 <__any_on+0x26>
 8027a66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8027a6a:	2900      	cmp	r1, #0
 8027a6c:	d0f5      	beq.n	8027a5a <__any_on+0x2a>
 8027a6e:	2001      	movs	r0, #1
 8027a70:	e7f6      	b.n	8027a60 <__any_on+0x30>

08027a72 <sulp>:
 8027a72:	b570      	push	{r4, r5, r6, lr}
 8027a74:	4604      	mov	r4, r0
 8027a76:	460d      	mov	r5, r1
 8027a78:	4616      	mov	r6, r2
 8027a7a:	ec45 4b10 	vmov	d0, r4, r5
 8027a7e:	f7ff febd 	bl	80277fc <__ulp>
 8027a82:	b17e      	cbz	r6, 8027aa4 <sulp+0x32>
 8027a84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8027a88:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8027a8c:	2b00      	cmp	r3, #0
 8027a8e:	dd09      	ble.n	8027aa4 <sulp+0x32>
 8027a90:	051b      	lsls	r3, r3, #20
 8027a92:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8027a96:	2000      	movs	r0, #0
 8027a98:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8027a9c:	ec41 0b17 	vmov	d7, r0, r1
 8027aa0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8027aa4:	bd70      	pop	{r4, r5, r6, pc}
	...

08027aa8 <_strtod_l>:
 8027aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027aac:	ed2d 8b0a 	vpush	{d8-d12}
 8027ab0:	b097      	sub	sp, #92	@ 0x5c
 8027ab2:	4688      	mov	r8, r1
 8027ab4:	920e      	str	r2, [sp, #56]	@ 0x38
 8027ab6:	2200      	movs	r2, #0
 8027ab8:	9212      	str	r2, [sp, #72]	@ 0x48
 8027aba:	9005      	str	r0, [sp, #20]
 8027abc:	f04f 0a00 	mov.w	sl, #0
 8027ac0:	f04f 0b00 	mov.w	fp, #0
 8027ac4:	460a      	mov	r2, r1
 8027ac6:	9211      	str	r2, [sp, #68]	@ 0x44
 8027ac8:	7811      	ldrb	r1, [r2, #0]
 8027aca:	292b      	cmp	r1, #43	@ 0x2b
 8027acc:	d04c      	beq.n	8027b68 <_strtod_l+0xc0>
 8027ace:	d839      	bhi.n	8027b44 <_strtod_l+0x9c>
 8027ad0:	290d      	cmp	r1, #13
 8027ad2:	d833      	bhi.n	8027b3c <_strtod_l+0x94>
 8027ad4:	2908      	cmp	r1, #8
 8027ad6:	d833      	bhi.n	8027b40 <_strtod_l+0x98>
 8027ad8:	2900      	cmp	r1, #0
 8027ada:	d03c      	beq.n	8027b56 <_strtod_l+0xae>
 8027adc:	2200      	movs	r2, #0
 8027ade:	9208      	str	r2, [sp, #32]
 8027ae0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8027ae2:	782a      	ldrb	r2, [r5, #0]
 8027ae4:	2a30      	cmp	r2, #48	@ 0x30
 8027ae6:	f040 80b5 	bne.w	8027c54 <_strtod_l+0x1ac>
 8027aea:	786a      	ldrb	r2, [r5, #1]
 8027aec:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8027af0:	2a58      	cmp	r2, #88	@ 0x58
 8027af2:	d170      	bne.n	8027bd6 <_strtod_l+0x12e>
 8027af4:	9302      	str	r3, [sp, #8]
 8027af6:	9b08      	ldr	r3, [sp, #32]
 8027af8:	9301      	str	r3, [sp, #4]
 8027afa:	ab12      	add	r3, sp, #72	@ 0x48
 8027afc:	9300      	str	r3, [sp, #0]
 8027afe:	4a8b      	ldr	r2, [pc, #556]	@ (8027d2c <_strtod_l+0x284>)
 8027b00:	9805      	ldr	r0, [sp, #20]
 8027b02:	ab13      	add	r3, sp, #76	@ 0x4c
 8027b04:	a911      	add	r1, sp, #68	@ 0x44
 8027b06:	f001 f8d9 	bl	8028cbc <__gethex>
 8027b0a:	f010 060f 	ands.w	r6, r0, #15
 8027b0e:	4604      	mov	r4, r0
 8027b10:	d005      	beq.n	8027b1e <_strtod_l+0x76>
 8027b12:	2e06      	cmp	r6, #6
 8027b14:	d12a      	bne.n	8027b6c <_strtod_l+0xc4>
 8027b16:	3501      	adds	r5, #1
 8027b18:	2300      	movs	r3, #0
 8027b1a:	9511      	str	r5, [sp, #68]	@ 0x44
 8027b1c:	9308      	str	r3, [sp, #32]
 8027b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027b20:	2b00      	cmp	r3, #0
 8027b22:	f040 852f 	bne.w	8028584 <_strtod_l+0xadc>
 8027b26:	9b08      	ldr	r3, [sp, #32]
 8027b28:	ec4b ab10 	vmov	d0, sl, fp
 8027b2c:	b1cb      	cbz	r3, 8027b62 <_strtod_l+0xba>
 8027b2e:	eeb1 0b40 	vneg.f64	d0, d0
 8027b32:	b017      	add	sp, #92	@ 0x5c
 8027b34:	ecbd 8b0a 	vpop	{d8-d12}
 8027b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027b3c:	2920      	cmp	r1, #32
 8027b3e:	d1cd      	bne.n	8027adc <_strtod_l+0x34>
 8027b40:	3201      	adds	r2, #1
 8027b42:	e7c0      	b.n	8027ac6 <_strtod_l+0x1e>
 8027b44:	292d      	cmp	r1, #45	@ 0x2d
 8027b46:	d1c9      	bne.n	8027adc <_strtod_l+0x34>
 8027b48:	2101      	movs	r1, #1
 8027b4a:	9108      	str	r1, [sp, #32]
 8027b4c:	1c51      	adds	r1, r2, #1
 8027b4e:	9111      	str	r1, [sp, #68]	@ 0x44
 8027b50:	7852      	ldrb	r2, [r2, #1]
 8027b52:	2a00      	cmp	r2, #0
 8027b54:	d1c4      	bne.n	8027ae0 <_strtod_l+0x38>
 8027b56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8027b58:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8027b5c:	2b00      	cmp	r3, #0
 8027b5e:	f040 850f 	bne.w	8028580 <_strtod_l+0xad8>
 8027b62:	ec4b ab10 	vmov	d0, sl, fp
 8027b66:	e7e4      	b.n	8027b32 <_strtod_l+0x8a>
 8027b68:	2100      	movs	r1, #0
 8027b6a:	e7ee      	b.n	8027b4a <_strtod_l+0xa2>
 8027b6c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8027b6e:	b13a      	cbz	r2, 8027b80 <_strtod_l+0xd8>
 8027b70:	2135      	movs	r1, #53	@ 0x35
 8027b72:	a814      	add	r0, sp, #80	@ 0x50
 8027b74:	f7ff ff39 	bl	80279ea <__copybits>
 8027b78:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027b7a:	9805      	ldr	r0, [sp, #20]
 8027b7c:	f7ff fb0a 	bl	8027194 <_Bfree>
 8027b80:	1e73      	subs	r3, r6, #1
 8027b82:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8027b84:	2b04      	cmp	r3, #4
 8027b86:	d806      	bhi.n	8027b96 <_strtod_l+0xee>
 8027b88:	e8df f003 	tbb	[pc, r3]
 8027b8c:	201d0314 	.word	0x201d0314
 8027b90:	14          	.byte	0x14
 8027b91:	00          	.byte	0x00
 8027b92:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8027b96:	05e3      	lsls	r3, r4, #23
 8027b98:	bf48      	it	mi
 8027b9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8027b9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8027ba2:	0d1b      	lsrs	r3, r3, #20
 8027ba4:	051b      	lsls	r3, r3, #20
 8027ba6:	2b00      	cmp	r3, #0
 8027ba8:	d1b9      	bne.n	8027b1e <_strtod_l+0x76>
 8027baa:	f7fe fba1 	bl	80262f0 <__errno>
 8027bae:	2322      	movs	r3, #34	@ 0x22
 8027bb0:	6003      	str	r3, [r0, #0]
 8027bb2:	e7b4      	b.n	8027b1e <_strtod_l+0x76>
 8027bb4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8027bb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8027bbc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8027bc0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8027bc4:	e7e7      	b.n	8027b96 <_strtod_l+0xee>
 8027bc6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8027d34 <_strtod_l+0x28c>
 8027bca:	e7e4      	b.n	8027b96 <_strtod_l+0xee>
 8027bcc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8027bd0:	f04f 3aff 	mov.w	sl, #4294967295
 8027bd4:	e7df      	b.n	8027b96 <_strtod_l+0xee>
 8027bd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027bd8:	1c5a      	adds	r2, r3, #1
 8027bda:	9211      	str	r2, [sp, #68]	@ 0x44
 8027bdc:	785b      	ldrb	r3, [r3, #1]
 8027bde:	2b30      	cmp	r3, #48	@ 0x30
 8027be0:	d0f9      	beq.n	8027bd6 <_strtod_l+0x12e>
 8027be2:	2b00      	cmp	r3, #0
 8027be4:	d09b      	beq.n	8027b1e <_strtod_l+0x76>
 8027be6:	2301      	movs	r3, #1
 8027be8:	2600      	movs	r6, #0
 8027bea:	9307      	str	r3, [sp, #28]
 8027bec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8027bf0:	46b1      	mov	r9, r6
 8027bf2:	4635      	mov	r5, r6
 8027bf4:	220a      	movs	r2, #10
 8027bf6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8027bf8:	7804      	ldrb	r4, [r0, #0]
 8027bfa:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8027bfe:	b2d9      	uxtb	r1, r3
 8027c00:	2909      	cmp	r1, #9
 8027c02:	d929      	bls.n	8027c58 <_strtod_l+0x1b0>
 8027c04:	494a      	ldr	r1, [pc, #296]	@ (8027d30 <_strtod_l+0x288>)
 8027c06:	2201      	movs	r2, #1
 8027c08:	f000 ff84 	bl	8028b14 <strncmp>
 8027c0c:	b378      	cbz	r0, 8027c6e <_strtod_l+0x1c6>
 8027c0e:	2000      	movs	r0, #0
 8027c10:	4622      	mov	r2, r4
 8027c12:	462b      	mov	r3, r5
 8027c14:	4607      	mov	r7, r0
 8027c16:	9006      	str	r0, [sp, #24]
 8027c18:	2a65      	cmp	r2, #101	@ 0x65
 8027c1a:	d001      	beq.n	8027c20 <_strtod_l+0x178>
 8027c1c:	2a45      	cmp	r2, #69	@ 0x45
 8027c1e:	d117      	bne.n	8027c50 <_strtod_l+0x1a8>
 8027c20:	b91b      	cbnz	r3, 8027c2a <_strtod_l+0x182>
 8027c22:	9b07      	ldr	r3, [sp, #28]
 8027c24:	4303      	orrs	r3, r0
 8027c26:	d096      	beq.n	8027b56 <_strtod_l+0xae>
 8027c28:	2300      	movs	r3, #0
 8027c2a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8027c2e:	f108 0201 	add.w	r2, r8, #1
 8027c32:	9211      	str	r2, [sp, #68]	@ 0x44
 8027c34:	f898 2001 	ldrb.w	r2, [r8, #1]
 8027c38:	2a2b      	cmp	r2, #43	@ 0x2b
 8027c3a:	d06b      	beq.n	8027d14 <_strtod_l+0x26c>
 8027c3c:	2a2d      	cmp	r2, #45	@ 0x2d
 8027c3e:	d071      	beq.n	8027d24 <_strtod_l+0x27c>
 8027c40:	f04f 0e00 	mov.w	lr, #0
 8027c44:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8027c48:	2c09      	cmp	r4, #9
 8027c4a:	d979      	bls.n	8027d40 <_strtod_l+0x298>
 8027c4c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8027c50:	2400      	movs	r4, #0
 8027c52:	e094      	b.n	8027d7e <_strtod_l+0x2d6>
 8027c54:	2300      	movs	r3, #0
 8027c56:	e7c7      	b.n	8027be8 <_strtod_l+0x140>
 8027c58:	2d08      	cmp	r5, #8
 8027c5a:	f100 0001 	add.w	r0, r0, #1
 8027c5e:	bfd4      	ite	le
 8027c60:	fb02 3909 	mlale	r9, r2, r9, r3
 8027c64:	fb02 3606 	mlagt	r6, r2, r6, r3
 8027c68:	3501      	adds	r5, #1
 8027c6a:	9011      	str	r0, [sp, #68]	@ 0x44
 8027c6c:	e7c3      	b.n	8027bf6 <_strtod_l+0x14e>
 8027c6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027c70:	1c5a      	adds	r2, r3, #1
 8027c72:	9211      	str	r2, [sp, #68]	@ 0x44
 8027c74:	785a      	ldrb	r2, [r3, #1]
 8027c76:	b375      	cbz	r5, 8027cd6 <_strtod_l+0x22e>
 8027c78:	4607      	mov	r7, r0
 8027c7a:	462b      	mov	r3, r5
 8027c7c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8027c80:	2909      	cmp	r1, #9
 8027c82:	d913      	bls.n	8027cac <_strtod_l+0x204>
 8027c84:	2101      	movs	r1, #1
 8027c86:	9106      	str	r1, [sp, #24]
 8027c88:	e7c6      	b.n	8027c18 <_strtod_l+0x170>
 8027c8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027c8c:	1c5a      	adds	r2, r3, #1
 8027c8e:	9211      	str	r2, [sp, #68]	@ 0x44
 8027c90:	785a      	ldrb	r2, [r3, #1]
 8027c92:	3001      	adds	r0, #1
 8027c94:	2a30      	cmp	r2, #48	@ 0x30
 8027c96:	d0f8      	beq.n	8027c8a <_strtod_l+0x1e2>
 8027c98:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8027c9c:	2b08      	cmp	r3, #8
 8027c9e:	f200 8476 	bhi.w	802858e <_strtod_l+0xae6>
 8027ca2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8027ca6:	4607      	mov	r7, r0
 8027ca8:	2000      	movs	r0, #0
 8027caa:	4603      	mov	r3, r0
 8027cac:	3a30      	subs	r2, #48	@ 0x30
 8027cae:	f100 0101 	add.w	r1, r0, #1
 8027cb2:	d023      	beq.n	8027cfc <_strtod_l+0x254>
 8027cb4:	440f      	add	r7, r1
 8027cb6:	eb00 0c03 	add.w	ip, r0, r3
 8027cba:	4619      	mov	r1, r3
 8027cbc:	240a      	movs	r4, #10
 8027cbe:	4561      	cmp	r1, ip
 8027cc0:	d10b      	bne.n	8027cda <_strtod_l+0x232>
 8027cc2:	1c5c      	adds	r4, r3, #1
 8027cc4:	4403      	add	r3, r0
 8027cc6:	2b08      	cmp	r3, #8
 8027cc8:	4404      	add	r4, r0
 8027cca:	dc11      	bgt.n	8027cf0 <_strtod_l+0x248>
 8027ccc:	230a      	movs	r3, #10
 8027cce:	fb03 2909 	mla	r9, r3, r9, r2
 8027cd2:	2100      	movs	r1, #0
 8027cd4:	e013      	b.n	8027cfe <_strtod_l+0x256>
 8027cd6:	4628      	mov	r0, r5
 8027cd8:	e7dc      	b.n	8027c94 <_strtod_l+0x1ec>
 8027cda:	2908      	cmp	r1, #8
 8027cdc:	f101 0101 	add.w	r1, r1, #1
 8027ce0:	dc02      	bgt.n	8027ce8 <_strtod_l+0x240>
 8027ce2:	fb04 f909 	mul.w	r9, r4, r9
 8027ce6:	e7ea      	b.n	8027cbe <_strtod_l+0x216>
 8027ce8:	2910      	cmp	r1, #16
 8027cea:	bfd8      	it	le
 8027cec:	4366      	mulle	r6, r4
 8027cee:	e7e6      	b.n	8027cbe <_strtod_l+0x216>
 8027cf0:	2b0f      	cmp	r3, #15
 8027cf2:	dcee      	bgt.n	8027cd2 <_strtod_l+0x22a>
 8027cf4:	230a      	movs	r3, #10
 8027cf6:	fb03 2606 	mla	r6, r3, r6, r2
 8027cfa:	e7ea      	b.n	8027cd2 <_strtod_l+0x22a>
 8027cfc:	461c      	mov	r4, r3
 8027cfe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027d00:	1c5a      	adds	r2, r3, #1
 8027d02:	9211      	str	r2, [sp, #68]	@ 0x44
 8027d04:	785a      	ldrb	r2, [r3, #1]
 8027d06:	4608      	mov	r0, r1
 8027d08:	4623      	mov	r3, r4
 8027d0a:	e7b7      	b.n	8027c7c <_strtod_l+0x1d4>
 8027d0c:	2301      	movs	r3, #1
 8027d0e:	2700      	movs	r7, #0
 8027d10:	9306      	str	r3, [sp, #24]
 8027d12:	e786      	b.n	8027c22 <_strtod_l+0x17a>
 8027d14:	f04f 0e00 	mov.w	lr, #0
 8027d18:	f108 0202 	add.w	r2, r8, #2
 8027d1c:	9211      	str	r2, [sp, #68]	@ 0x44
 8027d1e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8027d22:	e78f      	b.n	8027c44 <_strtod_l+0x19c>
 8027d24:	f04f 0e01 	mov.w	lr, #1
 8027d28:	e7f6      	b.n	8027d18 <_strtod_l+0x270>
 8027d2a:	bf00      	nop
 8027d2c:	08029ae8 	.word	0x08029ae8
 8027d30:	08029ad0 	.word	0x08029ad0
 8027d34:	7ff00000 	.word	0x7ff00000
 8027d38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027d3a:	1c54      	adds	r4, r2, #1
 8027d3c:	9411      	str	r4, [sp, #68]	@ 0x44
 8027d3e:	7852      	ldrb	r2, [r2, #1]
 8027d40:	2a30      	cmp	r2, #48	@ 0x30
 8027d42:	d0f9      	beq.n	8027d38 <_strtod_l+0x290>
 8027d44:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8027d48:	2c08      	cmp	r4, #8
 8027d4a:	d881      	bhi.n	8027c50 <_strtod_l+0x1a8>
 8027d4c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8027d50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027d52:	9209      	str	r2, [sp, #36]	@ 0x24
 8027d54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8027d56:	1c51      	adds	r1, r2, #1
 8027d58:	9111      	str	r1, [sp, #68]	@ 0x44
 8027d5a:	7852      	ldrb	r2, [r2, #1]
 8027d5c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8027d60:	2c09      	cmp	r4, #9
 8027d62:	d938      	bls.n	8027dd6 <_strtod_l+0x32e>
 8027d64:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027d66:	1b0c      	subs	r4, r1, r4
 8027d68:	2c08      	cmp	r4, #8
 8027d6a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8027d6e:	dc02      	bgt.n	8027d76 <_strtod_l+0x2ce>
 8027d70:	4564      	cmp	r4, ip
 8027d72:	bfa8      	it	ge
 8027d74:	4664      	movge	r4, ip
 8027d76:	f1be 0f00 	cmp.w	lr, #0
 8027d7a:	d000      	beq.n	8027d7e <_strtod_l+0x2d6>
 8027d7c:	4264      	negs	r4, r4
 8027d7e:	2b00      	cmp	r3, #0
 8027d80:	d14e      	bne.n	8027e20 <_strtod_l+0x378>
 8027d82:	9b07      	ldr	r3, [sp, #28]
 8027d84:	4318      	orrs	r0, r3
 8027d86:	f47f aeca 	bne.w	8027b1e <_strtod_l+0x76>
 8027d8a:	9b06      	ldr	r3, [sp, #24]
 8027d8c:	2b00      	cmp	r3, #0
 8027d8e:	f47f aee2 	bne.w	8027b56 <_strtod_l+0xae>
 8027d92:	2a69      	cmp	r2, #105	@ 0x69
 8027d94:	d027      	beq.n	8027de6 <_strtod_l+0x33e>
 8027d96:	dc24      	bgt.n	8027de2 <_strtod_l+0x33a>
 8027d98:	2a49      	cmp	r2, #73	@ 0x49
 8027d9a:	d024      	beq.n	8027de6 <_strtod_l+0x33e>
 8027d9c:	2a4e      	cmp	r2, #78	@ 0x4e
 8027d9e:	f47f aeda 	bne.w	8027b56 <_strtod_l+0xae>
 8027da2:	4997      	ldr	r1, [pc, #604]	@ (8028000 <_strtod_l+0x558>)
 8027da4:	a811      	add	r0, sp, #68	@ 0x44
 8027da6:	f001 f9ab 	bl	8029100 <__match>
 8027daa:	2800      	cmp	r0, #0
 8027dac:	f43f aed3 	beq.w	8027b56 <_strtod_l+0xae>
 8027db0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027db2:	781b      	ldrb	r3, [r3, #0]
 8027db4:	2b28      	cmp	r3, #40	@ 0x28
 8027db6:	d12d      	bne.n	8027e14 <_strtod_l+0x36c>
 8027db8:	4992      	ldr	r1, [pc, #584]	@ (8028004 <_strtod_l+0x55c>)
 8027dba:	aa14      	add	r2, sp, #80	@ 0x50
 8027dbc:	a811      	add	r0, sp, #68	@ 0x44
 8027dbe:	f001 f9b3 	bl	8029128 <__hexnan>
 8027dc2:	2805      	cmp	r0, #5
 8027dc4:	d126      	bne.n	8027e14 <_strtod_l+0x36c>
 8027dc6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8027dc8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8027dcc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8027dd0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8027dd4:	e6a3      	b.n	8027b1e <_strtod_l+0x76>
 8027dd6:	240a      	movs	r4, #10
 8027dd8:	fb04 2c0c 	mla	ip, r4, ip, r2
 8027ddc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8027de0:	e7b8      	b.n	8027d54 <_strtod_l+0x2ac>
 8027de2:	2a6e      	cmp	r2, #110	@ 0x6e
 8027de4:	e7db      	b.n	8027d9e <_strtod_l+0x2f6>
 8027de6:	4988      	ldr	r1, [pc, #544]	@ (8028008 <_strtod_l+0x560>)
 8027de8:	a811      	add	r0, sp, #68	@ 0x44
 8027dea:	f001 f989 	bl	8029100 <__match>
 8027dee:	2800      	cmp	r0, #0
 8027df0:	f43f aeb1 	beq.w	8027b56 <_strtod_l+0xae>
 8027df4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027df6:	4985      	ldr	r1, [pc, #532]	@ (802800c <_strtod_l+0x564>)
 8027df8:	3b01      	subs	r3, #1
 8027dfa:	a811      	add	r0, sp, #68	@ 0x44
 8027dfc:	9311      	str	r3, [sp, #68]	@ 0x44
 8027dfe:	f001 f97f 	bl	8029100 <__match>
 8027e02:	b910      	cbnz	r0, 8027e0a <_strtod_l+0x362>
 8027e04:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027e06:	3301      	adds	r3, #1
 8027e08:	9311      	str	r3, [sp, #68]	@ 0x44
 8027e0a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8028020 <_strtod_l+0x578>
 8027e0e:	f04f 0a00 	mov.w	sl, #0
 8027e12:	e684      	b.n	8027b1e <_strtod_l+0x76>
 8027e14:	487e      	ldr	r0, [pc, #504]	@ (8028010 <_strtod_l+0x568>)
 8027e16:	f000 feaf 	bl	8028b78 <nan>
 8027e1a:	ec5b ab10 	vmov	sl, fp, d0
 8027e1e:	e67e      	b.n	8027b1e <_strtod_l+0x76>
 8027e20:	ee07 9a90 	vmov	s15, r9
 8027e24:	1be2      	subs	r2, r4, r7
 8027e26:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8027e2a:	2d00      	cmp	r5, #0
 8027e2c:	bf08      	it	eq
 8027e2e:	461d      	moveq	r5, r3
 8027e30:	2b10      	cmp	r3, #16
 8027e32:	9209      	str	r2, [sp, #36]	@ 0x24
 8027e34:	461a      	mov	r2, r3
 8027e36:	bfa8      	it	ge
 8027e38:	2210      	movge	r2, #16
 8027e3a:	2b09      	cmp	r3, #9
 8027e3c:	ec5b ab17 	vmov	sl, fp, d7
 8027e40:	dc15      	bgt.n	8027e6e <_strtod_l+0x3c6>
 8027e42:	1be1      	subs	r1, r4, r7
 8027e44:	2900      	cmp	r1, #0
 8027e46:	f43f ae6a 	beq.w	8027b1e <_strtod_l+0x76>
 8027e4a:	eba4 0107 	sub.w	r1, r4, r7
 8027e4e:	dd72      	ble.n	8027f36 <_strtod_l+0x48e>
 8027e50:	2916      	cmp	r1, #22
 8027e52:	dc59      	bgt.n	8027f08 <_strtod_l+0x460>
 8027e54:	4b6f      	ldr	r3, [pc, #444]	@ (8028014 <_strtod_l+0x56c>)
 8027e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027e58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8027e5c:	ed93 7b00 	vldr	d7, [r3]
 8027e60:	ec4b ab16 	vmov	d6, sl, fp
 8027e64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027e68:	ec5b ab17 	vmov	sl, fp, d7
 8027e6c:	e657      	b.n	8027b1e <_strtod_l+0x76>
 8027e6e:	4969      	ldr	r1, [pc, #420]	@ (8028014 <_strtod_l+0x56c>)
 8027e70:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8027e74:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8027e78:	ee06 6a90 	vmov	s13, r6
 8027e7c:	2b0f      	cmp	r3, #15
 8027e7e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8027e82:	eea7 6b05 	vfma.f64	d6, d7, d5
 8027e86:	ec5b ab16 	vmov	sl, fp, d6
 8027e8a:	ddda      	ble.n	8027e42 <_strtod_l+0x39a>
 8027e8c:	1a9a      	subs	r2, r3, r2
 8027e8e:	1be1      	subs	r1, r4, r7
 8027e90:	440a      	add	r2, r1
 8027e92:	2a00      	cmp	r2, #0
 8027e94:	f340 8094 	ble.w	8027fc0 <_strtod_l+0x518>
 8027e98:	f012 000f 	ands.w	r0, r2, #15
 8027e9c:	d00a      	beq.n	8027eb4 <_strtod_l+0x40c>
 8027e9e:	495d      	ldr	r1, [pc, #372]	@ (8028014 <_strtod_l+0x56c>)
 8027ea0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8027ea4:	ed91 7b00 	vldr	d7, [r1]
 8027ea8:	ec4b ab16 	vmov	d6, sl, fp
 8027eac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027eb0:	ec5b ab17 	vmov	sl, fp, d7
 8027eb4:	f032 020f 	bics.w	r2, r2, #15
 8027eb8:	d073      	beq.n	8027fa2 <_strtod_l+0x4fa>
 8027eba:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8027ebe:	dd47      	ble.n	8027f50 <_strtod_l+0x4a8>
 8027ec0:	2400      	movs	r4, #0
 8027ec2:	4625      	mov	r5, r4
 8027ec4:	9407      	str	r4, [sp, #28]
 8027ec6:	4626      	mov	r6, r4
 8027ec8:	9a05      	ldr	r2, [sp, #20]
 8027eca:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8028020 <_strtod_l+0x578>
 8027ece:	2322      	movs	r3, #34	@ 0x22
 8027ed0:	6013      	str	r3, [r2, #0]
 8027ed2:	f04f 0a00 	mov.w	sl, #0
 8027ed6:	9b07      	ldr	r3, [sp, #28]
 8027ed8:	2b00      	cmp	r3, #0
 8027eda:	f43f ae20 	beq.w	8027b1e <_strtod_l+0x76>
 8027ede:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027ee0:	9805      	ldr	r0, [sp, #20]
 8027ee2:	f7ff f957 	bl	8027194 <_Bfree>
 8027ee6:	9805      	ldr	r0, [sp, #20]
 8027ee8:	4631      	mov	r1, r6
 8027eea:	f7ff f953 	bl	8027194 <_Bfree>
 8027eee:	9805      	ldr	r0, [sp, #20]
 8027ef0:	4629      	mov	r1, r5
 8027ef2:	f7ff f94f 	bl	8027194 <_Bfree>
 8027ef6:	9907      	ldr	r1, [sp, #28]
 8027ef8:	9805      	ldr	r0, [sp, #20]
 8027efa:	f7ff f94b 	bl	8027194 <_Bfree>
 8027efe:	9805      	ldr	r0, [sp, #20]
 8027f00:	4621      	mov	r1, r4
 8027f02:	f7ff f947 	bl	8027194 <_Bfree>
 8027f06:	e60a      	b.n	8027b1e <_strtod_l+0x76>
 8027f08:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8027f0c:	1be0      	subs	r0, r4, r7
 8027f0e:	4281      	cmp	r1, r0
 8027f10:	dbbc      	blt.n	8027e8c <_strtod_l+0x3e4>
 8027f12:	4a40      	ldr	r2, [pc, #256]	@ (8028014 <_strtod_l+0x56c>)
 8027f14:	f1c3 030f 	rsb	r3, r3, #15
 8027f18:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8027f1c:	ed91 7b00 	vldr	d7, [r1]
 8027f20:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8027f22:	ec4b ab16 	vmov	d6, sl, fp
 8027f26:	1acb      	subs	r3, r1, r3
 8027f28:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8027f2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027f30:	ed92 6b00 	vldr	d6, [r2]
 8027f34:	e796      	b.n	8027e64 <_strtod_l+0x3bc>
 8027f36:	3116      	adds	r1, #22
 8027f38:	dba8      	blt.n	8027e8c <_strtod_l+0x3e4>
 8027f3a:	4b36      	ldr	r3, [pc, #216]	@ (8028014 <_strtod_l+0x56c>)
 8027f3c:	1b3c      	subs	r4, r7, r4
 8027f3e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8027f42:	ed94 7b00 	vldr	d7, [r4]
 8027f46:	ec4b ab16 	vmov	d6, sl, fp
 8027f4a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027f4e:	e78b      	b.n	8027e68 <_strtod_l+0x3c0>
 8027f50:	2000      	movs	r0, #0
 8027f52:	ec4b ab17 	vmov	d7, sl, fp
 8027f56:	4e30      	ldr	r6, [pc, #192]	@ (8028018 <_strtod_l+0x570>)
 8027f58:	1112      	asrs	r2, r2, #4
 8027f5a:	4601      	mov	r1, r0
 8027f5c:	2a01      	cmp	r2, #1
 8027f5e:	dc23      	bgt.n	8027fa8 <_strtod_l+0x500>
 8027f60:	b108      	cbz	r0, 8027f66 <_strtod_l+0x4be>
 8027f62:	ec5b ab17 	vmov	sl, fp, d7
 8027f66:	4a2c      	ldr	r2, [pc, #176]	@ (8028018 <_strtod_l+0x570>)
 8027f68:	482c      	ldr	r0, [pc, #176]	@ (802801c <_strtod_l+0x574>)
 8027f6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8027f6e:	ed92 7b00 	vldr	d7, [r2]
 8027f72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8027f76:	ec4b ab16 	vmov	d6, sl, fp
 8027f7a:	4a29      	ldr	r2, [pc, #164]	@ (8028020 <_strtod_l+0x578>)
 8027f7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027f80:	ee17 1a90 	vmov	r1, s15
 8027f84:	400a      	ands	r2, r1
 8027f86:	4282      	cmp	r2, r0
 8027f88:	ec5b ab17 	vmov	sl, fp, d7
 8027f8c:	d898      	bhi.n	8027ec0 <_strtod_l+0x418>
 8027f8e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8027f92:	4282      	cmp	r2, r0
 8027f94:	bf86      	itte	hi
 8027f96:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8028024 <_strtod_l+0x57c>
 8027f9a:	f04f 3aff 	movhi.w	sl, #4294967295
 8027f9e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8027fa2:	2200      	movs	r2, #0
 8027fa4:	9206      	str	r2, [sp, #24]
 8027fa6:	e076      	b.n	8028096 <_strtod_l+0x5ee>
 8027fa8:	f012 0f01 	tst.w	r2, #1
 8027fac:	d004      	beq.n	8027fb8 <_strtod_l+0x510>
 8027fae:	ed96 6b00 	vldr	d6, [r6]
 8027fb2:	2001      	movs	r0, #1
 8027fb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027fb8:	3101      	adds	r1, #1
 8027fba:	1052      	asrs	r2, r2, #1
 8027fbc:	3608      	adds	r6, #8
 8027fbe:	e7cd      	b.n	8027f5c <_strtod_l+0x4b4>
 8027fc0:	d0ef      	beq.n	8027fa2 <_strtod_l+0x4fa>
 8027fc2:	4252      	negs	r2, r2
 8027fc4:	f012 000f 	ands.w	r0, r2, #15
 8027fc8:	d00a      	beq.n	8027fe0 <_strtod_l+0x538>
 8027fca:	4912      	ldr	r1, [pc, #72]	@ (8028014 <_strtod_l+0x56c>)
 8027fcc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8027fd0:	ed91 7b00 	vldr	d7, [r1]
 8027fd4:	ec4b ab16 	vmov	d6, sl, fp
 8027fd8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8027fdc:	ec5b ab17 	vmov	sl, fp, d7
 8027fe0:	1112      	asrs	r2, r2, #4
 8027fe2:	d0de      	beq.n	8027fa2 <_strtod_l+0x4fa>
 8027fe4:	2a1f      	cmp	r2, #31
 8027fe6:	dd1f      	ble.n	8028028 <_strtod_l+0x580>
 8027fe8:	2400      	movs	r4, #0
 8027fea:	4625      	mov	r5, r4
 8027fec:	9407      	str	r4, [sp, #28]
 8027fee:	4626      	mov	r6, r4
 8027ff0:	9a05      	ldr	r2, [sp, #20]
 8027ff2:	2322      	movs	r3, #34	@ 0x22
 8027ff4:	f04f 0a00 	mov.w	sl, #0
 8027ff8:	f04f 0b00 	mov.w	fp, #0
 8027ffc:	6013      	str	r3, [r2, #0]
 8027ffe:	e76a      	b.n	8027ed6 <_strtod_l+0x42e>
 8028000:	080298bd 	.word	0x080298bd
 8028004:	08029ad4 	.word	0x08029ad4
 8028008:	080298b5 	.word	0x080298b5
 802800c:	080298ec 	.word	0x080298ec
 8028010:	08029c7d 	.word	0x08029c7d
 8028014:	08029a08 	.word	0x08029a08
 8028018:	080299e0 	.word	0x080299e0
 802801c:	7ca00000 	.word	0x7ca00000
 8028020:	7ff00000 	.word	0x7ff00000
 8028024:	7fefffff 	.word	0x7fefffff
 8028028:	f012 0110 	ands.w	r1, r2, #16
 802802c:	bf18      	it	ne
 802802e:	216a      	movne	r1, #106	@ 0x6a
 8028030:	9106      	str	r1, [sp, #24]
 8028032:	ec4b ab17 	vmov	d7, sl, fp
 8028036:	49b0      	ldr	r1, [pc, #704]	@ (80282f8 <_strtod_l+0x850>)
 8028038:	2000      	movs	r0, #0
 802803a:	07d6      	lsls	r6, r2, #31
 802803c:	d504      	bpl.n	8028048 <_strtod_l+0x5a0>
 802803e:	ed91 6b00 	vldr	d6, [r1]
 8028042:	2001      	movs	r0, #1
 8028044:	ee27 7b06 	vmul.f64	d7, d7, d6
 8028048:	1052      	asrs	r2, r2, #1
 802804a:	f101 0108 	add.w	r1, r1, #8
 802804e:	d1f4      	bne.n	802803a <_strtod_l+0x592>
 8028050:	b108      	cbz	r0, 8028056 <_strtod_l+0x5ae>
 8028052:	ec5b ab17 	vmov	sl, fp, d7
 8028056:	9a06      	ldr	r2, [sp, #24]
 8028058:	b1b2      	cbz	r2, 8028088 <_strtod_l+0x5e0>
 802805a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 802805e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8028062:	2a00      	cmp	r2, #0
 8028064:	4658      	mov	r0, fp
 8028066:	dd0f      	ble.n	8028088 <_strtod_l+0x5e0>
 8028068:	2a1f      	cmp	r2, #31
 802806a:	dd55      	ble.n	8028118 <_strtod_l+0x670>
 802806c:	2a34      	cmp	r2, #52	@ 0x34
 802806e:	bfde      	ittt	le
 8028070:	f04f 32ff 	movle.w	r2, #4294967295
 8028074:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8028078:	408a      	lslle	r2, r1
 802807a:	f04f 0a00 	mov.w	sl, #0
 802807e:	bfcc      	ite	gt
 8028080:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8028084:	ea02 0b00 	andle.w	fp, r2, r0
 8028088:	ec4b ab17 	vmov	d7, sl, fp
 802808c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8028090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028094:	d0a8      	beq.n	8027fe8 <_strtod_l+0x540>
 8028096:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8028098:	9805      	ldr	r0, [sp, #20]
 802809a:	f8cd 9000 	str.w	r9, [sp]
 802809e:	462a      	mov	r2, r5
 80280a0:	f7ff f8e0 	bl	8027264 <__s2b>
 80280a4:	9007      	str	r0, [sp, #28]
 80280a6:	2800      	cmp	r0, #0
 80280a8:	f43f af0a 	beq.w	8027ec0 <_strtod_l+0x418>
 80280ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80280ae:	1b3f      	subs	r7, r7, r4
 80280b0:	2b00      	cmp	r3, #0
 80280b2:	bfb4      	ite	lt
 80280b4:	463b      	movlt	r3, r7
 80280b6:	2300      	movge	r3, #0
 80280b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80280ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80280bc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80282e8 <_strtod_l+0x840>
 80280c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80280c4:	2400      	movs	r4, #0
 80280c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80280c8:	4625      	mov	r5, r4
 80280ca:	9b07      	ldr	r3, [sp, #28]
 80280cc:	9805      	ldr	r0, [sp, #20]
 80280ce:	6859      	ldr	r1, [r3, #4]
 80280d0:	f7ff f820 	bl	8027114 <_Balloc>
 80280d4:	4606      	mov	r6, r0
 80280d6:	2800      	cmp	r0, #0
 80280d8:	f43f aef6 	beq.w	8027ec8 <_strtod_l+0x420>
 80280dc:	9b07      	ldr	r3, [sp, #28]
 80280de:	691a      	ldr	r2, [r3, #16]
 80280e0:	ec4b ab19 	vmov	d9, sl, fp
 80280e4:	3202      	adds	r2, #2
 80280e6:	f103 010c 	add.w	r1, r3, #12
 80280ea:	0092      	lsls	r2, r2, #2
 80280ec:	300c      	adds	r0, #12
 80280ee:	f000 fd33 	bl	8028b58 <memcpy>
 80280f2:	eeb0 0b49 	vmov.f64	d0, d9
 80280f6:	9805      	ldr	r0, [sp, #20]
 80280f8:	aa14      	add	r2, sp, #80	@ 0x50
 80280fa:	a913      	add	r1, sp, #76	@ 0x4c
 80280fc:	f7ff fbee 	bl	80278dc <__d2b>
 8028100:	9012      	str	r0, [sp, #72]	@ 0x48
 8028102:	2800      	cmp	r0, #0
 8028104:	f43f aee0 	beq.w	8027ec8 <_strtod_l+0x420>
 8028108:	9805      	ldr	r0, [sp, #20]
 802810a:	2101      	movs	r1, #1
 802810c:	f7ff f940 	bl	8027390 <__i2b>
 8028110:	4605      	mov	r5, r0
 8028112:	b940      	cbnz	r0, 8028126 <_strtod_l+0x67e>
 8028114:	2500      	movs	r5, #0
 8028116:	e6d7      	b.n	8027ec8 <_strtod_l+0x420>
 8028118:	f04f 31ff 	mov.w	r1, #4294967295
 802811c:	fa01 f202 	lsl.w	r2, r1, r2
 8028120:	ea02 0a0a 	and.w	sl, r2, sl
 8028124:	e7b0      	b.n	8028088 <_strtod_l+0x5e0>
 8028126:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8028128:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802812a:	2f00      	cmp	r7, #0
 802812c:	bfab      	itete	ge
 802812e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8028130:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8028132:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8028136:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 802813a:	bfac      	ite	ge
 802813c:	eb07 0903 	addge.w	r9, r7, r3
 8028140:	eba3 0807 	sublt.w	r8, r3, r7
 8028144:	9b06      	ldr	r3, [sp, #24]
 8028146:	1aff      	subs	r7, r7, r3
 8028148:	4417      	add	r7, r2
 802814a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 802814e:	4a6b      	ldr	r2, [pc, #428]	@ (80282fc <_strtod_l+0x854>)
 8028150:	3f01      	subs	r7, #1
 8028152:	4297      	cmp	r7, r2
 8028154:	da51      	bge.n	80281fa <_strtod_l+0x752>
 8028156:	1bd1      	subs	r1, r2, r7
 8028158:	291f      	cmp	r1, #31
 802815a:	eba3 0301 	sub.w	r3, r3, r1
 802815e:	f04f 0201 	mov.w	r2, #1
 8028162:	dc3e      	bgt.n	80281e2 <_strtod_l+0x73a>
 8028164:	408a      	lsls	r2, r1
 8028166:	920c      	str	r2, [sp, #48]	@ 0x30
 8028168:	2200      	movs	r2, #0
 802816a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802816c:	eb09 0703 	add.w	r7, r9, r3
 8028170:	4498      	add	r8, r3
 8028172:	9b06      	ldr	r3, [sp, #24]
 8028174:	45b9      	cmp	r9, r7
 8028176:	4498      	add	r8, r3
 8028178:	464b      	mov	r3, r9
 802817a:	bfa8      	it	ge
 802817c:	463b      	movge	r3, r7
 802817e:	4543      	cmp	r3, r8
 8028180:	bfa8      	it	ge
 8028182:	4643      	movge	r3, r8
 8028184:	2b00      	cmp	r3, #0
 8028186:	bfc2      	ittt	gt
 8028188:	1aff      	subgt	r7, r7, r3
 802818a:	eba8 0803 	subgt.w	r8, r8, r3
 802818e:	eba9 0903 	subgt.w	r9, r9, r3
 8028192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028194:	2b00      	cmp	r3, #0
 8028196:	dd16      	ble.n	80281c6 <_strtod_l+0x71e>
 8028198:	4629      	mov	r1, r5
 802819a:	9805      	ldr	r0, [sp, #20]
 802819c:	461a      	mov	r2, r3
 802819e:	f7ff f9b7 	bl	8027510 <__pow5mult>
 80281a2:	4605      	mov	r5, r0
 80281a4:	2800      	cmp	r0, #0
 80281a6:	d0b5      	beq.n	8028114 <_strtod_l+0x66c>
 80281a8:	4601      	mov	r1, r0
 80281aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80281ac:	9805      	ldr	r0, [sp, #20]
 80281ae:	f7ff f905 	bl	80273bc <__multiply>
 80281b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80281b4:	2800      	cmp	r0, #0
 80281b6:	f43f ae87 	beq.w	8027ec8 <_strtod_l+0x420>
 80281ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80281bc:	9805      	ldr	r0, [sp, #20]
 80281be:	f7fe ffe9 	bl	8027194 <_Bfree>
 80281c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80281c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80281c6:	2f00      	cmp	r7, #0
 80281c8:	dc1b      	bgt.n	8028202 <_strtod_l+0x75a>
 80281ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80281cc:	2b00      	cmp	r3, #0
 80281ce:	dd21      	ble.n	8028214 <_strtod_l+0x76c>
 80281d0:	4631      	mov	r1, r6
 80281d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80281d4:	9805      	ldr	r0, [sp, #20]
 80281d6:	f7ff f99b 	bl	8027510 <__pow5mult>
 80281da:	4606      	mov	r6, r0
 80281dc:	b9d0      	cbnz	r0, 8028214 <_strtod_l+0x76c>
 80281de:	2600      	movs	r6, #0
 80281e0:	e672      	b.n	8027ec8 <_strtod_l+0x420>
 80281e2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80281e6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80281ea:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80281ee:	37e2      	adds	r7, #226	@ 0xe2
 80281f0:	fa02 f107 	lsl.w	r1, r2, r7
 80281f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80281f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80281f8:	e7b8      	b.n	802816c <_strtod_l+0x6c4>
 80281fa:	2200      	movs	r2, #0
 80281fc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80281fe:	2201      	movs	r2, #1
 8028200:	e7f9      	b.n	80281f6 <_strtod_l+0x74e>
 8028202:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8028204:	9805      	ldr	r0, [sp, #20]
 8028206:	463a      	mov	r2, r7
 8028208:	f7ff f9dc 	bl	80275c4 <__lshift>
 802820c:	9012      	str	r0, [sp, #72]	@ 0x48
 802820e:	2800      	cmp	r0, #0
 8028210:	d1db      	bne.n	80281ca <_strtod_l+0x722>
 8028212:	e659      	b.n	8027ec8 <_strtod_l+0x420>
 8028214:	f1b8 0f00 	cmp.w	r8, #0
 8028218:	dd07      	ble.n	802822a <_strtod_l+0x782>
 802821a:	4631      	mov	r1, r6
 802821c:	9805      	ldr	r0, [sp, #20]
 802821e:	4642      	mov	r2, r8
 8028220:	f7ff f9d0 	bl	80275c4 <__lshift>
 8028224:	4606      	mov	r6, r0
 8028226:	2800      	cmp	r0, #0
 8028228:	d0d9      	beq.n	80281de <_strtod_l+0x736>
 802822a:	f1b9 0f00 	cmp.w	r9, #0
 802822e:	dd08      	ble.n	8028242 <_strtod_l+0x79a>
 8028230:	4629      	mov	r1, r5
 8028232:	9805      	ldr	r0, [sp, #20]
 8028234:	464a      	mov	r2, r9
 8028236:	f7ff f9c5 	bl	80275c4 <__lshift>
 802823a:	4605      	mov	r5, r0
 802823c:	2800      	cmp	r0, #0
 802823e:	f43f ae43 	beq.w	8027ec8 <_strtod_l+0x420>
 8028242:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8028244:	9805      	ldr	r0, [sp, #20]
 8028246:	4632      	mov	r2, r6
 8028248:	f7ff fa44 	bl	80276d4 <__mdiff>
 802824c:	4604      	mov	r4, r0
 802824e:	2800      	cmp	r0, #0
 8028250:	f43f ae3a 	beq.w	8027ec8 <_strtod_l+0x420>
 8028254:	2300      	movs	r3, #0
 8028256:	f8d0 800c 	ldr.w	r8, [r0, #12]
 802825a:	60c3      	str	r3, [r0, #12]
 802825c:	4629      	mov	r1, r5
 802825e:	f7ff fa1d 	bl	802769c <__mcmp>
 8028262:	2800      	cmp	r0, #0
 8028264:	da4e      	bge.n	8028304 <_strtod_l+0x85c>
 8028266:	ea58 080a 	orrs.w	r8, r8, sl
 802826a:	d174      	bne.n	8028356 <_strtod_l+0x8ae>
 802826c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8028270:	2b00      	cmp	r3, #0
 8028272:	d170      	bne.n	8028356 <_strtod_l+0x8ae>
 8028274:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8028278:	0d1b      	lsrs	r3, r3, #20
 802827a:	051b      	lsls	r3, r3, #20
 802827c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8028280:	d969      	bls.n	8028356 <_strtod_l+0x8ae>
 8028282:	6963      	ldr	r3, [r4, #20]
 8028284:	b913      	cbnz	r3, 802828c <_strtod_l+0x7e4>
 8028286:	6923      	ldr	r3, [r4, #16]
 8028288:	2b01      	cmp	r3, #1
 802828a:	dd64      	ble.n	8028356 <_strtod_l+0x8ae>
 802828c:	4621      	mov	r1, r4
 802828e:	2201      	movs	r2, #1
 8028290:	9805      	ldr	r0, [sp, #20]
 8028292:	f7ff f997 	bl	80275c4 <__lshift>
 8028296:	4629      	mov	r1, r5
 8028298:	4604      	mov	r4, r0
 802829a:	f7ff f9ff 	bl	802769c <__mcmp>
 802829e:	2800      	cmp	r0, #0
 80282a0:	dd59      	ble.n	8028356 <_strtod_l+0x8ae>
 80282a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80282a6:	9a06      	ldr	r2, [sp, #24]
 80282a8:	0d1b      	lsrs	r3, r3, #20
 80282aa:	051b      	lsls	r3, r3, #20
 80282ac:	2a00      	cmp	r2, #0
 80282ae:	d070      	beq.n	8028392 <_strtod_l+0x8ea>
 80282b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80282b4:	d86d      	bhi.n	8028392 <_strtod_l+0x8ea>
 80282b6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80282ba:	f67f ae99 	bls.w	8027ff0 <_strtod_l+0x548>
 80282be:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80282f0 <_strtod_l+0x848>
 80282c2:	ec4b ab16 	vmov	d6, sl, fp
 80282c6:	4b0e      	ldr	r3, [pc, #56]	@ (8028300 <_strtod_l+0x858>)
 80282c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80282cc:	ee17 2a90 	vmov	r2, s15
 80282d0:	4013      	ands	r3, r2
 80282d2:	ec5b ab17 	vmov	sl, fp, d7
 80282d6:	2b00      	cmp	r3, #0
 80282d8:	f47f ae01 	bne.w	8027ede <_strtod_l+0x436>
 80282dc:	9a05      	ldr	r2, [sp, #20]
 80282de:	2322      	movs	r3, #34	@ 0x22
 80282e0:	6013      	str	r3, [r2, #0]
 80282e2:	e5fc      	b.n	8027ede <_strtod_l+0x436>
 80282e4:	f3af 8000 	nop.w
 80282e8:	ffc00000 	.word	0xffc00000
 80282ec:	41dfffff 	.word	0x41dfffff
 80282f0:	00000000 	.word	0x00000000
 80282f4:	39500000 	.word	0x39500000
 80282f8:	08029b00 	.word	0x08029b00
 80282fc:	fffffc02 	.word	0xfffffc02
 8028300:	7ff00000 	.word	0x7ff00000
 8028304:	46d9      	mov	r9, fp
 8028306:	d15d      	bne.n	80283c4 <_strtod_l+0x91c>
 8028308:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802830c:	f1b8 0f00 	cmp.w	r8, #0
 8028310:	d02a      	beq.n	8028368 <_strtod_l+0x8c0>
 8028312:	4aab      	ldr	r2, [pc, #684]	@ (80285c0 <_strtod_l+0xb18>)
 8028314:	4293      	cmp	r3, r2
 8028316:	d12a      	bne.n	802836e <_strtod_l+0x8c6>
 8028318:	9b06      	ldr	r3, [sp, #24]
 802831a:	4652      	mov	r2, sl
 802831c:	b1fb      	cbz	r3, 802835e <_strtod_l+0x8b6>
 802831e:	4ba9      	ldr	r3, [pc, #676]	@ (80285c4 <_strtod_l+0xb1c>)
 8028320:	ea0b 0303 	and.w	r3, fp, r3
 8028324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8028328:	f04f 31ff 	mov.w	r1, #4294967295
 802832c:	d81a      	bhi.n	8028364 <_strtod_l+0x8bc>
 802832e:	0d1b      	lsrs	r3, r3, #20
 8028330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8028334:	fa01 f303 	lsl.w	r3, r1, r3
 8028338:	429a      	cmp	r2, r3
 802833a:	d118      	bne.n	802836e <_strtod_l+0x8c6>
 802833c:	4ba2      	ldr	r3, [pc, #648]	@ (80285c8 <_strtod_l+0xb20>)
 802833e:	4599      	cmp	r9, r3
 8028340:	d102      	bne.n	8028348 <_strtod_l+0x8a0>
 8028342:	3201      	adds	r2, #1
 8028344:	f43f adc0 	beq.w	8027ec8 <_strtod_l+0x420>
 8028348:	4b9e      	ldr	r3, [pc, #632]	@ (80285c4 <_strtod_l+0xb1c>)
 802834a:	ea09 0303 	and.w	r3, r9, r3
 802834e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8028352:	f04f 0a00 	mov.w	sl, #0
 8028356:	9b06      	ldr	r3, [sp, #24]
 8028358:	2b00      	cmp	r3, #0
 802835a:	d1b0      	bne.n	80282be <_strtod_l+0x816>
 802835c:	e5bf      	b.n	8027ede <_strtod_l+0x436>
 802835e:	f04f 33ff 	mov.w	r3, #4294967295
 8028362:	e7e9      	b.n	8028338 <_strtod_l+0x890>
 8028364:	460b      	mov	r3, r1
 8028366:	e7e7      	b.n	8028338 <_strtod_l+0x890>
 8028368:	ea53 030a 	orrs.w	r3, r3, sl
 802836c:	d099      	beq.n	80282a2 <_strtod_l+0x7fa>
 802836e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028370:	b1c3      	cbz	r3, 80283a4 <_strtod_l+0x8fc>
 8028372:	ea13 0f09 	tst.w	r3, r9
 8028376:	d0ee      	beq.n	8028356 <_strtod_l+0x8ae>
 8028378:	9a06      	ldr	r2, [sp, #24]
 802837a:	4650      	mov	r0, sl
 802837c:	4659      	mov	r1, fp
 802837e:	f1b8 0f00 	cmp.w	r8, #0
 8028382:	d013      	beq.n	80283ac <_strtod_l+0x904>
 8028384:	f7ff fb75 	bl	8027a72 <sulp>
 8028388:	ee39 7b00 	vadd.f64	d7, d9, d0
 802838c:	ec5b ab17 	vmov	sl, fp, d7
 8028390:	e7e1      	b.n	8028356 <_strtod_l+0x8ae>
 8028392:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8028396:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802839a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802839e:	f04f 3aff 	mov.w	sl, #4294967295
 80283a2:	e7d8      	b.n	8028356 <_strtod_l+0x8ae>
 80283a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80283a6:	ea13 0f0a 	tst.w	r3, sl
 80283aa:	e7e4      	b.n	8028376 <_strtod_l+0x8ce>
 80283ac:	f7ff fb61 	bl	8027a72 <sulp>
 80283b0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80283b4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80283b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283bc:	ec5b ab10 	vmov	sl, fp, d0
 80283c0:	d1c9      	bne.n	8028356 <_strtod_l+0x8ae>
 80283c2:	e615      	b.n	8027ff0 <_strtod_l+0x548>
 80283c4:	4629      	mov	r1, r5
 80283c6:	4620      	mov	r0, r4
 80283c8:	f7ff fae0 	bl	802798c <__ratio>
 80283cc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80283d0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80283d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283d8:	d85d      	bhi.n	8028496 <_strtod_l+0x9ee>
 80283da:	f1b8 0f00 	cmp.w	r8, #0
 80283de:	d164      	bne.n	80284aa <_strtod_l+0xa02>
 80283e0:	f1ba 0f00 	cmp.w	sl, #0
 80283e4:	d14b      	bne.n	802847e <_strtod_l+0x9d6>
 80283e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80283ea:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80283ee:	2b00      	cmp	r3, #0
 80283f0:	d160      	bne.n	80284b4 <_strtod_l+0xa0c>
 80283f2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80283f6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80283fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80283fe:	d401      	bmi.n	8028404 <_strtod_l+0x95c>
 8028400:	ee20 8b08 	vmul.f64	d8, d0, d8
 8028404:	eeb1 ab48 	vneg.f64	d10, d8
 8028408:	486e      	ldr	r0, [pc, #440]	@ (80285c4 <_strtod_l+0xb1c>)
 802840a:	4970      	ldr	r1, [pc, #448]	@ (80285cc <_strtod_l+0xb24>)
 802840c:	ea09 0700 	and.w	r7, r9, r0
 8028410:	428f      	cmp	r7, r1
 8028412:	ec53 2b1a 	vmov	r2, r3, d10
 8028416:	d17d      	bne.n	8028514 <_strtod_l+0xa6c>
 8028418:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 802841c:	ec4b ab1c 	vmov	d12, sl, fp
 8028420:	eeb0 0b4c 	vmov.f64	d0, d12
 8028424:	f7ff f9ea 	bl	80277fc <__ulp>
 8028428:	4866      	ldr	r0, [pc, #408]	@ (80285c4 <_strtod_l+0xb1c>)
 802842a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 802842e:	ee1c 3a90 	vmov	r3, s25
 8028432:	4a67      	ldr	r2, [pc, #412]	@ (80285d0 <_strtod_l+0xb28>)
 8028434:	ea03 0100 	and.w	r1, r3, r0
 8028438:	4291      	cmp	r1, r2
 802843a:	ec5b ab1c 	vmov	sl, fp, d12
 802843e:	d93c      	bls.n	80284ba <_strtod_l+0xa12>
 8028440:	ee19 2a90 	vmov	r2, s19
 8028444:	4b60      	ldr	r3, [pc, #384]	@ (80285c8 <_strtod_l+0xb20>)
 8028446:	429a      	cmp	r2, r3
 8028448:	d104      	bne.n	8028454 <_strtod_l+0x9ac>
 802844a:	ee19 3a10 	vmov	r3, s18
 802844e:	3301      	adds	r3, #1
 8028450:	f43f ad3a 	beq.w	8027ec8 <_strtod_l+0x420>
 8028454:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80285c8 <_strtod_l+0xb20>
 8028458:	f04f 3aff 	mov.w	sl, #4294967295
 802845c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 802845e:	9805      	ldr	r0, [sp, #20]
 8028460:	f7fe fe98 	bl	8027194 <_Bfree>
 8028464:	9805      	ldr	r0, [sp, #20]
 8028466:	4631      	mov	r1, r6
 8028468:	f7fe fe94 	bl	8027194 <_Bfree>
 802846c:	9805      	ldr	r0, [sp, #20]
 802846e:	4629      	mov	r1, r5
 8028470:	f7fe fe90 	bl	8027194 <_Bfree>
 8028474:	9805      	ldr	r0, [sp, #20]
 8028476:	4621      	mov	r1, r4
 8028478:	f7fe fe8c 	bl	8027194 <_Bfree>
 802847c:	e625      	b.n	80280ca <_strtod_l+0x622>
 802847e:	f1ba 0f01 	cmp.w	sl, #1
 8028482:	d103      	bne.n	802848c <_strtod_l+0x9e4>
 8028484:	f1bb 0f00 	cmp.w	fp, #0
 8028488:	f43f adb2 	beq.w	8027ff0 <_strtod_l+0x548>
 802848c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8028490:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8028494:	e7b8      	b.n	8028408 <_strtod_l+0x960>
 8028496:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 802849a:	ee20 8b08 	vmul.f64	d8, d0, d8
 802849e:	f1b8 0f00 	cmp.w	r8, #0
 80284a2:	d0af      	beq.n	8028404 <_strtod_l+0x95c>
 80284a4:	eeb0 ab48 	vmov.f64	d10, d8
 80284a8:	e7ae      	b.n	8028408 <_strtod_l+0x960>
 80284aa:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80284ae:	eeb0 8b4a 	vmov.f64	d8, d10
 80284b2:	e7a9      	b.n	8028408 <_strtod_l+0x960>
 80284b4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80284b8:	e7a6      	b.n	8028408 <_strtod_l+0x960>
 80284ba:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80284be:	9b06      	ldr	r3, [sp, #24]
 80284c0:	46d9      	mov	r9, fp
 80284c2:	2b00      	cmp	r3, #0
 80284c4:	d1ca      	bne.n	802845c <_strtod_l+0x9b4>
 80284c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80284ca:	0d1b      	lsrs	r3, r3, #20
 80284cc:	051b      	lsls	r3, r3, #20
 80284ce:	429f      	cmp	r7, r3
 80284d0:	d1c4      	bne.n	802845c <_strtod_l+0x9b4>
 80284d2:	ec51 0b18 	vmov	r0, r1, d8
 80284d6:	f7f8 f92f 	bl	8020738 <__aeabi_d2lz>
 80284da:	f7f8 f8ff 	bl	80206dc <__aeabi_l2d>
 80284de:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80284e2:	ec41 0b17 	vmov	d7, r0, r1
 80284e6:	ea49 090a 	orr.w	r9, r9, sl
 80284ea:	ea59 0908 	orrs.w	r9, r9, r8
 80284ee:	ee38 8b47 	vsub.f64	d8, d8, d7
 80284f2:	d03c      	beq.n	802856e <_strtod_l+0xac6>
 80284f4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80285a8 <_strtod_l+0xb00>
 80284f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80284fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028500:	f53f aced 	bmi.w	8027ede <_strtod_l+0x436>
 8028504:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80285b0 <_strtod_l+0xb08>
 8028508:	eeb4 8bc7 	vcmpe.f64	d8, d7
 802850c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028510:	dda4      	ble.n	802845c <_strtod_l+0x9b4>
 8028512:	e4e4      	b.n	8027ede <_strtod_l+0x436>
 8028514:	9906      	ldr	r1, [sp, #24]
 8028516:	b1e1      	cbz	r1, 8028552 <_strtod_l+0xaaa>
 8028518:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 802851c:	d819      	bhi.n	8028552 <_strtod_l+0xaaa>
 802851e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8028522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8028526:	d811      	bhi.n	802854c <_strtod_l+0xaa4>
 8028528:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 802852c:	ee18 3a10 	vmov	r3, s16
 8028530:	2b01      	cmp	r3, #1
 8028532:	bf38      	it	cc
 8028534:	2301      	movcc	r3, #1
 8028536:	ee08 3a10 	vmov	s16, r3
 802853a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 802853e:	f1b8 0f00 	cmp.w	r8, #0
 8028542:	d111      	bne.n	8028568 <_strtod_l+0xac0>
 8028544:	eeb1 7b48 	vneg.f64	d7, d8
 8028548:	ec53 2b17 	vmov	r2, r3, d7
 802854c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8028550:	1bcb      	subs	r3, r1, r7
 8028552:	eeb0 0b49 	vmov.f64	d0, d9
 8028556:	ec43 2b1a 	vmov	d10, r2, r3
 802855a:	f7ff f94f 	bl	80277fc <__ulp>
 802855e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8028562:	ec5b ab19 	vmov	sl, fp, d9
 8028566:	e7aa      	b.n	80284be <_strtod_l+0xa16>
 8028568:	eeb0 7b48 	vmov.f64	d7, d8
 802856c:	e7ec      	b.n	8028548 <_strtod_l+0xaa0>
 802856e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80285b8 <_strtod_l+0xb10>
 8028572:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8028576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802857a:	f57f af6f 	bpl.w	802845c <_strtod_l+0x9b4>
 802857e:	e4ae      	b.n	8027ede <_strtod_l+0x436>
 8028580:	2300      	movs	r3, #0
 8028582:	9308      	str	r3, [sp, #32]
 8028584:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028586:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8028588:	6013      	str	r3, [r2, #0]
 802858a:	f7ff bacc 	b.w	8027b26 <_strtod_l+0x7e>
 802858e:	2a65      	cmp	r2, #101	@ 0x65
 8028590:	f43f abbc 	beq.w	8027d0c <_strtod_l+0x264>
 8028594:	2a45      	cmp	r2, #69	@ 0x45
 8028596:	f43f abb9 	beq.w	8027d0c <_strtod_l+0x264>
 802859a:	2301      	movs	r3, #1
 802859c:	9306      	str	r3, [sp, #24]
 802859e:	f7ff bbf0 	b.w	8027d82 <_strtod_l+0x2da>
 80285a2:	bf00      	nop
 80285a4:	f3af 8000 	nop.w
 80285a8:	94a03595 	.word	0x94a03595
 80285ac:	3fdfffff 	.word	0x3fdfffff
 80285b0:	35afe535 	.word	0x35afe535
 80285b4:	3fe00000 	.word	0x3fe00000
 80285b8:	94a03595 	.word	0x94a03595
 80285bc:	3fcfffff 	.word	0x3fcfffff
 80285c0:	000fffff 	.word	0x000fffff
 80285c4:	7ff00000 	.word	0x7ff00000
 80285c8:	7fefffff 	.word	0x7fefffff
 80285cc:	7fe00000 	.word	0x7fe00000
 80285d0:	7c9fffff 	.word	0x7c9fffff

080285d4 <_strtod_r>:
 80285d4:	4b01      	ldr	r3, [pc, #4]	@ (80285dc <_strtod_r+0x8>)
 80285d6:	f7ff ba67 	b.w	8027aa8 <_strtod_l>
 80285da:	bf00      	nop
 80285dc:	2400006c 	.word	0x2400006c

080285e0 <_strtol_l.constprop.0>:
 80285e0:	2b24      	cmp	r3, #36	@ 0x24
 80285e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80285e6:	4686      	mov	lr, r0
 80285e8:	4690      	mov	r8, r2
 80285ea:	d801      	bhi.n	80285f0 <_strtol_l.constprop.0+0x10>
 80285ec:	2b01      	cmp	r3, #1
 80285ee:	d106      	bne.n	80285fe <_strtol_l.constprop.0+0x1e>
 80285f0:	f7fd fe7e 	bl	80262f0 <__errno>
 80285f4:	2316      	movs	r3, #22
 80285f6:	6003      	str	r3, [r0, #0]
 80285f8:	2000      	movs	r0, #0
 80285fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80285fe:	4834      	ldr	r0, [pc, #208]	@ (80286d0 <_strtol_l.constprop.0+0xf0>)
 8028600:	460d      	mov	r5, r1
 8028602:	462a      	mov	r2, r5
 8028604:	f815 4b01 	ldrb.w	r4, [r5], #1
 8028608:	5d06      	ldrb	r6, [r0, r4]
 802860a:	f016 0608 	ands.w	r6, r6, #8
 802860e:	d1f8      	bne.n	8028602 <_strtol_l.constprop.0+0x22>
 8028610:	2c2d      	cmp	r4, #45	@ 0x2d
 8028612:	d12d      	bne.n	8028670 <_strtol_l.constprop.0+0x90>
 8028614:	782c      	ldrb	r4, [r5, #0]
 8028616:	2601      	movs	r6, #1
 8028618:	1c95      	adds	r5, r2, #2
 802861a:	f033 0210 	bics.w	r2, r3, #16
 802861e:	d109      	bne.n	8028634 <_strtol_l.constprop.0+0x54>
 8028620:	2c30      	cmp	r4, #48	@ 0x30
 8028622:	d12a      	bne.n	802867a <_strtol_l.constprop.0+0x9a>
 8028624:	782a      	ldrb	r2, [r5, #0]
 8028626:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802862a:	2a58      	cmp	r2, #88	@ 0x58
 802862c:	d125      	bne.n	802867a <_strtol_l.constprop.0+0x9a>
 802862e:	786c      	ldrb	r4, [r5, #1]
 8028630:	2310      	movs	r3, #16
 8028632:	3502      	adds	r5, #2
 8028634:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8028638:	f10c 3cff 	add.w	ip, ip, #4294967295
 802863c:	2200      	movs	r2, #0
 802863e:	fbbc f9f3 	udiv	r9, ip, r3
 8028642:	4610      	mov	r0, r2
 8028644:	fb03 ca19 	mls	sl, r3, r9, ip
 8028648:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802864c:	2f09      	cmp	r7, #9
 802864e:	d81b      	bhi.n	8028688 <_strtol_l.constprop.0+0xa8>
 8028650:	463c      	mov	r4, r7
 8028652:	42a3      	cmp	r3, r4
 8028654:	dd27      	ble.n	80286a6 <_strtol_l.constprop.0+0xc6>
 8028656:	1c57      	adds	r7, r2, #1
 8028658:	d007      	beq.n	802866a <_strtol_l.constprop.0+0x8a>
 802865a:	4581      	cmp	r9, r0
 802865c:	d320      	bcc.n	80286a0 <_strtol_l.constprop.0+0xc0>
 802865e:	d101      	bne.n	8028664 <_strtol_l.constprop.0+0x84>
 8028660:	45a2      	cmp	sl, r4
 8028662:	db1d      	blt.n	80286a0 <_strtol_l.constprop.0+0xc0>
 8028664:	fb00 4003 	mla	r0, r0, r3, r4
 8028668:	2201      	movs	r2, #1
 802866a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802866e:	e7eb      	b.n	8028648 <_strtol_l.constprop.0+0x68>
 8028670:	2c2b      	cmp	r4, #43	@ 0x2b
 8028672:	bf04      	itt	eq
 8028674:	782c      	ldrbeq	r4, [r5, #0]
 8028676:	1c95      	addeq	r5, r2, #2
 8028678:	e7cf      	b.n	802861a <_strtol_l.constprop.0+0x3a>
 802867a:	2b00      	cmp	r3, #0
 802867c:	d1da      	bne.n	8028634 <_strtol_l.constprop.0+0x54>
 802867e:	2c30      	cmp	r4, #48	@ 0x30
 8028680:	bf0c      	ite	eq
 8028682:	2308      	moveq	r3, #8
 8028684:	230a      	movne	r3, #10
 8028686:	e7d5      	b.n	8028634 <_strtol_l.constprop.0+0x54>
 8028688:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 802868c:	2f19      	cmp	r7, #25
 802868e:	d801      	bhi.n	8028694 <_strtol_l.constprop.0+0xb4>
 8028690:	3c37      	subs	r4, #55	@ 0x37
 8028692:	e7de      	b.n	8028652 <_strtol_l.constprop.0+0x72>
 8028694:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8028698:	2f19      	cmp	r7, #25
 802869a:	d804      	bhi.n	80286a6 <_strtol_l.constprop.0+0xc6>
 802869c:	3c57      	subs	r4, #87	@ 0x57
 802869e:	e7d8      	b.n	8028652 <_strtol_l.constprop.0+0x72>
 80286a0:	f04f 32ff 	mov.w	r2, #4294967295
 80286a4:	e7e1      	b.n	802866a <_strtol_l.constprop.0+0x8a>
 80286a6:	1c53      	adds	r3, r2, #1
 80286a8:	d108      	bne.n	80286bc <_strtol_l.constprop.0+0xdc>
 80286aa:	2322      	movs	r3, #34	@ 0x22
 80286ac:	f8ce 3000 	str.w	r3, [lr]
 80286b0:	4660      	mov	r0, ip
 80286b2:	f1b8 0f00 	cmp.w	r8, #0
 80286b6:	d0a0      	beq.n	80285fa <_strtol_l.constprop.0+0x1a>
 80286b8:	1e69      	subs	r1, r5, #1
 80286ba:	e006      	b.n	80286ca <_strtol_l.constprop.0+0xea>
 80286bc:	b106      	cbz	r6, 80286c0 <_strtol_l.constprop.0+0xe0>
 80286be:	4240      	negs	r0, r0
 80286c0:	f1b8 0f00 	cmp.w	r8, #0
 80286c4:	d099      	beq.n	80285fa <_strtol_l.constprop.0+0x1a>
 80286c6:	2a00      	cmp	r2, #0
 80286c8:	d1f6      	bne.n	80286b8 <_strtol_l.constprop.0+0xd8>
 80286ca:	f8c8 1000 	str.w	r1, [r8]
 80286ce:	e794      	b.n	80285fa <_strtol_l.constprop.0+0x1a>
 80286d0:	08029b29 	.word	0x08029b29

080286d4 <_strtol_r>:
 80286d4:	f7ff bf84 	b.w	80285e0 <_strtol_l.constprop.0>

080286d8 <__ssputs_r>:
 80286d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80286dc:	688e      	ldr	r6, [r1, #8]
 80286de:	461f      	mov	r7, r3
 80286e0:	42be      	cmp	r6, r7
 80286e2:	680b      	ldr	r3, [r1, #0]
 80286e4:	4682      	mov	sl, r0
 80286e6:	460c      	mov	r4, r1
 80286e8:	4690      	mov	r8, r2
 80286ea:	d82d      	bhi.n	8028748 <__ssputs_r+0x70>
 80286ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80286f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80286f4:	d026      	beq.n	8028744 <__ssputs_r+0x6c>
 80286f6:	6965      	ldr	r5, [r4, #20]
 80286f8:	6909      	ldr	r1, [r1, #16]
 80286fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80286fe:	eba3 0901 	sub.w	r9, r3, r1
 8028702:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8028706:	1c7b      	adds	r3, r7, #1
 8028708:	444b      	add	r3, r9
 802870a:	106d      	asrs	r5, r5, #1
 802870c:	429d      	cmp	r5, r3
 802870e:	bf38      	it	cc
 8028710:	461d      	movcc	r5, r3
 8028712:	0553      	lsls	r3, r2, #21
 8028714:	d527      	bpl.n	8028766 <__ssputs_r+0x8e>
 8028716:	4629      	mov	r1, r5
 8028718:	f7fe fc70 	bl	8026ffc <_malloc_r>
 802871c:	4606      	mov	r6, r0
 802871e:	b360      	cbz	r0, 802877a <__ssputs_r+0xa2>
 8028720:	6921      	ldr	r1, [r4, #16]
 8028722:	464a      	mov	r2, r9
 8028724:	f000 fa18 	bl	8028b58 <memcpy>
 8028728:	89a3      	ldrh	r3, [r4, #12]
 802872a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802872e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8028732:	81a3      	strh	r3, [r4, #12]
 8028734:	6126      	str	r6, [r4, #16]
 8028736:	6165      	str	r5, [r4, #20]
 8028738:	444e      	add	r6, r9
 802873a:	eba5 0509 	sub.w	r5, r5, r9
 802873e:	6026      	str	r6, [r4, #0]
 8028740:	60a5      	str	r5, [r4, #8]
 8028742:	463e      	mov	r6, r7
 8028744:	42be      	cmp	r6, r7
 8028746:	d900      	bls.n	802874a <__ssputs_r+0x72>
 8028748:	463e      	mov	r6, r7
 802874a:	6820      	ldr	r0, [r4, #0]
 802874c:	4632      	mov	r2, r6
 802874e:	4641      	mov	r1, r8
 8028750:	f000 f9c6 	bl	8028ae0 <memmove>
 8028754:	68a3      	ldr	r3, [r4, #8]
 8028756:	1b9b      	subs	r3, r3, r6
 8028758:	60a3      	str	r3, [r4, #8]
 802875a:	6823      	ldr	r3, [r4, #0]
 802875c:	4433      	add	r3, r6
 802875e:	6023      	str	r3, [r4, #0]
 8028760:	2000      	movs	r0, #0
 8028762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028766:	462a      	mov	r2, r5
 8028768:	f000 fd8b 	bl	8029282 <_realloc_r>
 802876c:	4606      	mov	r6, r0
 802876e:	2800      	cmp	r0, #0
 8028770:	d1e0      	bne.n	8028734 <__ssputs_r+0x5c>
 8028772:	6921      	ldr	r1, [r4, #16]
 8028774:	4650      	mov	r0, sl
 8028776:	f7fe fbcd 	bl	8026f14 <_free_r>
 802877a:	230c      	movs	r3, #12
 802877c:	f8ca 3000 	str.w	r3, [sl]
 8028780:	89a3      	ldrh	r3, [r4, #12]
 8028782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028786:	81a3      	strh	r3, [r4, #12]
 8028788:	f04f 30ff 	mov.w	r0, #4294967295
 802878c:	e7e9      	b.n	8028762 <__ssputs_r+0x8a>
	...

08028790 <_svfiprintf_r>:
 8028790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028794:	4698      	mov	r8, r3
 8028796:	898b      	ldrh	r3, [r1, #12]
 8028798:	061b      	lsls	r3, r3, #24
 802879a:	b09d      	sub	sp, #116	@ 0x74
 802879c:	4607      	mov	r7, r0
 802879e:	460d      	mov	r5, r1
 80287a0:	4614      	mov	r4, r2
 80287a2:	d510      	bpl.n	80287c6 <_svfiprintf_r+0x36>
 80287a4:	690b      	ldr	r3, [r1, #16]
 80287a6:	b973      	cbnz	r3, 80287c6 <_svfiprintf_r+0x36>
 80287a8:	2140      	movs	r1, #64	@ 0x40
 80287aa:	f7fe fc27 	bl	8026ffc <_malloc_r>
 80287ae:	6028      	str	r0, [r5, #0]
 80287b0:	6128      	str	r0, [r5, #16]
 80287b2:	b930      	cbnz	r0, 80287c2 <_svfiprintf_r+0x32>
 80287b4:	230c      	movs	r3, #12
 80287b6:	603b      	str	r3, [r7, #0]
 80287b8:	f04f 30ff 	mov.w	r0, #4294967295
 80287bc:	b01d      	add	sp, #116	@ 0x74
 80287be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287c2:	2340      	movs	r3, #64	@ 0x40
 80287c4:	616b      	str	r3, [r5, #20]
 80287c6:	2300      	movs	r3, #0
 80287c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80287ca:	2320      	movs	r3, #32
 80287cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80287d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80287d4:	2330      	movs	r3, #48	@ 0x30
 80287d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8028974 <_svfiprintf_r+0x1e4>
 80287da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80287de:	f04f 0901 	mov.w	r9, #1
 80287e2:	4623      	mov	r3, r4
 80287e4:	469a      	mov	sl, r3
 80287e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80287ea:	b10a      	cbz	r2, 80287f0 <_svfiprintf_r+0x60>
 80287ec:	2a25      	cmp	r2, #37	@ 0x25
 80287ee:	d1f9      	bne.n	80287e4 <_svfiprintf_r+0x54>
 80287f0:	ebba 0b04 	subs.w	fp, sl, r4
 80287f4:	d00b      	beq.n	802880e <_svfiprintf_r+0x7e>
 80287f6:	465b      	mov	r3, fp
 80287f8:	4622      	mov	r2, r4
 80287fa:	4629      	mov	r1, r5
 80287fc:	4638      	mov	r0, r7
 80287fe:	f7ff ff6b 	bl	80286d8 <__ssputs_r>
 8028802:	3001      	adds	r0, #1
 8028804:	f000 80a7 	beq.w	8028956 <_svfiprintf_r+0x1c6>
 8028808:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802880a:	445a      	add	r2, fp
 802880c:	9209      	str	r2, [sp, #36]	@ 0x24
 802880e:	f89a 3000 	ldrb.w	r3, [sl]
 8028812:	2b00      	cmp	r3, #0
 8028814:	f000 809f 	beq.w	8028956 <_svfiprintf_r+0x1c6>
 8028818:	2300      	movs	r3, #0
 802881a:	f04f 32ff 	mov.w	r2, #4294967295
 802881e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028822:	f10a 0a01 	add.w	sl, sl, #1
 8028826:	9304      	str	r3, [sp, #16]
 8028828:	9307      	str	r3, [sp, #28]
 802882a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802882e:	931a      	str	r3, [sp, #104]	@ 0x68
 8028830:	4654      	mov	r4, sl
 8028832:	2205      	movs	r2, #5
 8028834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028838:	484e      	ldr	r0, [pc, #312]	@ (8028974 <_svfiprintf_r+0x1e4>)
 802883a:	f7f7 fd69 	bl	8020310 <memchr>
 802883e:	9a04      	ldr	r2, [sp, #16]
 8028840:	b9d8      	cbnz	r0, 802887a <_svfiprintf_r+0xea>
 8028842:	06d0      	lsls	r0, r2, #27
 8028844:	bf44      	itt	mi
 8028846:	2320      	movmi	r3, #32
 8028848:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802884c:	0711      	lsls	r1, r2, #28
 802884e:	bf44      	itt	mi
 8028850:	232b      	movmi	r3, #43	@ 0x2b
 8028852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8028856:	f89a 3000 	ldrb.w	r3, [sl]
 802885a:	2b2a      	cmp	r3, #42	@ 0x2a
 802885c:	d015      	beq.n	802888a <_svfiprintf_r+0xfa>
 802885e:	9a07      	ldr	r2, [sp, #28]
 8028860:	4654      	mov	r4, sl
 8028862:	2000      	movs	r0, #0
 8028864:	f04f 0c0a 	mov.w	ip, #10
 8028868:	4621      	mov	r1, r4
 802886a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802886e:	3b30      	subs	r3, #48	@ 0x30
 8028870:	2b09      	cmp	r3, #9
 8028872:	d94b      	bls.n	802890c <_svfiprintf_r+0x17c>
 8028874:	b1b0      	cbz	r0, 80288a4 <_svfiprintf_r+0x114>
 8028876:	9207      	str	r2, [sp, #28]
 8028878:	e014      	b.n	80288a4 <_svfiprintf_r+0x114>
 802887a:	eba0 0308 	sub.w	r3, r0, r8
 802887e:	fa09 f303 	lsl.w	r3, r9, r3
 8028882:	4313      	orrs	r3, r2
 8028884:	9304      	str	r3, [sp, #16]
 8028886:	46a2      	mov	sl, r4
 8028888:	e7d2      	b.n	8028830 <_svfiprintf_r+0xa0>
 802888a:	9b03      	ldr	r3, [sp, #12]
 802888c:	1d19      	adds	r1, r3, #4
 802888e:	681b      	ldr	r3, [r3, #0]
 8028890:	9103      	str	r1, [sp, #12]
 8028892:	2b00      	cmp	r3, #0
 8028894:	bfbb      	ittet	lt
 8028896:	425b      	neglt	r3, r3
 8028898:	f042 0202 	orrlt.w	r2, r2, #2
 802889c:	9307      	strge	r3, [sp, #28]
 802889e:	9307      	strlt	r3, [sp, #28]
 80288a0:	bfb8      	it	lt
 80288a2:	9204      	strlt	r2, [sp, #16]
 80288a4:	7823      	ldrb	r3, [r4, #0]
 80288a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80288a8:	d10a      	bne.n	80288c0 <_svfiprintf_r+0x130>
 80288aa:	7863      	ldrb	r3, [r4, #1]
 80288ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80288ae:	d132      	bne.n	8028916 <_svfiprintf_r+0x186>
 80288b0:	9b03      	ldr	r3, [sp, #12]
 80288b2:	1d1a      	adds	r2, r3, #4
 80288b4:	681b      	ldr	r3, [r3, #0]
 80288b6:	9203      	str	r2, [sp, #12]
 80288b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80288bc:	3402      	adds	r4, #2
 80288be:	9305      	str	r3, [sp, #20]
 80288c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8028984 <_svfiprintf_r+0x1f4>
 80288c4:	7821      	ldrb	r1, [r4, #0]
 80288c6:	2203      	movs	r2, #3
 80288c8:	4650      	mov	r0, sl
 80288ca:	f7f7 fd21 	bl	8020310 <memchr>
 80288ce:	b138      	cbz	r0, 80288e0 <_svfiprintf_r+0x150>
 80288d0:	9b04      	ldr	r3, [sp, #16]
 80288d2:	eba0 000a 	sub.w	r0, r0, sl
 80288d6:	2240      	movs	r2, #64	@ 0x40
 80288d8:	4082      	lsls	r2, r0
 80288da:	4313      	orrs	r3, r2
 80288dc:	3401      	adds	r4, #1
 80288de:	9304      	str	r3, [sp, #16]
 80288e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80288e4:	4824      	ldr	r0, [pc, #144]	@ (8028978 <_svfiprintf_r+0x1e8>)
 80288e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80288ea:	2206      	movs	r2, #6
 80288ec:	f7f7 fd10 	bl	8020310 <memchr>
 80288f0:	2800      	cmp	r0, #0
 80288f2:	d036      	beq.n	8028962 <_svfiprintf_r+0x1d2>
 80288f4:	4b21      	ldr	r3, [pc, #132]	@ (802897c <_svfiprintf_r+0x1ec>)
 80288f6:	bb1b      	cbnz	r3, 8028940 <_svfiprintf_r+0x1b0>
 80288f8:	9b03      	ldr	r3, [sp, #12]
 80288fa:	3307      	adds	r3, #7
 80288fc:	f023 0307 	bic.w	r3, r3, #7
 8028900:	3308      	adds	r3, #8
 8028902:	9303      	str	r3, [sp, #12]
 8028904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028906:	4433      	add	r3, r6
 8028908:	9309      	str	r3, [sp, #36]	@ 0x24
 802890a:	e76a      	b.n	80287e2 <_svfiprintf_r+0x52>
 802890c:	fb0c 3202 	mla	r2, ip, r2, r3
 8028910:	460c      	mov	r4, r1
 8028912:	2001      	movs	r0, #1
 8028914:	e7a8      	b.n	8028868 <_svfiprintf_r+0xd8>
 8028916:	2300      	movs	r3, #0
 8028918:	3401      	adds	r4, #1
 802891a:	9305      	str	r3, [sp, #20]
 802891c:	4619      	mov	r1, r3
 802891e:	f04f 0c0a 	mov.w	ip, #10
 8028922:	4620      	mov	r0, r4
 8028924:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028928:	3a30      	subs	r2, #48	@ 0x30
 802892a:	2a09      	cmp	r2, #9
 802892c:	d903      	bls.n	8028936 <_svfiprintf_r+0x1a6>
 802892e:	2b00      	cmp	r3, #0
 8028930:	d0c6      	beq.n	80288c0 <_svfiprintf_r+0x130>
 8028932:	9105      	str	r1, [sp, #20]
 8028934:	e7c4      	b.n	80288c0 <_svfiprintf_r+0x130>
 8028936:	fb0c 2101 	mla	r1, ip, r1, r2
 802893a:	4604      	mov	r4, r0
 802893c:	2301      	movs	r3, #1
 802893e:	e7f0      	b.n	8028922 <_svfiprintf_r+0x192>
 8028940:	ab03      	add	r3, sp, #12
 8028942:	9300      	str	r3, [sp, #0]
 8028944:	462a      	mov	r2, r5
 8028946:	4b0e      	ldr	r3, [pc, #56]	@ (8028980 <_svfiprintf_r+0x1f0>)
 8028948:	a904      	add	r1, sp, #16
 802894a:	4638      	mov	r0, r7
 802894c:	f7fc fda4 	bl	8025498 <_printf_float>
 8028950:	1c42      	adds	r2, r0, #1
 8028952:	4606      	mov	r6, r0
 8028954:	d1d6      	bne.n	8028904 <_svfiprintf_r+0x174>
 8028956:	89ab      	ldrh	r3, [r5, #12]
 8028958:	065b      	lsls	r3, r3, #25
 802895a:	f53f af2d 	bmi.w	80287b8 <_svfiprintf_r+0x28>
 802895e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028960:	e72c      	b.n	80287bc <_svfiprintf_r+0x2c>
 8028962:	ab03      	add	r3, sp, #12
 8028964:	9300      	str	r3, [sp, #0]
 8028966:	462a      	mov	r2, r5
 8028968:	4b05      	ldr	r3, [pc, #20]	@ (8028980 <_svfiprintf_r+0x1f0>)
 802896a:	a904      	add	r1, sp, #16
 802896c:	4638      	mov	r0, r7
 802896e:	f7fd f81b 	bl	80259a8 <_printf_i>
 8028972:	e7ed      	b.n	8028950 <_svfiprintf_r+0x1c0>
 8028974:	08029c29 	.word	0x08029c29
 8028978:	08029c33 	.word	0x08029c33
 802897c:	08025499 	.word	0x08025499
 8028980:	080286d9 	.word	0x080286d9
 8028984:	08029c2f 	.word	0x08029c2f

08028988 <__sflush_r>:
 8028988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028990:	0716      	lsls	r6, r2, #28
 8028992:	4605      	mov	r5, r0
 8028994:	460c      	mov	r4, r1
 8028996:	d454      	bmi.n	8028a42 <__sflush_r+0xba>
 8028998:	684b      	ldr	r3, [r1, #4]
 802899a:	2b00      	cmp	r3, #0
 802899c:	dc02      	bgt.n	80289a4 <__sflush_r+0x1c>
 802899e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80289a0:	2b00      	cmp	r3, #0
 80289a2:	dd48      	ble.n	8028a36 <__sflush_r+0xae>
 80289a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80289a6:	2e00      	cmp	r6, #0
 80289a8:	d045      	beq.n	8028a36 <__sflush_r+0xae>
 80289aa:	2300      	movs	r3, #0
 80289ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80289b0:	682f      	ldr	r7, [r5, #0]
 80289b2:	6a21      	ldr	r1, [r4, #32]
 80289b4:	602b      	str	r3, [r5, #0]
 80289b6:	d030      	beq.n	8028a1a <__sflush_r+0x92>
 80289b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80289ba:	89a3      	ldrh	r3, [r4, #12]
 80289bc:	0759      	lsls	r1, r3, #29
 80289be:	d505      	bpl.n	80289cc <__sflush_r+0x44>
 80289c0:	6863      	ldr	r3, [r4, #4]
 80289c2:	1ad2      	subs	r2, r2, r3
 80289c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80289c6:	b10b      	cbz	r3, 80289cc <__sflush_r+0x44>
 80289c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80289ca:	1ad2      	subs	r2, r2, r3
 80289cc:	2300      	movs	r3, #0
 80289ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80289d0:	6a21      	ldr	r1, [r4, #32]
 80289d2:	4628      	mov	r0, r5
 80289d4:	47b0      	blx	r6
 80289d6:	1c43      	adds	r3, r0, #1
 80289d8:	89a3      	ldrh	r3, [r4, #12]
 80289da:	d106      	bne.n	80289ea <__sflush_r+0x62>
 80289dc:	6829      	ldr	r1, [r5, #0]
 80289de:	291d      	cmp	r1, #29
 80289e0:	d82b      	bhi.n	8028a3a <__sflush_r+0xb2>
 80289e2:	4a2a      	ldr	r2, [pc, #168]	@ (8028a8c <__sflush_r+0x104>)
 80289e4:	410a      	asrs	r2, r1
 80289e6:	07d6      	lsls	r6, r2, #31
 80289e8:	d427      	bmi.n	8028a3a <__sflush_r+0xb2>
 80289ea:	2200      	movs	r2, #0
 80289ec:	6062      	str	r2, [r4, #4]
 80289ee:	04d9      	lsls	r1, r3, #19
 80289f0:	6922      	ldr	r2, [r4, #16]
 80289f2:	6022      	str	r2, [r4, #0]
 80289f4:	d504      	bpl.n	8028a00 <__sflush_r+0x78>
 80289f6:	1c42      	adds	r2, r0, #1
 80289f8:	d101      	bne.n	80289fe <__sflush_r+0x76>
 80289fa:	682b      	ldr	r3, [r5, #0]
 80289fc:	b903      	cbnz	r3, 8028a00 <__sflush_r+0x78>
 80289fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8028a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8028a02:	602f      	str	r7, [r5, #0]
 8028a04:	b1b9      	cbz	r1, 8028a36 <__sflush_r+0xae>
 8028a06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8028a0a:	4299      	cmp	r1, r3
 8028a0c:	d002      	beq.n	8028a14 <__sflush_r+0x8c>
 8028a0e:	4628      	mov	r0, r5
 8028a10:	f7fe fa80 	bl	8026f14 <_free_r>
 8028a14:	2300      	movs	r3, #0
 8028a16:	6363      	str	r3, [r4, #52]	@ 0x34
 8028a18:	e00d      	b.n	8028a36 <__sflush_r+0xae>
 8028a1a:	2301      	movs	r3, #1
 8028a1c:	4628      	mov	r0, r5
 8028a1e:	47b0      	blx	r6
 8028a20:	4602      	mov	r2, r0
 8028a22:	1c50      	adds	r0, r2, #1
 8028a24:	d1c9      	bne.n	80289ba <__sflush_r+0x32>
 8028a26:	682b      	ldr	r3, [r5, #0]
 8028a28:	2b00      	cmp	r3, #0
 8028a2a:	d0c6      	beq.n	80289ba <__sflush_r+0x32>
 8028a2c:	2b1d      	cmp	r3, #29
 8028a2e:	d001      	beq.n	8028a34 <__sflush_r+0xac>
 8028a30:	2b16      	cmp	r3, #22
 8028a32:	d11e      	bne.n	8028a72 <__sflush_r+0xea>
 8028a34:	602f      	str	r7, [r5, #0]
 8028a36:	2000      	movs	r0, #0
 8028a38:	e022      	b.n	8028a80 <__sflush_r+0xf8>
 8028a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028a3e:	b21b      	sxth	r3, r3
 8028a40:	e01b      	b.n	8028a7a <__sflush_r+0xf2>
 8028a42:	690f      	ldr	r7, [r1, #16]
 8028a44:	2f00      	cmp	r7, #0
 8028a46:	d0f6      	beq.n	8028a36 <__sflush_r+0xae>
 8028a48:	0793      	lsls	r3, r2, #30
 8028a4a:	680e      	ldr	r6, [r1, #0]
 8028a4c:	bf08      	it	eq
 8028a4e:	694b      	ldreq	r3, [r1, #20]
 8028a50:	600f      	str	r7, [r1, #0]
 8028a52:	bf18      	it	ne
 8028a54:	2300      	movne	r3, #0
 8028a56:	eba6 0807 	sub.w	r8, r6, r7
 8028a5a:	608b      	str	r3, [r1, #8]
 8028a5c:	f1b8 0f00 	cmp.w	r8, #0
 8028a60:	dde9      	ble.n	8028a36 <__sflush_r+0xae>
 8028a62:	6a21      	ldr	r1, [r4, #32]
 8028a64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8028a66:	4643      	mov	r3, r8
 8028a68:	463a      	mov	r2, r7
 8028a6a:	4628      	mov	r0, r5
 8028a6c:	47b0      	blx	r6
 8028a6e:	2800      	cmp	r0, #0
 8028a70:	dc08      	bgt.n	8028a84 <__sflush_r+0xfc>
 8028a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8028a7a:	81a3      	strh	r3, [r4, #12]
 8028a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8028a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028a84:	4407      	add	r7, r0
 8028a86:	eba8 0800 	sub.w	r8, r8, r0
 8028a8a:	e7e7      	b.n	8028a5c <__sflush_r+0xd4>
 8028a8c:	dfbffffe 	.word	0xdfbffffe

08028a90 <_fflush_r>:
 8028a90:	b538      	push	{r3, r4, r5, lr}
 8028a92:	690b      	ldr	r3, [r1, #16]
 8028a94:	4605      	mov	r5, r0
 8028a96:	460c      	mov	r4, r1
 8028a98:	b913      	cbnz	r3, 8028aa0 <_fflush_r+0x10>
 8028a9a:	2500      	movs	r5, #0
 8028a9c:	4628      	mov	r0, r5
 8028a9e:	bd38      	pop	{r3, r4, r5, pc}
 8028aa0:	b118      	cbz	r0, 8028aaa <_fflush_r+0x1a>
 8028aa2:	6a03      	ldr	r3, [r0, #32]
 8028aa4:	b90b      	cbnz	r3, 8028aaa <_fflush_r+0x1a>
 8028aa6:	f7fd fb37 	bl	8026118 <__sinit>
 8028aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028aae:	2b00      	cmp	r3, #0
 8028ab0:	d0f3      	beq.n	8028a9a <_fflush_r+0xa>
 8028ab2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8028ab4:	07d0      	lsls	r0, r2, #31
 8028ab6:	d404      	bmi.n	8028ac2 <_fflush_r+0x32>
 8028ab8:	0599      	lsls	r1, r3, #22
 8028aba:	d402      	bmi.n	8028ac2 <_fflush_r+0x32>
 8028abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028abe:	f7fd fc42 	bl	8026346 <__retarget_lock_acquire_recursive>
 8028ac2:	4628      	mov	r0, r5
 8028ac4:	4621      	mov	r1, r4
 8028ac6:	f7ff ff5f 	bl	8028988 <__sflush_r>
 8028aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8028acc:	07da      	lsls	r2, r3, #31
 8028ace:	4605      	mov	r5, r0
 8028ad0:	d4e4      	bmi.n	8028a9c <_fflush_r+0xc>
 8028ad2:	89a3      	ldrh	r3, [r4, #12]
 8028ad4:	059b      	lsls	r3, r3, #22
 8028ad6:	d4e1      	bmi.n	8028a9c <_fflush_r+0xc>
 8028ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8028ada:	f7fd fc35 	bl	8026348 <__retarget_lock_release_recursive>
 8028ade:	e7dd      	b.n	8028a9c <_fflush_r+0xc>

08028ae0 <memmove>:
 8028ae0:	4288      	cmp	r0, r1
 8028ae2:	b510      	push	{r4, lr}
 8028ae4:	eb01 0402 	add.w	r4, r1, r2
 8028ae8:	d902      	bls.n	8028af0 <memmove+0x10>
 8028aea:	4284      	cmp	r4, r0
 8028aec:	4623      	mov	r3, r4
 8028aee:	d807      	bhi.n	8028b00 <memmove+0x20>
 8028af0:	1e43      	subs	r3, r0, #1
 8028af2:	42a1      	cmp	r1, r4
 8028af4:	d008      	beq.n	8028b08 <memmove+0x28>
 8028af6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8028afa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8028afe:	e7f8      	b.n	8028af2 <memmove+0x12>
 8028b00:	4402      	add	r2, r0
 8028b02:	4601      	mov	r1, r0
 8028b04:	428a      	cmp	r2, r1
 8028b06:	d100      	bne.n	8028b0a <memmove+0x2a>
 8028b08:	bd10      	pop	{r4, pc}
 8028b0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8028b0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8028b12:	e7f7      	b.n	8028b04 <memmove+0x24>

08028b14 <strncmp>:
 8028b14:	b510      	push	{r4, lr}
 8028b16:	b16a      	cbz	r2, 8028b34 <strncmp+0x20>
 8028b18:	3901      	subs	r1, #1
 8028b1a:	1884      	adds	r4, r0, r2
 8028b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028b20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8028b24:	429a      	cmp	r2, r3
 8028b26:	d103      	bne.n	8028b30 <strncmp+0x1c>
 8028b28:	42a0      	cmp	r0, r4
 8028b2a:	d001      	beq.n	8028b30 <strncmp+0x1c>
 8028b2c:	2a00      	cmp	r2, #0
 8028b2e:	d1f5      	bne.n	8028b1c <strncmp+0x8>
 8028b30:	1ad0      	subs	r0, r2, r3
 8028b32:	bd10      	pop	{r4, pc}
 8028b34:	4610      	mov	r0, r2
 8028b36:	e7fc      	b.n	8028b32 <strncmp+0x1e>

08028b38 <_sbrk_r>:
 8028b38:	b538      	push	{r3, r4, r5, lr}
 8028b3a:	4d06      	ldr	r5, [pc, #24]	@ (8028b54 <_sbrk_r+0x1c>)
 8028b3c:	2300      	movs	r3, #0
 8028b3e:	4604      	mov	r4, r0
 8028b40:	4608      	mov	r0, r1
 8028b42:	602b      	str	r3, [r5, #0]
 8028b44:	f7f8 fb32 	bl	80211ac <_sbrk>
 8028b48:	1c43      	adds	r3, r0, #1
 8028b4a:	d102      	bne.n	8028b52 <_sbrk_r+0x1a>
 8028b4c:	682b      	ldr	r3, [r5, #0]
 8028b4e:	b103      	cbz	r3, 8028b52 <_sbrk_r+0x1a>
 8028b50:	6023      	str	r3, [r4, #0]
 8028b52:	bd38      	pop	{r3, r4, r5, pc}
 8028b54:	2400041c 	.word	0x2400041c

08028b58 <memcpy>:
 8028b58:	440a      	add	r2, r1
 8028b5a:	4291      	cmp	r1, r2
 8028b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8028b60:	d100      	bne.n	8028b64 <memcpy+0xc>
 8028b62:	4770      	bx	lr
 8028b64:	b510      	push	{r4, lr}
 8028b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028b6e:	4291      	cmp	r1, r2
 8028b70:	d1f9      	bne.n	8028b66 <memcpy+0xe>
 8028b72:	bd10      	pop	{r4, pc}
 8028b74:	0000      	movs	r0, r0
	...

08028b78 <nan>:
 8028b78:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8028b80 <nan+0x8>
 8028b7c:	4770      	bx	lr
 8028b7e:	bf00      	nop
 8028b80:	00000000 	.word	0x00000000
 8028b84:	7ff80000 	.word	0x7ff80000

08028b88 <__assert_func>:
 8028b88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028b8a:	4614      	mov	r4, r2
 8028b8c:	461a      	mov	r2, r3
 8028b8e:	4b09      	ldr	r3, [pc, #36]	@ (8028bb4 <__assert_func+0x2c>)
 8028b90:	681b      	ldr	r3, [r3, #0]
 8028b92:	4605      	mov	r5, r0
 8028b94:	68d8      	ldr	r0, [r3, #12]
 8028b96:	b954      	cbnz	r4, 8028bae <__assert_func+0x26>
 8028b98:	4b07      	ldr	r3, [pc, #28]	@ (8028bb8 <__assert_func+0x30>)
 8028b9a:	461c      	mov	r4, r3
 8028b9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028ba0:	9100      	str	r1, [sp, #0]
 8028ba2:	462b      	mov	r3, r5
 8028ba4:	4905      	ldr	r1, [pc, #20]	@ (8028bbc <__assert_func+0x34>)
 8028ba6:	f000 fba7 	bl	80292f8 <fiprintf>
 8028baa:	f000 fbb7 	bl	802931c <abort>
 8028bae:	4b04      	ldr	r3, [pc, #16]	@ (8028bc0 <__assert_func+0x38>)
 8028bb0:	e7f4      	b.n	8028b9c <__assert_func+0x14>
 8028bb2:	bf00      	nop
 8028bb4:	2400001c 	.word	0x2400001c
 8028bb8:	08029c7d 	.word	0x08029c7d
 8028bbc:	08029c4f 	.word	0x08029c4f
 8028bc0:	08029c42 	.word	0x08029c42

08028bc4 <_calloc_r>:
 8028bc4:	b570      	push	{r4, r5, r6, lr}
 8028bc6:	fba1 5402 	umull	r5, r4, r1, r2
 8028bca:	b93c      	cbnz	r4, 8028bdc <_calloc_r+0x18>
 8028bcc:	4629      	mov	r1, r5
 8028bce:	f7fe fa15 	bl	8026ffc <_malloc_r>
 8028bd2:	4606      	mov	r6, r0
 8028bd4:	b928      	cbnz	r0, 8028be2 <_calloc_r+0x1e>
 8028bd6:	2600      	movs	r6, #0
 8028bd8:	4630      	mov	r0, r6
 8028bda:	bd70      	pop	{r4, r5, r6, pc}
 8028bdc:	220c      	movs	r2, #12
 8028bde:	6002      	str	r2, [r0, #0]
 8028be0:	e7f9      	b.n	8028bd6 <_calloc_r+0x12>
 8028be2:	462a      	mov	r2, r5
 8028be4:	4621      	mov	r1, r4
 8028be6:	f7fd fb30 	bl	802624a <memset>
 8028bea:	e7f5      	b.n	8028bd8 <_calloc_r+0x14>

08028bec <rshift>:
 8028bec:	6903      	ldr	r3, [r0, #16]
 8028bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8028bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8028bfa:	f100 0414 	add.w	r4, r0, #20
 8028bfe:	dd45      	ble.n	8028c8c <rshift+0xa0>
 8028c00:	f011 011f 	ands.w	r1, r1, #31
 8028c04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8028c08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8028c0c:	d10c      	bne.n	8028c28 <rshift+0x3c>
 8028c0e:	f100 0710 	add.w	r7, r0, #16
 8028c12:	4629      	mov	r1, r5
 8028c14:	42b1      	cmp	r1, r6
 8028c16:	d334      	bcc.n	8028c82 <rshift+0x96>
 8028c18:	1a9b      	subs	r3, r3, r2
 8028c1a:	009b      	lsls	r3, r3, #2
 8028c1c:	1eea      	subs	r2, r5, #3
 8028c1e:	4296      	cmp	r6, r2
 8028c20:	bf38      	it	cc
 8028c22:	2300      	movcc	r3, #0
 8028c24:	4423      	add	r3, r4
 8028c26:	e015      	b.n	8028c54 <rshift+0x68>
 8028c28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8028c2c:	f1c1 0820 	rsb	r8, r1, #32
 8028c30:	40cf      	lsrs	r7, r1
 8028c32:	f105 0e04 	add.w	lr, r5, #4
 8028c36:	46a1      	mov	r9, r4
 8028c38:	4576      	cmp	r6, lr
 8028c3a:	46f4      	mov	ip, lr
 8028c3c:	d815      	bhi.n	8028c6a <rshift+0x7e>
 8028c3e:	1a9a      	subs	r2, r3, r2
 8028c40:	0092      	lsls	r2, r2, #2
 8028c42:	3a04      	subs	r2, #4
 8028c44:	3501      	adds	r5, #1
 8028c46:	42ae      	cmp	r6, r5
 8028c48:	bf38      	it	cc
 8028c4a:	2200      	movcc	r2, #0
 8028c4c:	18a3      	adds	r3, r4, r2
 8028c4e:	50a7      	str	r7, [r4, r2]
 8028c50:	b107      	cbz	r7, 8028c54 <rshift+0x68>
 8028c52:	3304      	adds	r3, #4
 8028c54:	1b1a      	subs	r2, r3, r4
 8028c56:	42a3      	cmp	r3, r4
 8028c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8028c5c:	bf08      	it	eq
 8028c5e:	2300      	moveq	r3, #0
 8028c60:	6102      	str	r2, [r0, #16]
 8028c62:	bf08      	it	eq
 8028c64:	6143      	streq	r3, [r0, #20]
 8028c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028c6a:	f8dc c000 	ldr.w	ip, [ip]
 8028c6e:	fa0c fc08 	lsl.w	ip, ip, r8
 8028c72:	ea4c 0707 	orr.w	r7, ip, r7
 8028c76:	f849 7b04 	str.w	r7, [r9], #4
 8028c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8028c7e:	40cf      	lsrs	r7, r1
 8028c80:	e7da      	b.n	8028c38 <rshift+0x4c>
 8028c82:	f851 cb04 	ldr.w	ip, [r1], #4
 8028c86:	f847 cf04 	str.w	ip, [r7, #4]!
 8028c8a:	e7c3      	b.n	8028c14 <rshift+0x28>
 8028c8c:	4623      	mov	r3, r4
 8028c8e:	e7e1      	b.n	8028c54 <rshift+0x68>

08028c90 <__hexdig_fun>:
 8028c90:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8028c94:	2b09      	cmp	r3, #9
 8028c96:	d802      	bhi.n	8028c9e <__hexdig_fun+0xe>
 8028c98:	3820      	subs	r0, #32
 8028c9a:	b2c0      	uxtb	r0, r0
 8028c9c:	4770      	bx	lr
 8028c9e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8028ca2:	2b05      	cmp	r3, #5
 8028ca4:	d801      	bhi.n	8028caa <__hexdig_fun+0x1a>
 8028ca6:	3847      	subs	r0, #71	@ 0x47
 8028ca8:	e7f7      	b.n	8028c9a <__hexdig_fun+0xa>
 8028caa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8028cae:	2b05      	cmp	r3, #5
 8028cb0:	d801      	bhi.n	8028cb6 <__hexdig_fun+0x26>
 8028cb2:	3827      	subs	r0, #39	@ 0x27
 8028cb4:	e7f1      	b.n	8028c9a <__hexdig_fun+0xa>
 8028cb6:	2000      	movs	r0, #0
 8028cb8:	4770      	bx	lr
	...

08028cbc <__gethex>:
 8028cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028cc0:	b085      	sub	sp, #20
 8028cc2:	468a      	mov	sl, r1
 8028cc4:	9302      	str	r3, [sp, #8]
 8028cc6:	680b      	ldr	r3, [r1, #0]
 8028cc8:	9001      	str	r0, [sp, #4]
 8028cca:	4690      	mov	r8, r2
 8028ccc:	1c9c      	adds	r4, r3, #2
 8028cce:	46a1      	mov	r9, r4
 8028cd0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8028cd4:	2830      	cmp	r0, #48	@ 0x30
 8028cd6:	d0fa      	beq.n	8028cce <__gethex+0x12>
 8028cd8:	eba9 0303 	sub.w	r3, r9, r3
 8028cdc:	f1a3 0b02 	sub.w	fp, r3, #2
 8028ce0:	f7ff ffd6 	bl	8028c90 <__hexdig_fun>
 8028ce4:	4605      	mov	r5, r0
 8028ce6:	2800      	cmp	r0, #0
 8028ce8:	d168      	bne.n	8028dbc <__gethex+0x100>
 8028cea:	49a0      	ldr	r1, [pc, #640]	@ (8028f6c <__gethex+0x2b0>)
 8028cec:	2201      	movs	r2, #1
 8028cee:	4648      	mov	r0, r9
 8028cf0:	f7ff ff10 	bl	8028b14 <strncmp>
 8028cf4:	4607      	mov	r7, r0
 8028cf6:	2800      	cmp	r0, #0
 8028cf8:	d167      	bne.n	8028dca <__gethex+0x10e>
 8028cfa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8028cfe:	4626      	mov	r6, r4
 8028d00:	f7ff ffc6 	bl	8028c90 <__hexdig_fun>
 8028d04:	2800      	cmp	r0, #0
 8028d06:	d062      	beq.n	8028dce <__gethex+0x112>
 8028d08:	4623      	mov	r3, r4
 8028d0a:	7818      	ldrb	r0, [r3, #0]
 8028d0c:	2830      	cmp	r0, #48	@ 0x30
 8028d0e:	4699      	mov	r9, r3
 8028d10:	f103 0301 	add.w	r3, r3, #1
 8028d14:	d0f9      	beq.n	8028d0a <__gethex+0x4e>
 8028d16:	f7ff ffbb 	bl	8028c90 <__hexdig_fun>
 8028d1a:	fab0 f580 	clz	r5, r0
 8028d1e:	096d      	lsrs	r5, r5, #5
 8028d20:	f04f 0b01 	mov.w	fp, #1
 8028d24:	464a      	mov	r2, r9
 8028d26:	4616      	mov	r6, r2
 8028d28:	3201      	adds	r2, #1
 8028d2a:	7830      	ldrb	r0, [r6, #0]
 8028d2c:	f7ff ffb0 	bl	8028c90 <__hexdig_fun>
 8028d30:	2800      	cmp	r0, #0
 8028d32:	d1f8      	bne.n	8028d26 <__gethex+0x6a>
 8028d34:	498d      	ldr	r1, [pc, #564]	@ (8028f6c <__gethex+0x2b0>)
 8028d36:	2201      	movs	r2, #1
 8028d38:	4630      	mov	r0, r6
 8028d3a:	f7ff feeb 	bl	8028b14 <strncmp>
 8028d3e:	2800      	cmp	r0, #0
 8028d40:	d13f      	bne.n	8028dc2 <__gethex+0x106>
 8028d42:	b944      	cbnz	r4, 8028d56 <__gethex+0x9a>
 8028d44:	1c74      	adds	r4, r6, #1
 8028d46:	4622      	mov	r2, r4
 8028d48:	4616      	mov	r6, r2
 8028d4a:	3201      	adds	r2, #1
 8028d4c:	7830      	ldrb	r0, [r6, #0]
 8028d4e:	f7ff ff9f 	bl	8028c90 <__hexdig_fun>
 8028d52:	2800      	cmp	r0, #0
 8028d54:	d1f8      	bne.n	8028d48 <__gethex+0x8c>
 8028d56:	1ba4      	subs	r4, r4, r6
 8028d58:	00a7      	lsls	r7, r4, #2
 8028d5a:	7833      	ldrb	r3, [r6, #0]
 8028d5c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8028d60:	2b50      	cmp	r3, #80	@ 0x50
 8028d62:	d13e      	bne.n	8028de2 <__gethex+0x126>
 8028d64:	7873      	ldrb	r3, [r6, #1]
 8028d66:	2b2b      	cmp	r3, #43	@ 0x2b
 8028d68:	d033      	beq.n	8028dd2 <__gethex+0x116>
 8028d6a:	2b2d      	cmp	r3, #45	@ 0x2d
 8028d6c:	d034      	beq.n	8028dd8 <__gethex+0x11c>
 8028d6e:	1c71      	adds	r1, r6, #1
 8028d70:	2400      	movs	r4, #0
 8028d72:	7808      	ldrb	r0, [r1, #0]
 8028d74:	f7ff ff8c 	bl	8028c90 <__hexdig_fun>
 8028d78:	1e43      	subs	r3, r0, #1
 8028d7a:	b2db      	uxtb	r3, r3
 8028d7c:	2b18      	cmp	r3, #24
 8028d7e:	d830      	bhi.n	8028de2 <__gethex+0x126>
 8028d80:	f1a0 0210 	sub.w	r2, r0, #16
 8028d84:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8028d88:	f7ff ff82 	bl	8028c90 <__hexdig_fun>
 8028d8c:	f100 3cff 	add.w	ip, r0, #4294967295
 8028d90:	fa5f fc8c 	uxtb.w	ip, ip
 8028d94:	f1bc 0f18 	cmp.w	ip, #24
 8028d98:	f04f 030a 	mov.w	r3, #10
 8028d9c:	d91e      	bls.n	8028ddc <__gethex+0x120>
 8028d9e:	b104      	cbz	r4, 8028da2 <__gethex+0xe6>
 8028da0:	4252      	negs	r2, r2
 8028da2:	4417      	add	r7, r2
 8028da4:	f8ca 1000 	str.w	r1, [sl]
 8028da8:	b1ed      	cbz	r5, 8028de6 <__gethex+0x12a>
 8028daa:	f1bb 0f00 	cmp.w	fp, #0
 8028dae:	bf0c      	ite	eq
 8028db0:	2506      	moveq	r5, #6
 8028db2:	2500      	movne	r5, #0
 8028db4:	4628      	mov	r0, r5
 8028db6:	b005      	add	sp, #20
 8028db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028dbc:	2500      	movs	r5, #0
 8028dbe:	462c      	mov	r4, r5
 8028dc0:	e7b0      	b.n	8028d24 <__gethex+0x68>
 8028dc2:	2c00      	cmp	r4, #0
 8028dc4:	d1c7      	bne.n	8028d56 <__gethex+0x9a>
 8028dc6:	4627      	mov	r7, r4
 8028dc8:	e7c7      	b.n	8028d5a <__gethex+0x9e>
 8028dca:	464e      	mov	r6, r9
 8028dcc:	462f      	mov	r7, r5
 8028dce:	2501      	movs	r5, #1
 8028dd0:	e7c3      	b.n	8028d5a <__gethex+0x9e>
 8028dd2:	2400      	movs	r4, #0
 8028dd4:	1cb1      	adds	r1, r6, #2
 8028dd6:	e7cc      	b.n	8028d72 <__gethex+0xb6>
 8028dd8:	2401      	movs	r4, #1
 8028dda:	e7fb      	b.n	8028dd4 <__gethex+0x118>
 8028ddc:	fb03 0002 	mla	r0, r3, r2, r0
 8028de0:	e7ce      	b.n	8028d80 <__gethex+0xc4>
 8028de2:	4631      	mov	r1, r6
 8028de4:	e7de      	b.n	8028da4 <__gethex+0xe8>
 8028de6:	eba6 0309 	sub.w	r3, r6, r9
 8028dea:	3b01      	subs	r3, #1
 8028dec:	4629      	mov	r1, r5
 8028dee:	2b07      	cmp	r3, #7
 8028df0:	dc0a      	bgt.n	8028e08 <__gethex+0x14c>
 8028df2:	9801      	ldr	r0, [sp, #4]
 8028df4:	f7fe f98e 	bl	8027114 <_Balloc>
 8028df8:	4604      	mov	r4, r0
 8028dfa:	b940      	cbnz	r0, 8028e0e <__gethex+0x152>
 8028dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8028f70 <__gethex+0x2b4>)
 8028dfe:	4602      	mov	r2, r0
 8028e00:	21e4      	movs	r1, #228	@ 0xe4
 8028e02:	485c      	ldr	r0, [pc, #368]	@ (8028f74 <__gethex+0x2b8>)
 8028e04:	f7ff fec0 	bl	8028b88 <__assert_func>
 8028e08:	3101      	adds	r1, #1
 8028e0a:	105b      	asrs	r3, r3, #1
 8028e0c:	e7ef      	b.n	8028dee <__gethex+0x132>
 8028e0e:	f100 0a14 	add.w	sl, r0, #20
 8028e12:	2300      	movs	r3, #0
 8028e14:	4655      	mov	r5, sl
 8028e16:	469b      	mov	fp, r3
 8028e18:	45b1      	cmp	r9, r6
 8028e1a:	d337      	bcc.n	8028e8c <__gethex+0x1d0>
 8028e1c:	f845 bb04 	str.w	fp, [r5], #4
 8028e20:	eba5 050a 	sub.w	r5, r5, sl
 8028e24:	10ad      	asrs	r5, r5, #2
 8028e26:	6125      	str	r5, [r4, #16]
 8028e28:	4658      	mov	r0, fp
 8028e2a:	f7fe fa65 	bl	80272f8 <__hi0bits>
 8028e2e:	016d      	lsls	r5, r5, #5
 8028e30:	f8d8 6000 	ldr.w	r6, [r8]
 8028e34:	1a2d      	subs	r5, r5, r0
 8028e36:	42b5      	cmp	r5, r6
 8028e38:	dd54      	ble.n	8028ee4 <__gethex+0x228>
 8028e3a:	1bad      	subs	r5, r5, r6
 8028e3c:	4629      	mov	r1, r5
 8028e3e:	4620      	mov	r0, r4
 8028e40:	f7fe fdf6 	bl	8027a30 <__any_on>
 8028e44:	4681      	mov	r9, r0
 8028e46:	b178      	cbz	r0, 8028e68 <__gethex+0x1ac>
 8028e48:	1e6b      	subs	r3, r5, #1
 8028e4a:	1159      	asrs	r1, r3, #5
 8028e4c:	f003 021f 	and.w	r2, r3, #31
 8028e50:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8028e54:	f04f 0901 	mov.w	r9, #1
 8028e58:	fa09 f202 	lsl.w	r2, r9, r2
 8028e5c:	420a      	tst	r2, r1
 8028e5e:	d003      	beq.n	8028e68 <__gethex+0x1ac>
 8028e60:	454b      	cmp	r3, r9
 8028e62:	dc36      	bgt.n	8028ed2 <__gethex+0x216>
 8028e64:	f04f 0902 	mov.w	r9, #2
 8028e68:	4629      	mov	r1, r5
 8028e6a:	4620      	mov	r0, r4
 8028e6c:	f7ff febe 	bl	8028bec <rshift>
 8028e70:	442f      	add	r7, r5
 8028e72:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8028e76:	42bb      	cmp	r3, r7
 8028e78:	da42      	bge.n	8028f00 <__gethex+0x244>
 8028e7a:	9801      	ldr	r0, [sp, #4]
 8028e7c:	4621      	mov	r1, r4
 8028e7e:	f7fe f989 	bl	8027194 <_Bfree>
 8028e82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028e84:	2300      	movs	r3, #0
 8028e86:	6013      	str	r3, [r2, #0]
 8028e88:	25a3      	movs	r5, #163	@ 0xa3
 8028e8a:	e793      	b.n	8028db4 <__gethex+0xf8>
 8028e8c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8028e90:	2a2e      	cmp	r2, #46	@ 0x2e
 8028e92:	d012      	beq.n	8028eba <__gethex+0x1fe>
 8028e94:	2b20      	cmp	r3, #32
 8028e96:	d104      	bne.n	8028ea2 <__gethex+0x1e6>
 8028e98:	f845 bb04 	str.w	fp, [r5], #4
 8028e9c:	f04f 0b00 	mov.w	fp, #0
 8028ea0:	465b      	mov	r3, fp
 8028ea2:	7830      	ldrb	r0, [r6, #0]
 8028ea4:	9303      	str	r3, [sp, #12]
 8028ea6:	f7ff fef3 	bl	8028c90 <__hexdig_fun>
 8028eaa:	9b03      	ldr	r3, [sp, #12]
 8028eac:	f000 000f 	and.w	r0, r0, #15
 8028eb0:	4098      	lsls	r0, r3
 8028eb2:	ea4b 0b00 	orr.w	fp, fp, r0
 8028eb6:	3304      	adds	r3, #4
 8028eb8:	e7ae      	b.n	8028e18 <__gethex+0x15c>
 8028eba:	45b1      	cmp	r9, r6
 8028ebc:	d8ea      	bhi.n	8028e94 <__gethex+0x1d8>
 8028ebe:	492b      	ldr	r1, [pc, #172]	@ (8028f6c <__gethex+0x2b0>)
 8028ec0:	9303      	str	r3, [sp, #12]
 8028ec2:	2201      	movs	r2, #1
 8028ec4:	4630      	mov	r0, r6
 8028ec6:	f7ff fe25 	bl	8028b14 <strncmp>
 8028eca:	9b03      	ldr	r3, [sp, #12]
 8028ecc:	2800      	cmp	r0, #0
 8028ece:	d1e1      	bne.n	8028e94 <__gethex+0x1d8>
 8028ed0:	e7a2      	b.n	8028e18 <__gethex+0x15c>
 8028ed2:	1ea9      	subs	r1, r5, #2
 8028ed4:	4620      	mov	r0, r4
 8028ed6:	f7fe fdab 	bl	8027a30 <__any_on>
 8028eda:	2800      	cmp	r0, #0
 8028edc:	d0c2      	beq.n	8028e64 <__gethex+0x1a8>
 8028ede:	f04f 0903 	mov.w	r9, #3
 8028ee2:	e7c1      	b.n	8028e68 <__gethex+0x1ac>
 8028ee4:	da09      	bge.n	8028efa <__gethex+0x23e>
 8028ee6:	1b75      	subs	r5, r6, r5
 8028ee8:	4621      	mov	r1, r4
 8028eea:	9801      	ldr	r0, [sp, #4]
 8028eec:	462a      	mov	r2, r5
 8028eee:	f7fe fb69 	bl	80275c4 <__lshift>
 8028ef2:	1b7f      	subs	r7, r7, r5
 8028ef4:	4604      	mov	r4, r0
 8028ef6:	f100 0a14 	add.w	sl, r0, #20
 8028efa:	f04f 0900 	mov.w	r9, #0
 8028efe:	e7b8      	b.n	8028e72 <__gethex+0x1b6>
 8028f00:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028f04:	42bd      	cmp	r5, r7
 8028f06:	dd6f      	ble.n	8028fe8 <__gethex+0x32c>
 8028f08:	1bed      	subs	r5, r5, r7
 8028f0a:	42ae      	cmp	r6, r5
 8028f0c:	dc34      	bgt.n	8028f78 <__gethex+0x2bc>
 8028f0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028f12:	2b02      	cmp	r3, #2
 8028f14:	d022      	beq.n	8028f5c <__gethex+0x2a0>
 8028f16:	2b03      	cmp	r3, #3
 8028f18:	d024      	beq.n	8028f64 <__gethex+0x2a8>
 8028f1a:	2b01      	cmp	r3, #1
 8028f1c:	d115      	bne.n	8028f4a <__gethex+0x28e>
 8028f1e:	42ae      	cmp	r6, r5
 8028f20:	d113      	bne.n	8028f4a <__gethex+0x28e>
 8028f22:	2e01      	cmp	r6, #1
 8028f24:	d10b      	bne.n	8028f3e <__gethex+0x282>
 8028f26:	9a02      	ldr	r2, [sp, #8]
 8028f28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8028f2c:	6013      	str	r3, [r2, #0]
 8028f2e:	2301      	movs	r3, #1
 8028f30:	6123      	str	r3, [r4, #16]
 8028f32:	f8ca 3000 	str.w	r3, [sl]
 8028f36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028f38:	2562      	movs	r5, #98	@ 0x62
 8028f3a:	601c      	str	r4, [r3, #0]
 8028f3c:	e73a      	b.n	8028db4 <__gethex+0xf8>
 8028f3e:	1e71      	subs	r1, r6, #1
 8028f40:	4620      	mov	r0, r4
 8028f42:	f7fe fd75 	bl	8027a30 <__any_on>
 8028f46:	2800      	cmp	r0, #0
 8028f48:	d1ed      	bne.n	8028f26 <__gethex+0x26a>
 8028f4a:	9801      	ldr	r0, [sp, #4]
 8028f4c:	4621      	mov	r1, r4
 8028f4e:	f7fe f921 	bl	8027194 <_Bfree>
 8028f52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8028f54:	2300      	movs	r3, #0
 8028f56:	6013      	str	r3, [r2, #0]
 8028f58:	2550      	movs	r5, #80	@ 0x50
 8028f5a:	e72b      	b.n	8028db4 <__gethex+0xf8>
 8028f5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028f5e:	2b00      	cmp	r3, #0
 8028f60:	d1f3      	bne.n	8028f4a <__gethex+0x28e>
 8028f62:	e7e0      	b.n	8028f26 <__gethex+0x26a>
 8028f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028f66:	2b00      	cmp	r3, #0
 8028f68:	d1dd      	bne.n	8028f26 <__gethex+0x26a>
 8028f6a:	e7ee      	b.n	8028f4a <__gethex+0x28e>
 8028f6c:	08029ad0 	.word	0x08029ad0
 8028f70:	08029965 	.word	0x08029965
 8028f74:	08029c7e 	.word	0x08029c7e
 8028f78:	1e6f      	subs	r7, r5, #1
 8028f7a:	f1b9 0f00 	cmp.w	r9, #0
 8028f7e:	d130      	bne.n	8028fe2 <__gethex+0x326>
 8028f80:	b127      	cbz	r7, 8028f8c <__gethex+0x2d0>
 8028f82:	4639      	mov	r1, r7
 8028f84:	4620      	mov	r0, r4
 8028f86:	f7fe fd53 	bl	8027a30 <__any_on>
 8028f8a:	4681      	mov	r9, r0
 8028f8c:	117a      	asrs	r2, r7, #5
 8028f8e:	2301      	movs	r3, #1
 8028f90:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8028f94:	f007 071f 	and.w	r7, r7, #31
 8028f98:	40bb      	lsls	r3, r7
 8028f9a:	4213      	tst	r3, r2
 8028f9c:	4629      	mov	r1, r5
 8028f9e:	4620      	mov	r0, r4
 8028fa0:	bf18      	it	ne
 8028fa2:	f049 0902 	orrne.w	r9, r9, #2
 8028fa6:	f7ff fe21 	bl	8028bec <rshift>
 8028faa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8028fae:	1b76      	subs	r6, r6, r5
 8028fb0:	2502      	movs	r5, #2
 8028fb2:	f1b9 0f00 	cmp.w	r9, #0
 8028fb6:	d047      	beq.n	8029048 <__gethex+0x38c>
 8028fb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8028fbc:	2b02      	cmp	r3, #2
 8028fbe:	d015      	beq.n	8028fec <__gethex+0x330>
 8028fc0:	2b03      	cmp	r3, #3
 8028fc2:	d017      	beq.n	8028ff4 <__gethex+0x338>
 8028fc4:	2b01      	cmp	r3, #1
 8028fc6:	d109      	bne.n	8028fdc <__gethex+0x320>
 8028fc8:	f019 0f02 	tst.w	r9, #2
 8028fcc:	d006      	beq.n	8028fdc <__gethex+0x320>
 8028fce:	f8da 3000 	ldr.w	r3, [sl]
 8028fd2:	ea49 0903 	orr.w	r9, r9, r3
 8028fd6:	f019 0f01 	tst.w	r9, #1
 8028fda:	d10e      	bne.n	8028ffa <__gethex+0x33e>
 8028fdc:	f045 0510 	orr.w	r5, r5, #16
 8028fe0:	e032      	b.n	8029048 <__gethex+0x38c>
 8028fe2:	f04f 0901 	mov.w	r9, #1
 8028fe6:	e7d1      	b.n	8028f8c <__gethex+0x2d0>
 8028fe8:	2501      	movs	r5, #1
 8028fea:	e7e2      	b.n	8028fb2 <__gethex+0x2f6>
 8028fec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028fee:	f1c3 0301 	rsb	r3, r3, #1
 8028ff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028ff6:	2b00      	cmp	r3, #0
 8028ff8:	d0f0      	beq.n	8028fdc <__gethex+0x320>
 8028ffa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8028ffe:	f104 0314 	add.w	r3, r4, #20
 8029002:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8029006:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802900a:	f04f 0c00 	mov.w	ip, #0
 802900e:	4618      	mov	r0, r3
 8029010:	f853 2b04 	ldr.w	r2, [r3], #4
 8029014:	f1b2 3fff 	cmp.w	r2, #4294967295
 8029018:	d01b      	beq.n	8029052 <__gethex+0x396>
 802901a:	3201      	adds	r2, #1
 802901c:	6002      	str	r2, [r0, #0]
 802901e:	2d02      	cmp	r5, #2
 8029020:	f104 0314 	add.w	r3, r4, #20
 8029024:	d13c      	bne.n	80290a0 <__gethex+0x3e4>
 8029026:	f8d8 2000 	ldr.w	r2, [r8]
 802902a:	3a01      	subs	r2, #1
 802902c:	42b2      	cmp	r2, r6
 802902e:	d109      	bne.n	8029044 <__gethex+0x388>
 8029030:	1171      	asrs	r1, r6, #5
 8029032:	2201      	movs	r2, #1
 8029034:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8029038:	f006 061f 	and.w	r6, r6, #31
 802903c:	fa02 f606 	lsl.w	r6, r2, r6
 8029040:	421e      	tst	r6, r3
 8029042:	d13a      	bne.n	80290ba <__gethex+0x3fe>
 8029044:	f045 0520 	orr.w	r5, r5, #32
 8029048:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802904a:	601c      	str	r4, [r3, #0]
 802904c:	9b02      	ldr	r3, [sp, #8]
 802904e:	601f      	str	r7, [r3, #0]
 8029050:	e6b0      	b.n	8028db4 <__gethex+0xf8>
 8029052:	4299      	cmp	r1, r3
 8029054:	f843 cc04 	str.w	ip, [r3, #-4]
 8029058:	d8d9      	bhi.n	802900e <__gethex+0x352>
 802905a:	68a3      	ldr	r3, [r4, #8]
 802905c:	459b      	cmp	fp, r3
 802905e:	db17      	blt.n	8029090 <__gethex+0x3d4>
 8029060:	6861      	ldr	r1, [r4, #4]
 8029062:	9801      	ldr	r0, [sp, #4]
 8029064:	3101      	adds	r1, #1
 8029066:	f7fe f855 	bl	8027114 <_Balloc>
 802906a:	4681      	mov	r9, r0
 802906c:	b918      	cbnz	r0, 8029076 <__gethex+0x3ba>
 802906e:	4b1a      	ldr	r3, [pc, #104]	@ (80290d8 <__gethex+0x41c>)
 8029070:	4602      	mov	r2, r0
 8029072:	2184      	movs	r1, #132	@ 0x84
 8029074:	e6c5      	b.n	8028e02 <__gethex+0x146>
 8029076:	6922      	ldr	r2, [r4, #16]
 8029078:	3202      	adds	r2, #2
 802907a:	f104 010c 	add.w	r1, r4, #12
 802907e:	0092      	lsls	r2, r2, #2
 8029080:	300c      	adds	r0, #12
 8029082:	f7ff fd69 	bl	8028b58 <memcpy>
 8029086:	4621      	mov	r1, r4
 8029088:	9801      	ldr	r0, [sp, #4]
 802908a:	f7fe f883 	bl	8027194 <_Bfree>
 802908e:	464c      	mov	r4, r9
 8029090:	6923      	ldr	r3, [r4, #16]
 8029092:	1c5a      	adds	r2, r3, #1
 8029094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8029098:	6122      	str	r2, [r4, #16]
 802909a:	2201      	movs	r2, #1
 802909c:	615a      	str	r2, [r3, #20]
 802909e:	e7be      	b.n	802901e <__gethex+0x362>
 80290a0:	6922      	ldr	r2, [r4, #16]
 80290a2:	455a      	cmp	r2, fp
 80290a4:	dd0b      	ble.n	80290be <__gethex+0x402>
 80290a6:	2101      	movs	r1, #1
 80290a8:	4620      	mov	r0, r4
 80290aa:	f7ff fd9f 	bl	8028bec <rshift>
 80290ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80290b2:	3701      	adds	r7, #1
 80290b4:	42bb      	cmp	r3, r7
 80290b6:	f6ff aee0 	blt.w	8028e7a <__gethex+0x1be>
 80290ba:	2501      	movs	r5, #1
 80290bc:	e7c2      	b.n	8029044 <__gethex+0x388>
 80290be:	f016 061f 	ands.w	r6, r6, #31
 80290c2:	d0fa      	beq.n	80290ba <__gethex+0x3fe>
 80290c4:	4453      	add	r3, sl
 80290c6:	f1c6 0620 	rsb	r6, r6, #32
 80290ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80290ce:	f7fe f913 	bl	80272f8 <__hi0bits>
 80290d2:	42b0      	cmp	r0, r6
 80290d4:	dbe7      	blt.n	80290a6 <__gethex+0x3ea>
 80290d6:	e7f0      	b.n	80290ba <__gethex+0x3fe>
 80290d8:	08029965 	.word	0x08029965

080290dc <L_shift>:
 80290dc:	f1c2 0208 	rsb	r2, r2, #8
 80290e0:	0092      	lsls	r2, r2, #2
 80290e2:	b570      	push	{r4, r5, r6, lr}
 80290e4:	f1c2 0620 	rsb	r6, r2, #32
 80290e8:	6843      	ldr	r3, [r0, #4]
 80290ea:	6804      	ldr	r4, [r0, #0]
 80290ec:	fa03 f506 	lsl.w	r5, r3, r6
 80290f0:	432c      	orrs	r4, r5
 80290f2:	40d3      	lsrs	r3, r2
 80290f4:	6004      	str	r4, [r0, #0]
 80290f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80290fa:	4288      	cmp	r0, r1
 80290fc:	d3f4      	bcc.n	80290e8 <L_shift+0xc>
 80290fe:	bd70      	pop	{r4, r5, r6, pc}

08029100 <__match>:
 8029100:	b530      	push	{r4, r5, lr}
 8029102:	6803      	ldr	r3, [r0, #0]
 8029104:	3301      	adds	r3, #1
 8029106:	f811 4b01 	ldrb.w	r4, [r1], #1
 802910a:	b914      	cbnz	r4, 8029112 <__match+0x12>
 802910c:	6003      	str	r3, [r0, #0]
 802910e:	2001      	movs	r0, #1
 8029110:	bd30      	pop	{r4, r5, pc}
 8029112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029116:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802911a:	2d19      	cmp	r5, #25
 802911c:	bf98      	it	ls
 802911e:	3220      	addls	r2, #32
 8029120:	42a2      	cmp	r2, r4
 8029122:	d0f0      	beq.n	8029106 <__match+0x6>
 8029124:	2000      	movs	r0, #0
 8029126:	e7f3      	b.n	8029110 <__match+0x10>

08029128 <__hexnan>:
 8029128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802912c:	680b      	ldr	r3, [r1, #0]
 802912e:	6801      	ldr	r1, [r0, #0]
 8029130:	115e      	asrs	r6, r3, #5
 8029132:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8029136:	f013 031f 	ands.w	r3, r3, #31
 802913a:	b087      	sub	sp, #28
 802913c:	bf18      	it	ne
 802913e:	3604      	addne	r6, #4
 8029140:	2500      	movs	r5, #0
 8029142:	1f37      	subs	r7, r6, #4
 8029144:	4682      	mov	sl, r0
 8029146:	4690      	mov	r8, r2
 8029148:	9301      	str	r3, [sp, #4]
 802914a:	f846 5c04 	str.w	r5, [r6, #-4]
 802914e:	46b9      	mov	r9, r7
 8029150:	463c      	mov	r4, r7
 8029152:	9502      	str	r5, [sp, #8]
 8029154:	46ab      	mov	fp, r5
 8029156:	784a      	ldrb	r2, [r1, #1]
 8029158:	1c4b      	adds	r3, r1, #1
 802915a:	9303      	str	r3, [sp, #12]
 802915c:	b342      	cbz	r2, 80291b0 <__hexnan+0x88>
 802915e:	4610      	mov	r0, r2
 8029160:	9105      	str	r1, [sp, #20]
 8029162:	9204      	str	r2, [sp, #16]
 8029164:	f7ff fd94 	bl	8028c90 <__hexdig_fun>
 8029168:	2800      	cmp	r0, #0
 802916a:	d151      	bne.n	8029210 <__hexnan+0xe8>
 802916c:	9a04      	ldr	r2, [sp, #16]
 802916e:	9905      	ldr	r1, [sp, #20]
 8029170:	2a20      	cmp	r2, #32
 8029172:	d818      	bhi.n	80291a6 <__hexnan+0x7e>
 8029174:	9b02      	ldr	r3, [sp, #8]
 8029176:	459b      	cmp	fp, r3
 8029178:	dd13      	ble.n	80291a2 <__hexnan+0x7a>
 802917a:	454c      	cmp	r4, r9
 802917c:	d206      	bcs.n	802918c <__hexnan+0x64>
 802917e:	2d07      	cmp	r5, #7
 8029180:	dc04      	bgt.n	802918c <__hexnan+0x64>
 8029182:	462a      	mov	r2, r5
 8029184:	4649      	mov	r1, r9
 8029186:	4620      	mov	r0, r4
 8029188:	f7ff ffa8 	bl	80290dc <L_shift>
 802918c:	4544      	cmp	r4, r8
 802918e:	d952      	bls.n	8029236 <__hexnan+0x10e>
 8029190:	2300      	movs	r3, #0
 8029192:	f1a4 0904 	sub.w	r9, r4, #4
 8029196:	f844 3c04 	str.w	r3, [r4, #-4]
 802919a:	f8cd b008 	str.w	fp, [sp, #8]
 802919e:	464c      	mov	r4, r9
 80291a0:	461d      	mov	r5, r3
 80291a2:	9903      	ldr	r1, [sp, #12]
 80291a4:	e7d7      	b.n	8029156 <__hexnan+0x2e>
 80291a6:	2a29      	cmp	r2, #41	@ 0x29
 80291a8:	d157      	bne.n	802925a <__hexnan+0x132>
 80291aa:	3102      	adds	r1, #2
 80291ac:	f8ca 1000 	str.w	r1, [sl]
 80291b0:	f1bb 0f00 	cmp.w	fp, #0
 80291b4:	d051      	beq.n	802925a <__hexnan+0x132>
 80291b6:	454c      	cmp	r4, r9
 80291b8:	d206      	bcs.n	80291c8 <__hexnan+0xa0>
 80291ba:	2d07      	cmp	r5, #7
 80291bc:	dc04      	bgt.n	80291c8 <__hexnan+0xa0>
 80291be:	462a      	mov	r2, r5
 80291c0:	4649      	mov	r1, r9
 80291c2:	4620      	mov	r0, r4
 80291c4:	f7ff ff8a 	bl	80290dc <L_shift>
 80291c8:	4544      	cmp	r4, r8
 80291ca:	d936      	bls.n	802923a <__hexnan+0x112>
 80291cc:	f1a8 0204 	sub.w	r2, r8, #4
 80291d0:	4623      	mov	r3, r4
 80291d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80291d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80291da:	429f      	cmp	r7, r3
 80291dc:	d2f9      	bcs.n	80291d2 <__hexnan+0xaa>
 80291de:	1b3b      	subs	r3, r7, r4
 80291e0:	f023 0303 	bic.w	r3, r3, #3
 80291e4:	3304      	adds	r3, #4
 80291e6:	3401      	adds	r4, #1
 80291e8:	3e03      	subs	r6, #3
 80291ea:	42b4      	cmp	r4, r6
 80291ec:	bf88      	it	hi
 80291ee:	2304      	movhi	r3, #4
 80291f0:	4443      	add	r3, r8
 80291f2:	2200      	movs	r2, #0
 80291f4:	f843 2b04 	str.w	r2, [r3], #4
 80291f8:	429f      	cmp	r7, r3
 80291fa:	d2fb      	bcs.n	80291f4 <__hexnan+0xcc>
 80291fc:	683b      	ldr	r3, [r7, #0]
 80291fe:	b91b      	cbnz	r3, 8029208 <__hexnan+0xe0>
 8029200:	4547      	cmp	r7, r8
 8029202:	d128      	bne.n	8029256 <__hexnan+0x12e>
 8029204:	2301      	movs	r3, #1
 8029206:	603b      	str	r3, [r7, #0]
 8029208:	2005      	movs	r0, #5
 802920a:	b007      	add	sp, #28
 802920c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029210:	3501      	adds	r5, #1
 8029212:	2d08      	cmp	r5, #8
 8029214:	f10b 0b01 	add.w	fp, fp, #1
 8029218:	dd06      	ble.n	8029228 <__hexnan+0x100>
 802921a:	4544      	cmp	r4, r8
 802921c:	d9c1      	bls.n	80291a2 <__hexnan+0x7a>
 802921e:	2300      	movs	r3, #0
 8029220:	f844 3c04 	str.w	r3, [r4, #-4]
 8029224:	2501      	movs	r5, #1
 8029226:	3c04      	subs	r4, #4
 8029228:	6822      	ldr	r2, [r4, #0]
 802922a:	f000 000f 	and.w	r0, r0, #15
 802922e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8029232:	6020      	str	r0, [r4, #0]
 8029234:	e7b5      	b.n	80291a2 <__hexnan+0x7a>
 8029236:	2508      	movs	r5, #8
 8029238:	e7b3      	b.n	80291a2 <__hexnan+0x7a>
 802923a:	9b01      	ldr	r3, [sp, #4]
 802923c:	2b00      	cmp	r3, #0
 802923e:	d0dd      	beq.n	80291fc <__hexnan+0xd4>
 8029240:	f1c3 0320 	rsb	r3, r3, #32
 8029244:	f04f 32ff 	mov.w	r2, #4294967295
 8029248:	40da      	lsrs	r2, r3
 802924a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 802924e:	4013      	ands	r3, r2
 8029250:	f846 3c04 	str.w	r3, [r6, #-4]
 8029254:	e7d2      	b.n	80291fc <__hexnan+0xd4>
 8029256:	3f04      	subs	r7, #4
 8029258:	e7d0      	b.n	80291fc <__hexnan+0xd4>
 802925a:	2004      	movs	r0, #4
 802925c:	e7d5      	b.n	802920a <__hexnan+0xe2>

0802925e <__ascii_mbtowc>:
 802925e:	b082      	sub	sp, #8
 8029260:	b901      	cbnz	r1, 8029264 <__ascii_mbtowc+0x6>
 8029262:	a901      	add	r1, sp, #4
 8029264:	b142      	cbz	r2, 8029278 <__ascii_mbtowc+0x1a>
 8029266:	b14b      	cbz	r3, 802927c <__ascii_mbtowc+0x1e>
 8029268:	7813      	ldrb	r3, [r2, #0]
 802926a:	600b      	str	r3, [r1, #0]
 802926c:	7812      	ldrb	r2, [r2, #0]
 802926e:	1e10      	subs	r0, r2, #0
 8029270:	bf18      	it	ne
 8029272:	2001      	movne	r0, #1
 8029274:	b002      	add	sp, #8
 8029276:	4770      	bx	lr
 8029278:	4610      	mov	r0, r2
 802927a:	e7fb      	b.n	8029274 <__ascii_mbtowc+0x16>
 802927c:	f06f 0001 	mvn.w	r0, #1
 8029280:	e7f8      	b.n	8029274 <__ascii_mbtowc+0x16>

08029282 <_realloc_r>:
 8029282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029286:	4680      	mov	r8, r0
 8029288:	4615      	mov	r5, r2
 802928a:	460c      	mov	r4, r1
 802928c:	b921      	cbnz	r1, 8029298 <_realloc_r+0x16>
 802928e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029292:	4611      	mov	r1, r2
 8029294:	f7fd beb2 	b.w	8026ffc <_malloc_r>
 8029298:	b92a      	cbnz	r2, 80292a6 <_realloc_r+0x24>
 802929a:	f7fd fe3b 	bl	8026f14 <_free_r>
 802929e:	2400      	movs	r4, #0
 80292a0:	4620      	mov	r0, r4
 80292a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80292a6:	f000 f840 	bl	802932a <_malloc_usable_size_r>
 80292aa:	4285      	cmp	r5, r0
 80292ac:	4606      	mov	r6, r0
 80292ae:	d802      	bhi.n	80292b6 <_realloc_r+0x34>
 80292b0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80292b4:	d8f4      	bhi.n	80292a0 <_realloc_r+0x1e>
 80292b6:	4629      	mov	r1, r5
 80292b8:	4640      	mov	r0, r8
 80292ba:	f7fd fe9f 	bl	8026ffc <_malloc_r>
 80292be:	4607      	mov	r7, r0
 80292c0:	2800      	cmp	r0, #0
 80292c2:	d0ec      	beq.n	802929e <_realloc_r+0x1c>
 80292c4:	42b5      	cmp	r5, r6
 80292c6:	462a      	mov	r2, r5
 80292c8:	4621      	mov	r1, r4
 80292ca:	bf28      	it	cs
 80292cc:	4632      	movcs	r2, r6
 80292ce:	f7ff fc43 	bl	8028b58 <memcpy>
 80292d2:	4621      	mov	r1, r4
 80292d4:	4640      	mov	r0, r8
 80292d6:	f7fd fe1d 	bl	8026f14 <_free_r>
 80292da:	463c      	mov	r4, r7
 80292dc:	e7e0      	b.n	80292a0 <_realloc_r+0x1e>

080292de <__ascii_wctomb>:
 80292de:	4603      	mov	r3, r0
 80292e0:	4608      	mov	r0, r1
 80292e2:	b141      	cbz	r1, 80292f6 <__ascii_wctomb+0x18>
 80292e4:	2aff      	cmp	r2, #255	@ 0xff
 80292e6:	d904      	bls.n	80292f2 <__ascii_wctomb+0x14>
 80292e8:	228a      	movs	r2, #138	@ 0x8a
 80292ea:	601a      	str	r2, [r3, #0]
 80292ec:	f04f 30ff 	mov.w	r0, #4294967295
 80292f0:	4770      	bx	lr
 80292f2:	700a      	strb	r2, [r1, #0]
 80292f4:	2001      	movs	r0, #1
 80292f6:	4770      	bx	lr

080292f8 <fiprintf>:
 80292f8:	b40e      	push	{r1, r2, r3}
 80292fa:	b503      	push	{r0, r1, lr}
 80292fc:	4601      	mov	r1, r0
 80292fe:	ab03      	add	r3, sp, #12
 8029300:	4805      	ldr	r0, [pc, #20]	@ (8029318 <fiprintf+0x20>)
 8029302:	f853 2b04 	ldr.w	r2, [r3], #4
 8029306:	6800      	ldr	r0, [r0, #0]
 8029308:	9301      	str	r3, [sp, #4]
 802930a:	f000 f83f 	bl	802938c <_vfiprintf_r>
 802930e:	b002      	add	sp, #8
 8029310:	f85d eb04 	ldr.w	lr, [sp], #4
 8029314:	b003      	add	sp, #12
 8029316:	4770      	bx	lr
 8029318:	2400001c 	.word	0x2400001c

0802931c <abort>:
 802931c:	b508      	push	{r3, lr}
 802931e:	2006      	movs	r0, #6
 8029320:	f000 fa08 	bl	8029734 <raise>
 8029324:	2001      	movs	r0, #1
 8029326:	f7f7 fec8 	bl	80210ba <_exit>

0802932a <_malloc_usable_size_r>:
 802932a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802932e:	1f18      	subs	r0, r3, #4
 8029330:	2b00      	cmp	r3, #0
 8029332:	bfbc      	itt	lt
 8029334:	580b      	ldrlt	r3, [r1, r0]
 8029336:	18c0      	addlt	r0, r0, r3
 8029338:	4770      	bx	lr

0802933a <__sfputc_r>:
 802933a:	6893      	ldr	r3, [r2, #8]
 802933c:	3b01      	subs	r3, #1
 802933e:	2b00      	cmp	r3, #0
 8029340:	b410      	push	{r4}
 8029342:	6093      	str	r3, [r2, #8]
 8029344:	da08      	bge.n	8029358 <__sfputc_r+0x1e>
 8029346:	6994      	ldr	r4, [r2, #24]
 8029348:	42a3      	cmp	r3, r4
 802934a:	db01      	blt.n	8029350 <__sfputc_r+0x16>
 802934c:	290a      	cmp	r1, #10
 802934e:	d103      	bne.n	8029358 <__sfputc_r+0x1e>
 8029350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029354:	f000 b932 	b.w	80295bc <__swbuf_r>
 8029358:	6813      	ldr	r3, [r2, #0]
 802935a:	1c58      	adds	r0, r3, #1
 802935c:	6010      	str	r0, [r2, #0]
 802935e:	7019      	strb	r1, [r3, #0]
 8029360:	4608      	mov	r0, r1
 8029362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029366:	4770      	bx	lr

08029368 <__sfputs_r>:
 8029368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802936a:	4606      	mov	r6, r0
 802936c:	460f      	mov	r7, r1
 802936e:	4614      	mov	r4, r2
 8029370:	18d5      	adds	r5, r2, r3
 8029372:	42ac      	cmp	r4, r5
 8029374:	d101      	bne.n	802937a <__sfputs_r+0x12>
 8029376:	2000      	movs	r0, #0
 8029378:	e007      	b.n	802938a <__sfputs_r+0x22>
 802937a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802937e:	463a      	mov	r2, r7
 8029380:	4630      	mov	r0, r6
 8029382:	f7ff ffda 	bl	802933a <__sfputc_r>
 8029386:	1c43      	adds	r3, r0, #1
 8029388:	d1f3      	bne.n	8029372 <__sfputs_r+0xa>
 802938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802938c <_vfiprintf_r>:
 802938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029390:	460d      	mov	r5, r1
 8029392:	b09d      	sub	sp, #116	@ 0x74
 8029394:	4614      	mov	r4, r2
 8029396:	4698      	mov	r8, r3
 8029398:	4606      	mov	r6, r0
 802939a:	b118      	cbz	r0, 80293a4 <_vfiprintf_r+0x18>
 802939c:	6a03      	ldr	r3, [r0, #32]
 802939e:	b90b      	cbnz	r3, 80293a4 <_vfiprintf_r+0x18>
 80293a0:	f7fc feba 	bl	8026118 <__sinit>
 80293a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80293a6:	07d9      	lsls	r1, r3, #31
 80293a8:	d405      	bmi.n	80293b6 <_vfiprintf_r+0x2a>
 80293aa:	89ab      	ldrh	r3, [r5, #12]
 80293ac:	059a      	lsls	r2, r3, #22
 80293ae:	d402      	bmi.n	80293b6 <_vfiprintf_r+0x2a>
 80293b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80293b2:	f7fc ffc8 	bl	8026346 <__retarget_lock_acquire_recursive>
 80293b6:	89ab      	ldrh	r3, [r5, #12]
 80293b8:	071b      	lsls	r3, r3, #28
 80293ba:	d501      	bpl.n	80293c0 <_vfiprintf_r+0x34>
 80293bc:	692b      	ldr	r3, [r5, #16]
 80293be:	b99b      	cbnz	r3, 80293e8 <_vfiprintf_r+0x5c>
 80293c0:	4629      	mov	r1, r5
 80293c2:	4630      	mov	r0, r6
 80293c4:	f000 f938 	bl	8029638 <__swsetup_r>
 80293c8:	b170      	cbz	r0, 80293e8 <_vfiprintf_r+0x5c>
 80293ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80293cc:	07dc      	lsls	r4, r3, #31
 80293ce:	d504      	bpl.n	80293da <_vfiprintf_r+0x4e>
 80293d0:	f04f 30ff 	mov.w	r0, #4294967295
 80293d4:	b01d      	add	sp, #116	@ 0x74
 80293d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80293da:	89ab      	ldrh	r3, [r5, #12]
 80293dc:	0598      	lsls	r0, r3, #22
 80293de:	d4f7      	bmi.n	80293d0 <_vfiprintf_r+0x44>
 80293e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80293e2:	f7fc ffb1 	bl	8026348 <__retarget_lock_release_recursive>
 80293e6:	e7f3      	b.n	80293d0 <_vfiprintf_r+0x44>
 80293e8:	2300      	movs	r3, #0
 80293ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80293ec:	2320      	movs	r3, #32
 80293ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80293f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80293f6:	2330      	movs	r3, #48	@ 0x30
 80293f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80295a8 <_vfiprintf_r+0x21c>
 80293fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8029400:	f04f 0901 	mov.w	r9, #1
 8029404:	4623      	mov	r3, r4
 8029406:	469a      	mov	sl, r3
 8029408:	f813 2b01 	ldrb.w	r2, [r3], #1
 802940c:	b10a      	cbz	r2, 8029412 <_vfiprintf_r+0x86>
 802940e:	2a25      	cmp	r2, #37	@ 0x25
 8029410:	d1f9      	bne.n	8029406 <_vfiprintf_r+0x7a>
 8029412:	ebba 0b04 	subs.w	fp, sl, r4
 8029416:	d00b      	beq.n	8029430 <_vfiprintf_r+0xa4>
 8029418:	465b      	mov	r3, fp
 802941a:	4622      	mov	r2, r4
 802941c:	4629      	mov	r1, r5
 802941e:	4630      	mov	r0, r6
 8029420:	f7ff ffa2 	bl	8029368 <__sfputs_r>
 8029424:	3001      	adds	r0, #1
 8029426:	f000 80a7 	beq.w	8029578 <_vfiprintf_r+0x1ec>
 802942a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802942c:	445a      	add	r2, fp
 802942e:	9209      	str	r2, [sp, #36]	@ 0x24
 8029430:	f89a 3000 	ldrb.w	r3, [sl]
 8029434:	2b00      	cmp	r3, #0
 8029436:	f000 809f 	beq.w	8029578 <_vfiprintf_r+0x1ec>
 802943a:	2300      	movs	r3, #0
 802943c:	f04f 32ff 	mov.w	r2, #4294967295
 8029440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029444:	f10a 0a01 	add.w	sl, sl, #1
 8029448:	9304      	str	r3, [sp, #16]
 802944a:	9307      	str	r3, [sp, #28]
 802944c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8029450:	931a      	str	r3, [sp, #104]	@ 0x68
 8029452:	4654      	mov	r4, sl
 8029454:	2205      	movs	r2, #5
 8029456:	f814 1b01 	ldrb.w	r1, [r4], #1
 802945a:	4853      	ldr	r0, [pc, #332]	@ (80295a8 <_vfiprintf_r+0x21c>)
 802945c:	f7f6 ff58 	bl	8020310 <memchr>
 8029460:	9a04      	ldr	r2, [sp, #16]
 8029462:	b9d8      	cbnz	r0, 802949c <_vfiprintf_r+0x110>
 8029464:	06d1      	lsls	r1, r2, #27
 8029466:	bf44      	itt	mi
 8029468:	2320      	movmi	r3, #32
 802946a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802946e:	0713      	lsls	r3, r2, #28
 8029470:	bf44      	itt	mi
 8029472:	232b      	movmi	r3, #43	@ 0x2b
 8029474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8029478:	f89a 3000 	ldrb.w	r3, [sl]
 802947c:	2b2a      	cmp	r3, #42	@ 0x2a
 802947e:	d015      	beq.n	80294ac <_vfiprintf_r+0x120>
 8029480:	9a07      	ldr	r2, [sp, #28]
 8029482:	4654      	mov	r4, sl
 8029484:	2000      	movs	r0, #0
 8029486:	f04f 0c0a 	mov.w	ip, #10
 802948a:	4621      	mov	r1, r4
 802948c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029490:	3b30      	subs	r3, #48	@ 0x30
 8029492:	2b09      	cmp	r3, #9
 8029494:	d94b      	bls.n	802952e <_vfiprintf_r+0x1a2>
 8029496:	b1b0      	cbz	r0, 80294c6 <_vfiprintf_r+0x13a>
 8029498:	9207      	str	r2, [sp, #28]
 802949a:	e014      	b.n	80294c6 <_vfiprintf_r+0x13a>
 802949c:	eba0 0308 	sub.w	r3, r0, r8
 80294a0:	fa09 f303 	lsl.w	r3, r9, r3
 80294a4:	4313      	orrs	r3, r2
 80294a6:	9304      	str	r3, [sp, #16]
 80294a8:	46a2      	mov	sl, r4
 80294aa:	e7d2      	b.n	8029452 <_vfiprintf_r+0xc6>
 80294ac:	9b03      	ldr	r3, [sp, #12]
 80294ae:	1d19      	adds	r1, r3, #4
 80294b0:	681b      	ldr	r3, [r3, #0]
 80294b2:	9103      	str	r1, [sp, #12]
 80294b4:	2b00      	cmp	r3, #0
 80294b6:	bfbb      	ittet	lt
 80294b8:	425b      	neglt	r3, r3
 80294ba:	f042 0202 	orrlt.w	r2, r2, #2
 80294be:	9307      	strge	r3, [sp, #28]
 80294c0:	9307      	strlt	r3, [sp, #28]
 80294c2:	bfb8      	it	lt
 80294c4:	9204      	strlt	r2, [sp, #16]
 80294c6:	7823      	ldrb	r3, [r4, #0]
 80294c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80294ca:	d10a      	bne.n	80294e2 <_vfiprintf_r+0x156>
 80294cc:	7863      	ldrb	r3, [r4, #1]
 80294ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80294d0:	d132      	bne.n	8029538 <_vfiprintf_r+0x1ac>
 80294d2:	9b03      	ldr	r3, [sp, #12]
 80294d4:	1d1a      	adds	r2, r3, #4
 80294d6:	681b      	ldr	r3, [r3, #0]
 80294d8:	9203      	str	r2, [sp, #12]
 80294da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80294de:	3402      	adds	r4, #2
 80294e0:	9305      	str	r3, [sp, #20]
 80294e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80295b8 <_vfiprintf_r+0x22c>
 80294e6:	7821      	ldrb	r1, [r4, #0]
 80294e8:	2203      	movs	r2, #3
 80294ea:	4650      	mov	r0, sl
 80294ec:	f7f6 ff10 	bl	8020310 <memchr>
 80294f0:	b138      	cbz	r0, 8029502 <_vfiprintf_r+0x176>
 80294f2:	9b04      	ldr	r3, [sp, #16]
 80294f4:	eba0 000a 	sub.w	r0, r0, sl
 80294f8:	2240      	movs	r2, #64	@ 0x40
 80294fa:	4082      	lsls	r2, r0
 80294fc:	4313      	orrs	r3, r2
 80294fe:	3401      	adds	r4, #1
 8029500:	9304      	str	r3, [sp, #16]
 8029502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029506:	4829      	ldr	r0, [pc, #164]	@ (80295ac <_vfiprintf_r+0x220>)
 8029508:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802950c:	2206      	movs	r2, #6
 802950e:	f7f6 feff 	bl	8020310 <memchr>
 8029512:	2800      	cmp	r0, #0
 8029514:	d03f      	beq.n	8029596 <_vfiprintf_r+0x20a>
 8029516:	4b26      	ldr	r3, [pc, #152]	@ (80295b0 <_vfiprintf_r+0x224>)
 8029518:	bb1b      	cbnz	r3, 8029562 <_vfiprintf_r+0x1d6>
 802951a:	9b03      	ldr	r3, [sp, #12]
 802951c:	3307      	adds	r3, #7
 802951e:	f023 0307 	bic.w	r3, r3, #7
 8029522:	3308      	adds	r3, #8
 8029524:	9303      	str	r3, [sp, #12]
 8029526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8029528:	443b      	add	r3, r7
 802952a:	9309      	str	r3, [sp, #36]	@ 0x24
 802952c:	e76a      	b.n	8029404 <_vfiprintf_r+0x78>
 802952e:	fb0c 3202 	mla	r2, ip, r2, r3
 8029532:	460c      	mov	r4, r1
 8029534:	2001      	movs	r0, #1
 8029536:	e7a8      	b.n	802948a <_vfiprintf_r+0xfe>
 8029538:	2300      	movs	r3, #0
 802953a:	3401      	adds	r4, #1
 802953c:	9305      	str	r3, [sp, #20]
 802953e:	4619      	mov	r1, r3
 8029540:	f04f 0c0a 	mov.w	ip, #10
 8029544:	4620      	mov	r0, r4
 8029546:	f810 2b01 	ldrb.w	r2, [r0], #1
 802954a:	3a30      	subs	r2, #48	@ 0x30
 802954c:	2a09      	cmp	r2, #9
 802954e:	d903      	bls.n	8029558 <_vfiprintf_r+0x1cc>
 8029550:	2b00      	cmp	r3, #0
 8029552:	d0c6      	beq.n	80294e2 <_vfiprintf_r+0x156>
 8029554:	9105      	str	r1, [sp, #20]
 8029556:	e7c4      	b.n	80294e2 <_vfiprintf_r+0x156>
 8029558:	fb0c 2101 	mla	r1, ip, r1, r2
 802955c:	4604      	mov	r4, r0
 802955e:	2301      	movs	r3, #1
 8029560:	e7f0      	b.n	8029544 <_vfiprintf_r+0x1b8>
 8029562:	ab03      	add	r3, sp, #12
 8029564:	9300      	str	r3, [sp, #0]
 8029566:	462a      	mov	r2, r5
 8029568:	4b12      	ldr	r3, [pc, #72]	@ (80295b4 <_vfiprintf_r+0x228>)
 802956a:	a904      	add	r1, sp, #16
 802956c:	4630      	mov	r0, r6
 802956e:	f7fb ff93 	bl	8025498 <_printf_float>
 8029572:	4607      	mov	r7, r0
 8029574:	1c78      	adds	r0, r7, #1
 8029576:	d1d6      	bne.n	8029526 <_vfiprintf_r+0x19a>
 8029578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802957a:	07d9      	lsls	r1, r3, #31
 802957c:	d405      	bmi.n	802958a <_vfiprintf_r+0x1fe>
 802957e:	89ab      	ldrh	r3, [r5, #12]
 8029580:	059a      	lsls	r2, r3, #22
 8029582:	d402      	bmi.n	802958a <_vfiprintf_r+0x1fe>
 8029584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8029586:	f7fc fedf 	bl	8026348 <__retarget_lock_release_recursive>
 802958a:	89ab      	ldrh	r3, [r5, #12]
 802958c:	065b      	lsls	r3, r3, #25
 802958e:	f53f af1f 	bmi.w	80293d0 <_vfiprintf_r+0x44>
 8029592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8029594:	e71e      	b.n	80293d4 <_vfiprintf_r+0x48>
 8029596:	ab03      	add	r3, sp, #12
 8029598:	9300      	str	r3, [sp, #0]
 802959a:	462a      	mov	r2, r5
 802959c:	4b05      	ldr	r3, [pc, #20]	@ (80295b4 <_vfiprintf_r+0x228>)
 802959e:	a904      	add	r1, sp, #16
 80295a0:	4630      	mov	r0, r6
 80295a2:	f7fc fa01 	bl	80259a8 <_printf_i>
 80295a6:	e7e4      	b.n	8029572 <_vfiprintf_r+0x1e6>
 80295a8:	08029c29 	.word	0x08029c29
 80295ac:	08029c33 	.word	0x08029c33
 80295b0:	08025499 	.word	0x08025499
 80295b4:	08029369 	.word	0x08029369
 80295b8:	08029c2f 	.word	0x08029c2f

080295bc <__swbuf_r>:
 80295bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80295be:	460e      	mov	r6, r1
 80295c0:	4614      	mov	r4, r2
 80295c2:	4605      	mov	r5, r0
 80295c4:	b118      	cbz	r0, 80295ce <__swbuf_r+0x12>
 80295c6:	6a03      	ldr	r3, [r0, #32]
 80295c8:	b90b      	cbnz	r3, 80295ce <__swbuf_r+0x12>
 80295ca:	f7fc fda5 	bl	8026118 <__sinit>
 80295ce:	69a3      	ldr	r3, [r4, #24]
 80295d0:	60a3      	str	r3, [r4, #8]
 80295d2:	89a3      	ldrh	r3, [r4, #12]
 80295d4:	071a      	lsls	r2, r3, #28
 80295d6:	d501      	bpl.n	80295dc <__swbuf_r+0x20>
 80295d8:	6923      	ldr	r3, [r4, #16]
 80295da:	b943      	cbnz	r3, 80295ee <__swbuf_r+0x32>
 80295dc:	4621      	mov	r1, r4
 80295de:	4628      	mov	r0, r5
 80295e0:	f000 f82a 	bl	8029638 <__swsetup_r>
 80295e4:	b118      	cbz	r0, 80295ee <__swbuf_r+0x32>
 80295e6:	f04f 37ff 	mov.w	r7, #4294967295
 80295ea:	4638      	mov	r0, r7
 80295ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80295ee:	6823      	ldr	r3, [r4, #0]
 80295f0:	6922      	ldr	r2, [r4, #16]
 80295f2:	1a98      	subs	r0, r3, r2
 80295f4:	6963      	ldr	r3, [r4, #20]
 80295f6:	b2f6      	uxtb	r6, r6
 80295f8:	4283      	cmp	r3, r0
 80295fa:	4637      	mov	r7, r6
 80295fc:	dc05      	bgt.n	802960a <__swbuf_r+0x4e>
 80295fe:	4621      	mov	r1, r4
 8029600:	4628      	mov	r0, r5
 8029602:	f7ff fa45 	bl	8028a90 <_fflush_r>
 8029606:	2800      	cmp	r0, #0
 8029608:	d1ed      	bne.n	80295e6 <__swbuf_r+0x2a>
 802960a:	68a3      	ldr	r3, [r4, #8]
 802960c:	3b01      	subs	r3, #1
 802960e:	60a3      	str	r3, [r4, #8]
 8029610:	6823      	ldr	r3, [r4, #0]
 8029612:	1c5a      	adds	r2, r3, #1
 8029614:	6022      	str	r2, [r4, #0]
 8029616:	701e      	strb	r6, [r3, #0]
 8029618:	6962      	ldr	r2, [r4, #20]
 802961a:	1c43      	adds	r3, r0, #1
 802961c:	429a      	cmp	r2, r3
 802961e:	d004      	beq.n	802962a <__swbuf_r+0x6e>
 8029620:	89a3      	ldrh	r3, [r4, #12]
 8029622:	07db      	lsls	r3, r3, #31
 8029624:	d5e1      	bpl.n	80295ea <__swbuf_r+0x2e>
 8029626:	2e0a      	cmp	r6, #10
 8029628:	d1df      	bne.n	80295ea <__swbuf_r+0x2e>
 802962a:	4621      	mov	r1, r4
 802962c:	4628      	mov	r0, r5
 802962e:	f7ff fa2f 	bl	8028a90 <_fflush_r>
 8029632:	2800      	cmp	r0, #0
 8029634:	d0d9      	beq.n	80295ea <__swbuf_r+0x2e>
 8029636:	e7d6      	b.n	80295e6 <__swbuf_r+0x2a>

08029638 <__swsetup_r>:
 8029638:	b538      	push	{r3, r4, r5, lr}
 802963a:	4b29      	ldr	r3, [pc, #164]	@ (80296e0 <__swsetup_r+0xa8>)
 802963c:	4605      	mov	r5, r0
 802963e:	6818      	ldr	r0, [r3, #0]
 8029640:	460c      	mov	r4, r1
 8029642:	b118      	cbz	r0, 802964c <__swsetup_r+0x14>
 8029644:	6a03      	ldr	r3, [r0, #32]
 8029646:	b90b      	cbnz	r3, 802964c <__swsetup_r+0x14>
 8029648:	f7fc fd66 	bl	8026118 <__sinit>
 802964c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8029650:	0719      	lsls	r1, r3, #28
 8029652:	d422      	bmi.n	802969a <__swsetup_r+0x62>
 8029654:	06da      	lsls	r2, r3, #27
 8029656:	d407      	bmi.n	8029668 <__swsetup_r+0x30>
 8029658:	2209      	movs	r2, #9
 802965a:	602a      	str	r2, [r5, #0]
 802965c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8029660:	81a3      	strh	r3, [r4, #12]
 8029662:	f04f 30ff 	mov.w	r0, #4294967295
 8029666:	e033      	b.n	80296d0 <__swsetup_r+0x98>
 8029668:	0758      	lsls	r0, r3, #29
 802966a:	d512      	bpl.n	8029692 <__swsetup_r+0x5a>
 802966c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802966e:	b141      	cbz	r1, 8029682 <__swsetup_r+0x4a>
 8029670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8029674:	4299      	cmp	r1, r3
 8029676:	d002      	beq.n	802967e <__swsetup_r+0x46>
 8029678:	4628      	mov	r0, r5
 802967a:	f7fd fc4b 	bl	8026f14 <_free_r>
 802967e:	2300      	movs	r3, #0
 8029680:	6363      	str	r3, [r4, #52]	@ 0x34
 8029682:	89a3      	ldrh	r3, [r4, #12]
 8029684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8029688:	81a3      	strh	r3, [r4, #12]
 802968a:	2300      	movs	r3, #0
 802968c:	6063      	str	r3, [r4, #4]
 802968e:	6923      	ldr	r3, [r4, #16]
 8029690:	6023      	str	r3, [r4, #0]
 8029692:	89a3      	ldrh	r3, [r4, #12]
 8029694:	f043 0308 	orr.w	r3, r3, #8
 8029698:	81a3      	strh	r3, [r4, #12]
 802969a:	6923      	ldr	r3, [r4, #16]
 802969c:	b94b      	cbnz	r3, 80296b2 <__swsetup_r+0x7a>
 802969e:	89a3      	ldrh	r3, [r4, #12]
 80296a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80296a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80296a8:	d003      	beq.n	80296b2 <__swsetup_r+0x7a>
 80296aa:	4621      	mov	r1, r4
 80296ac:	4628      	mov	r0, r5
 80296ae:	f000 f883 	bl	80297b8 <__smakebuf_r>
 80296b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80296b6:	f013 0201 	ands.w	r2, r3, #1
 80296ba:	d00a      	beq.n	80296d2 <__swsetup_r+0x9a>
 80296bc:	2200      	movs	r2, #0
 80296be:	60a2      	str	r2, [r4, #8]
 80296c0:	6962      	ldr	r2, [r4, #20]
 80296c2:	4252      	negs	r2, r2
 80296c4:	61a2      	str	r2, [r4, #24]
 80296c6:	6922      	ldr	r2, [r4, #16]
 80296c8:	b942      	cbnz	r2, 80296dc <__swsetup_r+0xa4>
 80296ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80296ce:	d1c5      	bne.n	802965c <__swsetup_r+0x24>
 80296d0:	bd38      	pop	{r3, r4, r5, pc}
 80296d2:	0799      	lsls	r1, r3, #30
 80296d4:	bf58      	it	pl
 80296d6:	6962      	ldrpl	r2, [r4, #20]
 80296d8:	60a2      	str	r2, [r4, #8]
 80296da:	e7f4      	b.n	80296c6 <__swsetup_r+0x8e>
 80296dc:	2000      	movs	r0, #0
 80296de:	e7f7      	b.n	80296d0 <__swsetup_r+0x98>
 80296e0:	2400001c 	.word	0x2400001c

080296e4 <_raise_r>:
 80296e4:	291f      	cmp	r1, #31
 80296e6:	b538      	push	{r3, r4, r5, lr}
 80296e8:	4605      	mov	r5, r0
 80296ea:	460c      	mov	r4, r1
 80296ec:	d904      	bls.n	80296f8 <_raise_r+0x14>
 80296ee:	2316      	movs	r3, #22
 80296f0:	6003      	str	r3, [r0, #0]
 80296f2:	f04f 30ff 	mov.w	r0, #4294967295
 80296f6:	bd38      	pop	{r3, r4, r5, pc}
 80296f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80296fa:	b112      	cbz	r2, 8029702 <_raise_r+0x1e>
 80296fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029700:	b94b      	cbnz	r3, 8029716 <_raise_r+0x32>
 8029702:	4628      	mov	r0, r5
 8029704:	f000 f830 	bl	8029768 <_getpid_r>
 8029708:	4622      	mov	r2, r4
 802970a:	4601      	mov	r1, r0
 802970c:	4628      	mov	r0, r5
 802970e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029712:	f000 b817 	b.w	8029744 <_kill_r>
 8029716:	2b01      	cmp	r3, #1
 8029718:	d00a      	beq.n	8029730 <_raise_r+0x4c>
 802971a:	1c59      	adds	r1, r3, #1
 802971c:	d103      	bne.n	8029726 <_raise_r+0x42>
 802971e:	2316      	movs	r3, #22
 8029720:	6003      	str	r3, [r0, #0]
 8029722:	2001      	movs	r0, #1
 8029724:	e7e7      	b.n	80296f6 <_raise_r+0x12>
 8029726:	2100      	movs	r1, #0
 8029728:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802972c:	4620      	mov	r0, r4
 802972e:	4798      	blx	r3
 8029730:	2000      	movs	r0, #0
 8029732:	e7e0      	b.n	80296f6 <_raise_r+0x12>

08029734 <raise>:
 8029734:	4b02      	ldr	r3, [pc, #8]	@ (8029740 <raise+0xc>)
 8029736:	4601      	mov	r1, r0
 8029738:	6818      	ldr	r0, [r3, #0]
 802973a:	f7ff bfd3 	b.w	80296e4 <_raise_r>
 802973e:	bf00      	nop
 8029740:	2400001c 	.word	0x2400001c

08029744 <_kill_r>:
 8029744:	b538      	push	{r3, r4, r5, lr}
 8029746:	4d07      	ldr	r5, [pc, #28]	@ (8029764 <_kill_r+0x20>)
 8029748:	2300      	movs	r3, #0
 802974a:	4604      	mov	r4, r0
 802974c:	4608      	mov	r0, r1
 802974e:	4611      	mov	r1, r2
 8029750:	602b      	str	r3, [r5, #0]
 8029752:	f7f7 fca2 	bl	802109a <_kill>
 8029756:	1c43      	adds	r3, r0, #1
 8029758:	d102      	bne.n	8029760 <_kill_r+0x1c>
 802975a:	682b      	ldr	r3, [r5, #0]
 802975c:	b103      	cbz	r3, 8029760 <_kill_r+0x1c>
 802975e:	6023      	str	r3, [r4, #0]
 8029760:	bd38      	pop	{r3, r4, r5, pc}
 8029762:	bf00      	nop
 8029764:	2400041c 	.word	0x2400041c

08029768 <_getpid_r>:
 8029768:	f7f7 bc8f 	b.w	802108a <_getpid>

0802976c <__swhatbuf_r>:
 802976c:	b570      	push	{r4, r5, r6, lr}
 802976e:	460c      	mov	r4, r1
 8029770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029774:	2900      	cmp	r1, #0
 8029776:	b096      	sub	sp, #88	@ 0x58
 8029778:	4615      	mov	r5, r2
 802977a:	461e      	mov	r6, r3
 802977c:	da0d      	bge.n	802979a <__swhatbuf_r+0x2e>
 802977e:	89a3      	ldrh	r3, [r4, #12]
 8029780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8029784:	f04f 0100 	mov.w	r1, #0
 8029788:	bf14      	ite	ne
 802978a:	2340      	movne	r3, #64	@ 0x40
 802978c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8029790:	2000      	movs	r0, #0
 8029792:	6031      	str	r1, [r6, #0]
 8029794:	602b      	str	r3, [r5, #0]
 8029796:	b016      	add	sp, #88	@ 0x58
 8029798:	bd70      	pop	{r4, r5, r6, pc}
 802979a:	466a      	mov	r2, sp
 802979c:	f000 f848 	bl	8029830 <_fstat_r>
 80297a0:	2800      	cmp	r0, #0
 80297a2:	dbec      	blt.n	802977e <__swhatbuf_r+0x12>
 80297a4:	9901      	ldr	r1, [sp, #4]
 80297a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80297aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80297ae:	4259      	negs	r1, r3
 80297b0:	4159      	adcs	r1, r3
 80297b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80297b6:	e7eb      	b.n	8029790 <__swhatbuf_r+0x24>

080297b8 <__smakebuf_r>:
 80297b8:	898b      	ldrh	r3, [r1, #12]
 80297ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80297bc:	079d      	lsls	r5, r3, #30
 80297be:	4606      	mov	r6, r0
 80297c0:	460c      	mov	r4, r1
 80297c2:	d507      	bpl.n	80297d4 <__smakebuf_r+0x1c>
 80297c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80297c8:	6023      	str	r3, [r4, #0]
 80297ca:	6123      	str	r3, [r4, #16]
 80297cc:	2301      	movs	r3, #1
 80297ce:	6163      	str	r3, [r4, #20]
 80297d0:	b003      	add	sp, #12
 80297d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80297d4:	ab01      	add	r3, sp, #4
 80297d6:	466a      	mov	r2, sp
 80297d8:	f7ff ffc8 	bl	802976c <__swhatbuf_r>
 80297dc:	9f00      	ldr	r7, [sp, #0]
 80297de:	4605      	mov	r5, r0
 80297e0:	4639      	mov	r1, r7
 80297e2:	4630      	mov	r0, r6
 80297e4:	f7fd fc0a 	bl	8026ffc <_malloc_r>
 80297e8:	b948      	cbnz	r0, 80297fe <__smakebuf_r+0x46>
 80297ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80297ee:	059a      	lsls	r2, r3, #22
 80297f0:	d4ee      	bmi.n	80297d0 <__smakebuf_r+0x18>
 80297f2:	f023 0303 	bic.w	r3, r3, #3
 80297f6:	f043 0302 	orr.w	r3, r3, #2
 80297fa:	81a3      	strh	r3, [r4, #12]
 80297fc:	e7e2      	b.n	80297c4 <__smakebuf_r+0xc>
 80297fe:	89a3      	ldrh	r3, [r4, #12]
 8029800:	6020      	str	r0, [r4, #0]
 8029802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8029806:	81a3      	strh	r3, [r4, #12]
 8029808:	9b01      	ldr	r3, [sp, #4]
 802980a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802980e:	b15b      	cbz	r3, 8029828 <__smakebuf_r+0x70>
 8029810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029814:	4630      	mov	r0, r6
 8029816:	f000 f81d 	bl	8029854 <_isatty_r>
 802981a:	b128      	cbz	r0, 8029828 <__smakebuf_r+0x70>
 802981c:	89a3      	ldrh	r3, [r4, #12]
 802981e:	f023 0303 	bic.w	r3, r3, #3
 8029822:	f043 0301 	orr.w	r3, r3, #1
 8029826:	81a3      	strh	r3, [r4, #12]
 8029828:	89a3      	ldrh	r3, [r4, #12]
 802982a:	431d      	orrs	r5, r3
 802982c:	81a5      	strh	r5, [r4, #12]
 802982e:	e7cf      	b.n	80297d0 <__smakebuf_r+0x18>

08029830 <_fstat_r>:
 8029830:	b538      	push	{r3, r4, r5, lr}
 8029832:	4d07      	ldr	r5, [pc, #28]	@ (8029850 <_fstat_r+0x20>)
 8029834:	2300      	movs	r3, #0
 8029836:	4604      	mov	r4, r0
 8029838:	4608      	mov	r0, r1
 802983a:	4611      	mov	r1, r2
 802983c:	602b      	str	r3, [r5, #0]
 802983e:	f7f7 fc8c 	bl	802115a <_fstat>
 8029842:	1c43      	adds	r3, r0, #1
 8029844:	d102      	bne.n	802984c <_fstat_r+0x1c>
 8029846:	682b      	ldr	r3, [r5, #0]
 8029848:	b103      	cbz	r3, 802984c <_fstat_r+0x1c>
 802984a:	6023      	str	r3, [r4, #0]
 802984c:	bd38      	pop	{r3, r4, r5, pc}
 802984e:	bf00      	nop
 8029850:	2400041c 	.word	0x2400041c

08029854 <_isatty_r>:
 8029854:	b538      	push	{r3, r4, r5, lr}
 8029856:	4d06      	ldr	r5, [pc, #24]	@ (8029870 <_isatty_r+0x1c>)
 8029858:	2300      	movs	r3, #0
 802985a:	4604      	mov	r4, r0
 802985c:	4608      	mov	r0, r1
 802985e:	602b      	str	r3, [r5, #0]
 8029860:	f7f7 fc8b 	bl	802117a <_isatty>
 8029864:	1c43      	adds	r3, r0, #1
 8029866:	d102      	bne.n	802986e <_isatty_r+0x1a>
 8029868:	682b      	ldr	r3, [r5, #0]
 802986a:	b103      	cbz	r3, 802986e <_isatty_r+0x1a>
 802986c:	6023      	str	r3, [r4, #0]
 802986e:	bd38      	pop	{r3, r4, r5, pc}
 8029870:	2400041c 	.word	0x2400041c

08029874 <_init>:
 8029874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029876:	bf00      	nop
 8029878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802987a:	bc08      	pop	{r3}
 802987c:	469e      	mov	lr, r3
 802987e:	4770      	bx	lr

08029880 <_fini>:
 8029880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029882:	bf00      	nop
 8029884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8029886:	bc08      	pop	{r3}
 8029888:	469e      	mov	lr, r3
 802988a:	4770      	bx	lr
